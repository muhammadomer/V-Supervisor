using System;
using System.Collections.Generic;
using System.Web.Services;
using System.Web.Script.Services;
using System.Threading;
using System.Globalization;
using vSuperMTClient.Entities;
using vSuperMTClient.DALs;
using LogApp;
using System.Web;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.IO;
using System.Linq;
using Secure;
using System.Configuration;
using System.Web.UI.DataVisualization.Charting;
using ClosedXML.Excel;

namespace vSuperMTClient
{
    public partial class ACDReports : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Session["User"] != null && Session["vSupervisorDB"] != null)
            {
                try
                {
                    if (!IsPostBack)
                    {
                        UsersEntity userProfileobj = (UsersEntity)Session["User"];
                        if (Session["SuperAdmin"] != null)
                        {
                        }
                        //else if (userProfileobj.userType != "Supervisor")
                        //{
                        //    Response.Redirect("Login.aspx");
                        //}
                        //else if (userProfileobj.Permissions.Find(x => x == 7) != 7)
                        //{
                        //    Response.Redirect("Login.aspx");
                        //}
                        //ReportsCommonMethods.GetAvailableLicenses();
                    }
                }
                catch (Exception ex)
                {
                    Log4Net.WriteException(ex);
                    return;
                }
            }
            else
            {
                Response.Redirect("~/Login.aspx");
            }
        }
        //1:Call Summary Report
        public static string GetCallsSummaryReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                
                List<ReportCallsSummaryEntity> ReportEntityList = new List<ReportCallsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetCallsSummaryReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallsSummaryReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallsSummaryReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        public static string GetCallsSummaryReport2(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);

                List<ReportCallsSummaryEntity> ReportEntityList = new List<ReportCallsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetCallsSummaryReport2(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallsSummaryReport2(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallsSummaryReportCSV2(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //2:All Calls Report
        public static string GetAllCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAllCallsEntity> ReportEntityList = new List<ReportAllCallsEntity>();

                ReportEntityList = ReportsDALObj.GetAllCallsReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAllCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAllCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //3:Abandoned Calls Report
        public static string GetAbandonedCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAbandonedCallsEntity> ReportEntityList = new List<ReportAbandonedCallsEntity>();

                ReportEntityList = ReportsDALObj.GetAbandonedCallsReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAbandonedCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAbandonedCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }

            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //4:Call Breakdown by Hour
        public static string GetCallBreakdownByHourReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays, int TimeInterval)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportCallBreakdownByIntervalEntity> ReportEntityList = new List<ReportCallBreakdownByIntervalEntity>();

                ReportEntityList = ReportsDALObj.GetCallBreakdownByHourReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays,TimeInterval);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallBreakdownByHourReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallBreakdownByHourReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //5:Agent Availability Report
        public static string GetAgentAvailabilityReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentAvailabilityEntity> ReportEntityList = new List<ReportAgentAvailabilityEntity>();

                ReportEntityList = ReportsDALObj.GetAgentAvailabilityReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentAvailabilityReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentAvailabilityReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //6:Call Volume by Agent
        public static string GetCallVolumeByAgentReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentCallsCountEntity> ReportEntityList = new List<ReportAgentCallsCountEntity>();

                ReportEntityList = ReportsDALObj.GetCallVolumeByAgentReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallVolumeByAgentReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallVolumeByAgentReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //7:Agent Presence
        public static string GetAgentPresenceReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentPresenceEntity> ReportEntityList = new List<ReportAgentPresenceEntity>();

                ReportEntityList = ReportsDALObj.GetAgentPresenceReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentPresenceReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentPresenceReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //8:Talk Time by Agent
        public static string GetTalkTimebyAgentReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentCallsSummaryEntity> ReportEntityList = new List<ReportAgentCallsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetTalkTimebyAgentReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateTalkTimebyAgentReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateTalkTimebyAgentReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //9:Itemised Calls By Agent
        public static string GetItemisedCallsByAgentReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentCallsTakenEntity> ReportEntityList = new List<ReportAgentCallsTakenEntity>();

                ReportEntityList = ReportsDALObj.GetItemisedCallsByAgentReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateItemisedCallsByAgentReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateItemisedCallsByAgentReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //10:Agent Summary By Group
        public static string GetAgentSummaryByGroupReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            ///this is not currently in use
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportGroupAgentCallVolumeEntity> ReportEntityList = new List<ReportGroupAgentCallVolumeEntity>();

                ReportEntityList = ReportsDALObj.GetAgentSummaryByGroupReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentSummaryByGroupReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentSummaryByGroupReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //11:Agent Consolidated Report

        public static string GetAgentConsolidatedReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentConsolidatedEntity> ReportEntityList = new List<ReportAgentConsolidatedEntity>();

                ReportEntityList = ReportsDALObj.GetAgentConsolidatedReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.AgentHangUpThreshold, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentConsolidatedReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentConsolidatedReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //12:Group Consolidated Report
        public static string GetGroupConsolidatedReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportGroupConsolidatedEntity> ReportEntityList = new List<ReportGroupConsolidatedEntity>();

                ReportEntityList = ReportsDALObj.GetGroupConsolidatedReport(FromDate, ToDate, timeFrom, timeTo, Groups, SettingsList.AgentWorkingHours, WeekDays);

                if (ReportType == "PDF")
                {
                    string FileName = GenerateGroupConsolidatedReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateGroupConsolidatedReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //13:YBV Calls Report
        public static string GetYBVCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetYBVCallsReport(FromDate, ToDate, timeFrom, timeTo, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //32:YBV Calls Report
        public static string GetYBVCallsByIntervalReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays,int TimeInterval)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetYBVCallsByIntervalReport(FromDate, ToDate, timeFrom, timeTo, WeekDays, TimeInterval);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsByIntervalReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsByIntervalReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //14:Consolidated Agent Board Report
        //this report also use the same procedure as AgentConsolidatedReport , we just "Group by Board" the data on application level
        public static string GetConsolidatedAgentBoardReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentConsolidatedEntity> ReportEntityList = new List<ReportAgentConsolidatedEntity>();

                ReportEntityList = ReportsDALObj.GetAgentConsolidatedReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.AgentHangUpThreshold, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentConsolidatedBaordReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentConsolidatedBaordReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //33:AHT Calls Report
        public static string GetAHTCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetAHTCallsReport(FromDate, ToDate, timeFrom, timeTo, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //34:AHT Calls Report
        public static string GetAHTCallsByIntervalReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays, int TimeInterval)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetAHTCallsByIntervalReport(FromDate, ToDate, timeFrom, timeTo, WeekDays, TimeInterval);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsByIntervalReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsByIntervalReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }



        //****************************************************************************//
        public static string GenerateCallsSummaryReport(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ","_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {


                    Datatable = new PdfPTable(7);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f, 1.5f, 1f, 1f, 1.5f, 1.5f });
                    Datatable.SpacingBefore = 15f;
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Boards"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls(%)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Avg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Longest Waiting"));

                    List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                     .Select(y => new ReportCallsSummaryEntity
                     {

                         TotalCalls = y.Sum(d => d.TotalCalls),
                         TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                         TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                         AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                         AVGWaitTime = y.Average(d => d.AVGWaitTime),
                         LongestWaitingTime = y.Max(d => d.LongestWaitingTime),

                     }).ToList();

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportCallsSummaryEntity obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));

                            ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime)));

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                        }
                    }
                    document.Add(Datatable);
                    document.Close();
                }
                else
                {
                    Datatable = new PdfPTable(1);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f});
                    Datatable.SpacingBefore = 15f;
                    Datatable.AddCell(ReportsCommonMethods.EmptyDataCell("No data found."));
                    document.Add(Datatable);
                    document.Close();
                }
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallsSummaryReport2(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count>0)
                { 
                    Datatable = new PdfPTable(14);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f});
                    Datatable.SpacingBefore = 15f;
                
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Boards"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Transferred In"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow Out\nYBV"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Answered Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nAnswered Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nABND. Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. Calls(%)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nABND. Calls(%)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nAvg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Waiting"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nLongest Waiting"));

                    List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                     .Select(y => new ReportCallsSummaryEntity
                     {

                         TotalCalls = y.Sum(d => d.TotalCalls),
                         TotalTransferredIn= y.Sum(d => d.TotalTransferredIn),
                         TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                         TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                         AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                         AVGWaitTime = y.Average(d => d.AVGWaitTime),
                         LongestWaitingTime = y.Max(d => d.LongestWaitingTime),
                         OverFlowInAnsweredCalls = y.Sum(d => d.OverFlowInAnsweredCalls),
                         OverFlowInAbndCalls = y.Sum(d => d.OverFlowInAbndCalls),
                         OverFlowInAbandonedCallsPercentage = y.Average(d => d.OverFlowInAbandonedCallsPercentage),
                         OverFlowInAVGWaitTime = y.Average(d => d.OverFlowInAVGWaitTime),
                         OverFlowInLongestWaitingTime = y.Max(d => d.OverFlowInLongestWaitingTime),
                         TotalYBVTansferredOut = y.Sum(d => d.TotalYBVTansferredOut),

                     }).ToList();

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportCallsSummaryEntity obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalTransferredIn.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalYBVTansferredOut.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OverFlowInAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OverFlowInAbndCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.OverFlowInAbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInAVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInLongestWaitingTime)));

                            ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalTransferredIn.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalYBVTansferredOut.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.OverFlowInAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.OverFlowInAbndCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(float.Parse(obj1.OverFlowInAbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.OverFlowInAVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.OverFlowInLongestWaitingTime)));

                    }
                    else
                    {
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.BoardTitle));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalTransferredIn.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalYBVTansferredOut.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OverFlowInAnsweredCalls.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAbandonedCalls.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OverFlowInAbndCalls.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.OverFlowInAbandonedCallsPercentage.ToString())).ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInAVGWaitTime)));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInLongestWaitingTime)));
                    }
                }
                document.Add(Datatable);
            }
            else
            {
                document.Add(ReportsCommonMethods.EmptyDataTable());
            }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAllCallsReport(string ReportName, List<ReportAllCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";

                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportAllCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAllCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      CallCount = y.Count()


                  }).ToList();


                    List<List<ReportAllCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();
                    foreach (List<ReportAllCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths
                        SubSectionHeadertable.SpacingBefore = 0f;
                        SubSectionHeadertable.SpacingAfter = 0f;
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].BoardTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(5);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date & Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Duration"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Callers Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Called Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Status"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAllCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DateTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DDI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Status));

                                ReportAllCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total: " + obj1.CallCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DateTime));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DDI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Status));
                            }
                        }
                        document.Add(Datatable);
                    }
                   
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAbandonedCallsReport(string ReportName, List<ReportAbandonedCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;

                Headertable.AddCell(cell);

                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportAbandonedCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAbandonedCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      CallCount = y.Count()

                  }).ToList();


                    List<List<ReportAbandonedCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();
                    foreach (List<ReportAbandonedCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].BoardTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date & Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Duration"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Callers Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Called Number"));

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAbandonedCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DateTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DDI));

                                ReportAbandonedCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total: " + obj1.CallCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));

                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DateTime));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DDI));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallBreakdownByHourReport(string ReportName, List<ReportCallBreakdownByIntervalEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo,int TimeInterval)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {


                    List<ReportCallBreakdownByIntervalEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle })
                     .Select(y => new ReportCallBreakdownByIntervalEntity
                     {
                         Date = y.First().Date,
                         BoardTitle = y.First().BoardTitle,
                         TotalCalls = y.Sum(d => d.TotalCalls),
                         TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                         TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                         AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                         LongestWaitingTime = y.Max(d => d.LongestWaitingTime),


                     }).ToList();

                    List<List<ReportCallBreakdownByIntervalEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportCallBreakdownByIntervalEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("     Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].BoardTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(6);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls(%)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Longest Waiting"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportCallBreakdownByIntervalEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAbandonedCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));

                                ReportCallBreakdownByIntervalEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle && x.Date == obj.Date);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAbandonedCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(obj1.AbandonedCallsPercentage).ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime)));


                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAbandonedCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentAvailabilityReport(string ReportName, List<ReportAgentAvailabilityEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {

                    List<ReportAgentAvailabilityEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                 .Select(y => new ReportAgentAvailabilityEntity
                 {
                     GroupName = y.First().GroupName,
                     LoggedInTime = y.Sum(d => d.LoggedInTime),
                     LoggedOutTime = y.Sum(d => d.LoggedOutTime),
                     ACDBusyTime = y.Sum(d => d.ACDBusyTime),
                     NonACDBusyTime = y.Sum(d => d.NonACDBusyTime),
                     TempAbsTime = y.Sum(d => d.TempAbsTime),
                     LoggedInCount = y.Sum(d => d.LoggedInCount),
                     LoggedOutCount = y.Sum(d => d.LoggedOutCount),
                     TempAbsCount = y.Sum(d => d.TempAbsCount),




                 }).ToList();

                    List<List<ReportAgentAvailabilityEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentAvailabilityEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(9);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1.1f, 1.3f });
                        Datatable.SpacingBefore = 15f;


                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowLeftCell("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Logged in"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Logged out"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("ACD Busy"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Non ACD"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Temp Abs"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("No of Logins"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("No of Logouts"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("No of Temporary"));

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Busy Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Absences"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentAvailabilityEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedOutTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TempAbsCount.ToString()));


                                ReportAgentAvailabilityEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedOutTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.NonACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TempAbsCount.ToString()));
                            }
                            else
                            {

                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedOutTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TempAbsCount.ToString()));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        } 
        public static string GenerateCallVolumeByAgentReport(string ReportName, List<ReportAgentCallsCountEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
               
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentCallsCountEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.GroupName }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentCallsCountEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(3);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;
                        Datatable.DefaultCell.Border = Rectangle.BOTTOM_BORDER;
                        Datatable.DefaultCell.PaddingTop = 10f;
                        Datatable.DefaultCell.PaddingBottom = 10f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Hour"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));


                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentCallsCountEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetHourFormat(obj.Hour)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetHourFormat(obj.Hour)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentPresenceReport(string ReportName, List<ReportAgentPresenceEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
              
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentPresenceEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentPresenceEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 420f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(2);
                        Datatable.TotalWidth = 420f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f });
                        Datatable.SpacingBefore = 15f;
                        Datatable.DefaultCell.Border = Rectangle.BOTTOM_BORDER;
                        Datatable.DefaultCell.PaddingTop = 10f;
                        Datatable.DefaultCell.PaddingBottom = 10f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Action"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date & Time"));



                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentPresenceEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Action));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.StartTime));


                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Action));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.StartTime));


                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateTalkTimebyAgentReport(string ReportName, List<ReportAgentCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                .Select(y => new ReportAgentCallsSummaryEntity
                {
                    GroupName = y.First().GroupName,
                    TotalCalls = y.Sum(d => d.TotalCalls),
                    TotalTalkTime = y.Sum(d => d.TotalTalkTime),
                    AvgTalkTime = y.Average(d => d.AvgTalkTime),
                }).ToList();

                    List<List<ReportAgentCallsSummaryEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentCallsSummaryEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;


                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Talk Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Avg Talk Time"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentCallsSummaryEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalTalkTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgTalkTime)));

                                ReportAgentCallsSummaryEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.TotalTalkTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgTalkTime)));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalTalkTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgTalkTime)));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateItemisedCallsByAgentReport(string ReportName, List<ReportAgentCallsTakenEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
               
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentCallsTakenEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
               .Select(y => new ReportAgentCallsTakenEntity
               {
                   GroupName = y.First().GroupName,
                   AgentName = y.First().AgentName,
                   Duration = y.Sum(d => d.Duration),

               }).ToList();

                    List<List<ReportAgentCallsTakenEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentCallsTakenEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;



                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Call Type"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Extension"));

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Duration"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time of Call"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentCallsTakenEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.CallType));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.Extension));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.StartTime));

                                ReportAgentCallsTakenEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName && x.AgentName == obj.AgentName);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                            }
                            else
                            {

                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.CallType));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.Extension));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.StartTime));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentSummaryByGroupReport(string ReportName, List<ReportGroupAgentCallVolumeEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                ///this is not currently in use
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportGroupAgentCallVolumeEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.DateOnly, x.Title }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportGroupAgentCallVolumeEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 782f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                    phrase = new Phrase();
                    phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].DateOnly, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    phrase.Add(new Chunk("      Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].Title, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 10f;
                    cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(7);
                    Datatable.TotalWidth = 782f;
                    Datatable.LockedWidth = true;
                   Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;


                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowLeftCell("Hour"));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Agents Logged in"));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Call Count"));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents"));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents on"));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents on "));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents Set"));

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell(""));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Logged in"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ACD Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Non-ACD Calls "));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("as Busy"));
                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        ReportGroupAgentCallVolumeEntity obj = ReportEntityLists[i];

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetHourFormat(obj.HourOnly)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AgentLoggedCount));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.CallsCount));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGLogIn));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGCallBusy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGNonCallBusy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGBusy));
                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetHourFormat(obj.HourOnly)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AgentLoggedCount));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.CallsCount));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGLogIn));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGCallBusy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGNonCallBusy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGBusy));
                        }
                    }
                    document.Add(Datatable);
                }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentConsolidatedReport(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
               
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupName }).Select(y => y.ToList()).ToList();


                foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 782f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                    phrase = new Phrase();
                    phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].EventDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    phrase.Add(new Chunk("      Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 10f;
                    cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(19);
                    Datatable.TotalWidth = 782f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 0.5f, 1f, 1f, 0.5f, 1f, 1f, 1f, 0.5f, 1f, 1f, 0.5f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;



                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Agent Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged In\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Temp. Absense\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Clerical\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Clerical\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Available\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nHandled"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Call\nTalk Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nTalk Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Transferred"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Hold\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Hold\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Hold\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Out"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Occupancy %"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Idle Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Short Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged Out\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Logged\nIn Time"));

                    Double _TempAbsTime = 0;
                    Double _ClerikalBusyTime = 0;
                    Double _AvailableTime = 0;
                    Double _TotalLoggedInTime = 0;
                    Double _ACDBusyCount = 0;
                    Double _ACDBusyTime = 0;
                    Double _TransferCount = 0;
                    Double _UnHoldTime = 0;
                    Double _OutBoundCallCount = 0;

                    Double _TotalIdleTime = 0;
                    Double _HangUpCount = 0;
                    Double _Occupancy = 0;
                    Double _OccupancyCount = 0;
                    Double _AvgACDBusy = 0;
                    Double _AvgUnHold = 0;
                    TimeSpan _LogInTime = TimeSpan.MaxValue;
                    TimeSpan _LogOutTime = TimeSpan.MaxValue;
                    Double _LongestUnHoldTime = 0;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {

                        ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                        string TotalLoggedInTime = "";//N/A
                        string AvailableTime = "";//N/A
                        string Occupancy = "";//N/A
                        string LogInTime = "";//N/A
                        string LogOutTime = "";
                        string AvgClerikalBusy = "00:00:00";
                        string AvgUnHold = "00:00:00";
                        string AvgACDBusy = "00:00:00";


                        if (obj.TotalLoggedInTime != 0)
                        {
                            AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                            TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                            _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                            _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                            _OccupancyCount++;
                        }
                        if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                        {
                            LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                            //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                            if (_LogInTime > obj.LogInTime)
                                _LogInTime = obj.LogInTime;
                        }

                        if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                        {
                            LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                            if (_LogOutTime > obj.LogOutTime)
                                _LogOutTime = obj.LogOutTime;
                        }

                        if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                        {
                            _LongestUnHoldTime = obj.LongestUnHoldTime;
                        }
                        if (obj.ClerikalBusyCount != 0)
                        {
                            AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                        }
                        if (obj.ACDBusyCount != 0)
                        {
                            AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                            _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                        }

                        if (obj.UnHoldCount != 0)
                        {
                            AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                            _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                        }
                        _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                        _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                        _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                        _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                        _TransferCount = _TransferCount + obj.TransferCount;
                        _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                        _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                        _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                        _HangUpCount = _HangUpCount + obj.HangUpCount;

                        if (i == ReportEntityLists.Count - 1)
                        {



                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogInTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgClerikalBusy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvailableTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDBusyCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgACDBusy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgUnHold));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OutBoundCallCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Occupancy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.HangUpCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogOutTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalLoggedInTime));


                            //Combined Totals 
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            if (_LogInTime == TimeSpan.MaxValue)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss")));
                            }
                            // table.AddCell(BottomRowCell(!_LogInTime.HasValue ? "" : _LogInTime.Value.ToString("HH:mm:ss")));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime / ReportEntityLists.Count)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDBusyCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_TransferCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OutBoundCallCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_HangUpCount.ToString()));
                            if (_LogOutTime == TimeSpan.MaxValue)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss")));
                            }
                            //table.AddCell(ReportsCommonMethods.BottomRowCell(!_LogOutTime.HasValue ? "" : _LogOutTime.Value.ToString("HH:mm:ss")));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime)));

                        }
                        else
                        {

                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(LogInTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgClerikalBusy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvailableTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDBusyCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgACDBusy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgUnHold));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OutBoundCallCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Occupancy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.HangUpCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(LogOutTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalLoggedInTime));

                        }
                    }

                    document.Add(Datatable);
                }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateGroupConsolidatedReport(string ReportName, List<ReportGroupConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportGroupConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                foreach (List<ReportGroupConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 782f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                    phrase = new Phrase();
                    phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].StartDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 10f;
                    cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(19);
                    Datatable.TotalWidth = 782f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 2.5f, 0.6f, 0.6f, 0.6f, 1f, 1f, 1.5f, 0.6f, 1.5f, 0.6f, 1.5f, 1.5f, 1.5f, 1.5f, 0.6f, 1.5f, 1.5f, 1f, 0.6f });
                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Board Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Offered"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Answered"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total ABND."));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. %"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Service Level"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Average FTE\nAvailable"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged in Staff"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Hold"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Transferred Out"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Wait\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Wait\nAnswered"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Wait\nABND."));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Wait\nABND."));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Internal Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Internal Handling\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Internal\nCall Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Calls\nPer Hour"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Transfers In"));



                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        string TotalCalls = "";
                        string TotalAnswered = "0";
                        string TotalAbanodoned = "0";
                        string AbandonedPer = "0";
                        string SLAPer = "0";
                        string AvgAvailableTime = "00:00:00";
                        string LoggedInCount = "0";
                        string AvgHold = "00:00:00";
                        string TransferACD = "0";
                        string AvgWaitTime = "00:00:00";
                        string LongestWaitAnswer = "00:00:00";
                        string LongestWaitAbandoned = "00:00:00";
                        string AvgWaitAbandonedTime = "00:00:00";
                        string TotalInternalCall = "0";
                        string TotalInternalTime = "00:00:00";
                        string AVGInternalTime = "00:00:00";
                        string AvgCallsHour = "0";
                        string TotalTransfersIn = "0";

                        ReportGroupConsolidatedEntity obj = ReportEntityLists[i];
                        if (obj.TotalCalls != "")
                        {
                            TotalCalls = obj.TotalCalls;
                        }
                        if (obj.TotalAnswered != "")
                        {
                            TotalAnswered = obj.TotalAnswered;
                        }
                        if (obj.TotalAbanodoned != "")
                        {
                            TotalAbanodoned = obj.TotalAbanodoned;
                        }
                        if (obj.AbandonedPer != "")
                        {
                            AbandonedPer = Math.Round(Convert.ToDouble(obj.AbandonedPer), 2).ToString();

                        }
                        if (obj.SLAPer != "")
                        {
                            SLAPer = Math.Round(Convert.ToDouble(obj.SLAPer), 2).ToString();

                        }
                        if (obj.AvgAvailableTime != "")
                        {
                            AvgAvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgAvailableTime) * 3600).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LoggedInCount != "")
                        {
                            LoggedInCount = obj.LoggedInCount;
                        }
                        if (obj.AvgHold != "")
                        {
                            AvgHold = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgHold)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.TransferACD != "")
                        {
                            TransferACD = obj.TransferACD;
                        }
                        if (obj.AvgWaitTime != "")
                        {
                            AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LongestWaitAnswer != "")
                        {
                            LongestWaitAnswer = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAnswer)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LongestWaitAbandoned != "")
                        {
                            LongestWaitAbandoned = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAbandoned)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AvgWaitAbandonedTime != "")
                        {
                            AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.TotalInternalCall != "")
                        {
                            TotalInternalCall = obj.TotalInternalCall;
                        }
                        if (obj.TotalInternalTime != "")
                        {
                            TotalInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalInternalTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AVGInternalTime != "")
                        {
                            AVGInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AVGInternalTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AvgCallsHour != "")
                        {
                            AvgCallsHour = Math.Round(Convert.ToDouble(obj.AvgCallsHour), 2).ToString();
                        }
                        if (obj.TotalTransfersIn != "")
                        {
                            TotalTransfersIn = obj.TotalTransfersIn;
                        }


                        if (i == ReportEntityLists.Count - 1)
                        {

                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Title));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalCalls));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalAnswered));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalAbanodoned));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AbandonedPer));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(SLAPer));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgAvailableTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LoggedInCount));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgHold));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TransferACD));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgWaitTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LongestWaitAnswer));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LongestWaitAbandoned));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgWaitAbandonedTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalInternalCall));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalInternalTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AVGInternalTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgCallsHour));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalTransfersIn));


                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Title));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalCalls));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalAnswered));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalAbanodoned));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AbandonedPer));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(SLAPer));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgAvailableTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(LoggedInCount));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgHold));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TransferACD));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgWaitTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(LongestWaitAnswer));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(LongestWaitAbandoned));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgWaitAbandonedTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalInternalCall));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalInternalTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AVGInternalTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgCallsHour));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalTransfersIn));
                        }
                    }
                    document.Add(Datatable);
                }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateYBVCallsReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    Datatable = new PdfPTable(5);
                Datatable.TotalWidth = 420;
                Datatable.LockedWidth = true;
                Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f });
                Datatable.SpacingBefore = 15f;
                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Midnight-9AM"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("9AM-5PM"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("5PM-Midnight"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                int TransferCount = 0;
                int FirstCount = 0;
                int SecondCount = 0;
                int ThirdCount = 0;
                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    ReportYBVCallsEntity obj = ReportEntityList[i];

                    if (i == ReportEntityList.Count - 1)
                    {
                        Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Date));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.FirstCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.SecondCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ThirdCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                        TransferCount += obj.TransferCount;
                        FirstCount += obj.FirstCount;
                        SecondCount += obj.SecondCount;
                        ThirdCount += obj.ThirdCount;

                    }
                    else
                    {
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Date));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.FirstCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.SecondCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ThirdCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                        TransferCount += obj.TransferCount;
                        FirstCount += obj.FirstCount;
                        SecondCount += obj.SecondCount;
                        ThirdCount += obj.ThirdCount;
                    }
                }
                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(FirstCount.ToString()));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(SecondCount.ToString()));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ThirdCount.ToString()));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(TransferCount.ToString()));
                document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateYBVCallsByIntervalReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                                 .Select(y => new ReportYBVCallsEntity
                                 {
                                     Date = y.First().Date,
                                     TransferCount = y.Sum(d => d.TransferCount),
                                 }).ToList();

                List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date}).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 420f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                    phrase = new Phrase();
                    phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 10f;
                    cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(2);
                    Datatable.TotalWidth = 420f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f });
                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        ReportYBVCallsEntity obj = ReportEntityLists[i];

                        if (i == ReportEntityLists.Count - 1)
                        {
                          
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));

                            ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TransferCount.ToString()));
                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                        }
                       
                    }
                    document.Add(Datatable);
                }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentConsolidatedBaordReport(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
            
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
                .Select(y => new ReportAgentConsolidatedEntity
                {
                    AgentName = y.First().AgentName,
                    GroupName = y.First().GroupName,
                    LogInTime = y.Min(c => c.LogInTime),
                    LogOutTime = y.Min(c => c.LogOutTime),
                    TotalLoggedInTime = y.Sum(c => c.TotalLoggedInTime),
                    ACDBusyTime = y.Sum(c => c.ACDBusyTime),
                    NonACDBusyTime = y.Sum(c => c.NonACDBusyTime),
                    ClerikalBusyTime = y.Sum(c => c.ClerikalBusyTime),
                    TempAbsTime = y.Sum(c => c.TempAbsTime),
                    UnHoldTime = y.Sum(c => c.UnHoldTime),
                    LongestUnHoldTime = y.Max(c => c.LongestUnHoldTime),
                    TotalIdleTime = y.Sum(c => c.TotalIdleTime),
                    ACDBusyCount = y.Sum(c => c.ACDBusyCount),
                    LoggedInCount = y.Sum(c => c.LoggedInCount),
                    LoggedOutCount = y.Sum(c => c.LoggedOutCount),
                    ClerikalBusyCount = y.Sum(c => c.ClerikalBusyCount),
                    TempAbsCount = y.Sum(c => c.TempAbsCount),
                    OutBoundCallCount = y.Sum(c => c.OutBoundCallCount),
                    TransferCount = y.Sum(c => c.TransferCount),
                    UnHoldCount = y.Sum(c => c.UnHoldCount),
                    HangUpCount = y.Sum(c => c.HangUpCount),


                }).ToList();
                List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();



                foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 782f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                    phrase = new Phrase();

                    phrase.Add(new Chunk("Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 10f;
                    cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(19);
                    Datatable.TotalWidth = 782f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 0.5f, 1f, 1f, 0.5f, 1f, 1f, 1f, 0.5f, 1f, 1f, 0.5f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;



                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Board Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged In\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Temp. Absense\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Clerical\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Clerical\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Available\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nHandled"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Call\nTalk Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nTalk Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Transferred"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Hold\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Hold\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Hold\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Out"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Occupancy %"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Idle Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Short Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged Out\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Logged\nIn Time"));

                    Double _TempAbsTime = 0;
                    Double _ClerikalBusyTime = 0;
                    Double _AvailableTime = 0;
                    Double _TotalLoggedInTime = 0;
                    Double _ACDBusyCount = 0;
                    Double _ACDBusyTime = 0;
                    Double _TransferCount = 0;
                    Double _UnHoldTime = 0;
                    Double _OutBoundCallCount = 0;

                    Double _TotalIdleTime = 0;
                    Double _HangUpCount = 0;
                    Double _Occupancy = 0;
                    Double _OccupancyCount = 0;
                    Double _AvgACDBusy = 0;
                    Double _AvgUnHold = 0;
                    Double _AvgClerikalBusy = 0;
                    TimeSpan _LogInTime = TimeSpan.MaxValue;
                    TimeSpan _LogOutTime = TimeSpan.MaxValue;
                    Double _LongestUnHoldTime = 0;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {

                        ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                        string TotalLoggedInTime = "";//N/A
                        string AvailableTime = "";//N/A
                        string Occupancy = "";//N/A
                        string LogInTime = "";//N/A
                        string LogOutTime = "";
                        string AvgClerikalBusy = "00:00:00";
                        string AvgUnHold = "00:00:00";
                        string AvgACDBusy = "00:00:00";


                        if (obj.TotalLoggedInTime != 0)
                        {
                            //AvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime).ToString(@"hh\:mm\:ss");
                            AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                            //Occupancy = Math.Round((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / WorkingHours / 36, 2).ToString();
                            TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                            _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                            _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                            _OccupancyCount++;
                        }
                        if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                        {
                            LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                            //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                            if (_LogInTime > obj.LogInTime)
                                _LogInTime = obj.LogInTime;
                        }

                        if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                        {
                            LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                            if (_LogOutTime > obj.LogOutTime)
                                _LogOutTime = obj.LogOutTime;
                        }
                        if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                        {
                            _LongestUnHoldTime = obj.LongestUnHoldTime;
                        }
                        if (obj.ClerikalBusyCount != 0)
                        {
                            AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                            _AvgClerikalBusy = _AvgClerikalBusy + Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount);

                        }
                        if (obj.ACDBusyCount != 0)
                        {
                            AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                            _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                        }

                        if (obj.UnHoldCount != 0)
                        {
                            AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                            _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                        }
                        _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                        _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                        _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                        _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                        _TransferCount = _TransferCount + obj.TransferCount;
                        _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                        _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                        _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                        _HangUpCount = _HangUpCount + obj.HangUpCount;

                        if (i == ReportEntityLists.Count - 1)
                        {



                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.GroupName));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogInTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgClerikalBusy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvailableTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDBusyCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgACDBusy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgUnHold));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OutBoundCallCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Occupancy));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.HangUpCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogOutTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalLoggedInTime));


                            //Combined Totals 
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));

                            if (_LogInTime == TimeSpan.MaxValue)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss")));
                            }
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgClerikalBusy / ReportEntityLists.Count)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDBusyCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_TransferCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OutBoundCallCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_HangUpCount.ToString()));
                            if (_LogOutTime == TimeSpan.MaxValue)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss")));
                            }

                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime)));

                        }
                        else
                        {

                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.GroupName));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(LogInTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgClerikalBusy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvailableTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDBusyCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgACDBusy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgUnHold));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OutBoundCallCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Occupancy));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.HangUpCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(LogOutTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalLoggedInTime));

                        }
                    }

                    document.Add(Datatable);
                }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAHTCallsReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    Datatable = new PdfPTable(5);
                Datatable.TotalWidth = 420;
                Datatable.LockedWidth = true;
                Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f });
                Datatable.SpacingBefore = 15f;
                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Midnight-9AM"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("9AM-5PM"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("5PM-Midnight"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                int TransferCount = 0;
                int FirstCount = 0;
                int SecondCount = 0;
                int ThirdCount = 0;
                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    ReportYBVCallsEntity obj = ReportEntityList[i];

                    if (i == ReportEntityList.Count - 1)
                    {
                        Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Date));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.FirstCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.SecondCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ThirdCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                        TransferCount += obj.TransferCount;
                        FirstCount += obj.FirstCount;
                        SecondCount += obj.SecondCount;
                        ThirdCount += obj.ThirdCount;

                    }
                    else
                    {
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Date));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.FirstCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.SecondCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ThirdCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                        TransferCount += obj.TransferCount;
                        FirstCount += obj.FirstCount;
                        SecondCount += obj.SecondCount;
                        ThirdCount += obj.ThirdCount;
                    }
                }
                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(FirstCount.ToString()));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(SecondCount.ToString()));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ThirdCount.ToString()));
                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(TransferCount.ToString()));
                document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAHTCallsByIntervalReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                cell = ReportsCommonMethods.ImageCell("~/Content/images//Logo2.png", 6f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                                 .Select(y => new ReportYBVCallsEntity
                                 {
                                     Date = y.First().Date,
                                     TransferCount = y.Sum(d => d.TransferCount),
                                 }).ToList();

                List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 420f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                    phrase = new Phrase();
                    phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 10f;
                    cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(2);
                    Datatable.TotalWidth = 420f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f });
                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        ReportYBVCallsEntity obj = ReportEntityLists[i];

                        if (i == ReportEntityLists.Count - 1)
                        {

                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));

                            ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TransferCount.ToString()));
                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                        }

                    }
                    document.Add(Datatable);
                }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        //****************************************************************************//
        public static string GenerateCallsSummaryReportCSV(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                


                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                Headercell = ws.Cell(Row, 1).SetValue("Boards");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("Answered Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("ABND. Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("ABND. Calls(%)");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 6).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 7).SetValue("Longest Waiting");
                Headercell.Style.Font.Bold = true;


                List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                 .Select(y => new ReportCallsSummaryEntity
                 {

                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                     TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                     AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                     AVGWaitTime = y.Average(d => d.AVGWaitTime),
                     LongestWaitingTime = y.Max(d => d.LongestWaitingTime),

                 }).ToList();

                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportCallsSummaryEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.BoardTitle);
                    BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalAnsweredCalls.ToString());
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.TotalAbandonedCalls.ToString());
                    BodyCell = ws.Cell(Row, 5).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                    BodyCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime));
                    BodyCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));

                    if (i == ReportEntityList.Count - 1)
                    {
                        Row++;
                        ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                        IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 3).SetValue(obj1.TotalAnsweredCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 4).SetValue(obj1.TotalAbandonedCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 5).SetValue(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        Row++;
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallsSummaryReportCSV2(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";



                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                Headercell = ws.Cell(Row, 1).SetValue("Boards");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("Overflow In Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("Answered Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("Overflow In Answered Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 6).SetValue("ABND. Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 7).SetValue("Overflow In ABND. Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 8).SetValue("ABND. Calls(%)");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 9).SetValue("Overflow In ABND. Calls(%)");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 10).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 11).SetValue("Overflow In Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 12).SetValue("Longest Waiting");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 13).SetValue("Overflow In Longest Waiting");
                Headercell.Style.Font.Bold = true;

                List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                 .Select(y => new ReportCallsSummaryEntity
                 {

                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                     TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                     AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                     AVGWaitTime = y.Average(d => d.AVGWaitTime),
                     LongestWaitingTime = y.Max(d => d.LongestWaitingTime),
                     TotalTransferredIn = y.Sum(d => d.TotalTransferredIn),
                     OverFlowInAnsweredCalls = y.Sum(d => d.OverFlowInAnsweredCalls),
                     OverFlowInAbndCalls = y.Sum(d => d.OverFlowInAbndCalls),
                     OverFlowInAbandonedCallsPercentage = y.Average(d => d.OverFlowInAbandonedCallsPercentage),
                     OverFlowInAVGWaitTime = y.Average(d => d.OverFlowInAVGWaitTime),
                     OverFlowInLongestWaitingTime = y.Max(d => d.OverFlowInLongestWaitingTime),
                     TotalYBVTansferredOut= y.Sum(d => d.TotalYBVTansferredOut),
                 }).ToList();

                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportCallsSummaryEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.BoardTitle);

                    BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalYBVTansferredOut.ToString());
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.TotalAnsweredCalls.ToString());
                    BodyCell = ws.Cell(Row, 5).SetValue(obj.OverFlowInAnsweredCalls.ToString());
                    BodyCell = ws.Cell(Row, 6).SetValue(obj.TotalAbandonedCalls.ToString());
                    BodyCell = ws.Cell(Row, 7).SetValue(obj.OverFlowInAbndCalls.ToString());
                    BodyCell = ws.Cell(Row, 8).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                    BodyCell = ws.Cell(Row, 9).SetValue(Math.Round(float.Parse(obj.OverFlowInAbandonedCallsPercentage.ToString())).ToString());
                    BodyCell = ws.Cell(Row, 10).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime));
                    BodyCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInAVGWaitTime));
                    BodyCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));
                    BodyCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInLongestWaitingTime));

                    if (i == ReportEntityList.Count - 1)
                    {
                        Row++;
                        ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                        IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 3).SetValue(obj1.TotalYBVTansferredOut.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 4).SetValue(obj1.TotalAnsweredCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 5).SetValue(obj1.OverFlowInAnsweredCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 6).SetValue(obj1.TotalAbandonedCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 7).SetValue(obj1.OverFlowInAbndCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 8).SetValue(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 9).SetValue(Math.Round(float.Parse(obj1.OverFlowInAbandonedCallsPercentage.ToString())).ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 10).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.OverFlowInAVGWaitTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.OverFlowInLongestWaitingTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        Row++;
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAllCallsReportCSV(string ReportName, List<ReportAllCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;



                List<ReportAllCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAllCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      CallCount = y.Count()
                  }).ToList();

                List<List<ReportAllCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();

               
                foreach (List<ReportAllCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {

                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Board: " + ReportEntityLists[0].BoardTitle + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Date & Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Duration");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Callers Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Called Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Status");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAllCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.DateTime);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration));
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.CLI);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.DDI);
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.Status);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAllCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total: " + obj1.CallCount + "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAbandonedCallsReportCSV(string ReportName, List<ReportAbandonedCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                List<ReportAbandonedCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAbandonedCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      CallCount = y.Count()

                  }).ToList();
                List<List<ReportAbandonedCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();
                
                foreach (List<ReportAbandonedCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Board: " + ReportEntityLists[0].BoardTitle + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date & Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Duration");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Callers Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Called Number");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAbandonedCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.DateTime);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration));
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.CLI);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.DDI);


                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAbandonedCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total: " + obj1.CallCount + "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;

                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallBreakdownByHourReportCSV(string ReportName, List<ReportCallBreakdownByIntervalEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo,int TimeInterval)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";

                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {
                   
                    var image = ws.AddPicture(ImageLocation);
                   
                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row+=3;
                    ws.Range("A1:D3").Merge();
                }
                  

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row+=2;
                List<ReportCallBreakdownByIntervalEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle })
                 .Select(y => new ReportCallBreakdownByIntervalEntity
                 {
                     Date = y.First().Date,
                     BoardTitle = y.First().BoardTitle,
                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                     TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                     AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                     LongestWaitingTime = y.Max(d => d.LongestWaitingTime),


                 }).ToList();

                List<List<ReportCallBreakdownByIntervalEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);
               
                foreach (List<ReportCallBreakdownByIntervalEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold=true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Board: " + ReportEntityLists[0].BoardTitle + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Total Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Answered Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("ABND. Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("ABND. Calls(%)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Longest Waiting");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportCallBreakdownByIntervalEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalAnsweredCalls.ToString());
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.TotalAbandonedCalls.ToString());
                        BodyCell = ws.Cell(Row, 5).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                        BodyCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));
                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportCallBreakdownByIntervalEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle && x.Date == obj.Date);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(obj1.TotalAnsweredCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(obj1.TotalAbandonedCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue(Math.Round(obj1.AbandonedCallsPercentage).ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentAvailabilityReportCSV(string ReportName, List<ReportAgentAvailabilityEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";

                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                List<ReportAgentAvailabilityEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                 .Select(y => new ReportAgentAvailabilityEntity
                 {
                     GroupName = y.First().GroupName,
                     LoggedInTime = y.Sum(d => d.LoggedInTime),
                     LoggedOutTime = y.Sum(d => d.LoggedOutTime),
                     ACDBusyTime = y.Sum(d => d.ACDBusyTime),
                     NonACDBusyTime = y.Sum(d => d.NonACDBusyTime),
                     TempAbsTime = y.Sum(d => d.TempAbsTime),
                     LoggedInCount = y.Sum(d => d.LoggedInCount),
                     LoggedOutCount = y.Sum(d => d.LoggedOutCount),
                     TempAbsCount = y.Sum(d => d.TempAbsCount),
                 }).ToList();

                List<List<ReportAgentAvailabilityEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);
               
                foreach (List<ReportAgentAvailabilityEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 2).SetValue("Board: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Logged in Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Logged out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("ACD Busy Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Non ACD Busy Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Temp Abs Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("No of Logins");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("No of Logouts");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("No of Temporary Absences");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentAvailabilityEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedInTime));
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedOutTime));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                        BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime));
                        BodyCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime));
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.LoggedInCount.ToString());
                        BodyCell = ws.Cell(Row, 8).SetValue(obj.LoggedOutCount.ToString());
                        BodyCell = ws.Cell(Row, 9).SetValue(obj.TempAbsCount.ToString());
                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAgentAvailabilityEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedInTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedOutTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.ACDBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.NonACDBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.TempAbsTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(obj1.LoggedInCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(obj1.LoggedOutCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(obj1.TempAbsCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallVolumeByAgentReportCSV(string ReportName, List<ReportAgentCallsCountEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";

                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportAgentCallsCountEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.GroupName }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);
                
                foreach (List<ReportAgentCallsCountEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Board: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Hour");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Answered Calls");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentCallsCountEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetHourFormat(obj.Hour));
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalCalls);
                        Row++;
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }
        public static string GenerateAgentPresenceReportCSV(string ReportName, List<ReportAgentPresenceEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";


                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportAgentPresenceEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);
                
                foreach (List<ReportAgentPresenceEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Board: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Agent: " + ReportEntityLists[0].AgentName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Action");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Date & Time");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentPresenceEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetHourFormat(obj.StartTime));
                        Row++;
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateTalkTimebyAgentReportCSV(string ReportName, List<ReportAgentCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";

                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportAgentCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                .Select(y => new ReportAgentCallsSummaryEntity
                {
                    GroupName = y.First().GroupName,
                    TotalCalls = y.Sum(d => d.TotalCalls),
                    TotalTalkTime = y.Sum(d => d.TotalTalkTime),
                    AvgTalkTime = y.Average(d => d.AvgTalkTime),
                }).ToList();

                List<List<ReportAgentCallsSummaryEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);
                
                foreach (List<ReportAgentCallsSummaryEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 2).SetValue("Board: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Answered Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Total Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Avg Talk Time");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentCallsSummaryEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalTalkTime));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgTalkTime));

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAgentCallsSummaryEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.TotalTalkTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgTalkTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }

                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateItemisedCallsByAgentReportCSV(string ReportName, List<ReportAgentCallsTakenEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportAgentCallsTakenEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
               .Select(y => new ReportAgentCallsTakenEntity
               {
                   GroupName = y.First().GroupName,
                   AgentName = y.First().AgentName,
                   Duration = y.Sum(d => d.Duration),

               }).ToList();

                List<List<ReportAgentCallsTakenEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);
               
                foreach (List<ReportAgentCallsTakenEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Board: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Agent: " + ReportEntityLists[0].AgentName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Call Type");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Extension");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Duration");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Time of Call");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentCallsTakenEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.CallType);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.Extension);
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration));
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.StartTime);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAgentCallsTakenEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName && x.AgentName == obj.AgentName);
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;

                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentSummaryByGroupReportCSV(string ReportName, List<ReportGroupAgentCallVolumeEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                ///this is not currently in use
                ///
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportGroupAgentCallVolumeEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.DateOnly, x.Title }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);
               
                foreach (List<ReportGroupAgentCallVolumeEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].DateOnly + " ");
                    Headercell = ws.Cell(Row, 2).SetValue("Board: " + ReportEntityLists[0].Title + " ");

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Hour");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Agents Logged in");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Call Count");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Avg Agents Logged in");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Avg Agents on ACD Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Avg Agents on Non-ACD Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Avg Agents Set as Busy");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportGroupAgentCallVolumeEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(ReportsCommonMethods.GetHourFormat(obj.HourOnly));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.AgentLoggedCount);
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.CallsCount);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.AVGLogIn);
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.AVGCallBusy);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.AVGNonCallBusy);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.AVGBusy);
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }
        public static string GenerateAgentConsolidatedReportCSV(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupName }).Select(y => y.ToList()).ToList();

               
                foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].EventDate + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Board: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Logged In Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Temp. Absense Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Clerical Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("AVG. Clerical Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Available Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Total Calls Handled");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("AVG. Call Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("Total Calls Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("Calls Transferred");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("AVG. Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("Longest Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("Total Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("Calls Out");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 15).SetValue("Occupancy %");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 16).SetValue("Idle Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 17).SetValue("Short Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 18).SetValue("Logged Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 19).SetValue("Total Logged In Time");
                    Headercell.Style.Font.Bold = true;

                    Double _TempAbsTime = 0;
                    Double _ClerikalBusyTime = 0;
                    Double _AvailableTime = 0;
                    Double _TotalLoggedInTime = 0;
                    Double _ACDBusyCount = 0;
                    Double _ACDBusyTime = 0;
                    Double _TransferCount = 0;
                    Double _UnHoldTime = 0;
                    Double _OutBoundCallCount = 0;

                    Double _TotalIdleTime = 0;
                    Double _HangUpCount = 0;
                    Double _Occupancy = 0;
                    Double _OccupancyCount = 0;
                    Double _AvgACDBusy = 0;
                    Double _AvgUnHold = 0;
                    TimeSpan _LogInTime = TimeSpan.MaxValue;
                    TimeSpan _LogOutTime = TimeSpan.MaxValue;
                    Double _LongestUnHoldTime = 0;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentConsolidatedEntity obj = ReportEntityLists[i];

                        string TotalLoggedInTime = "";//N/A
                        string AvailableTime = "";//N/A
                        string Occupancy = "";//N/A
                        string LogInTime = "";//N/A
                        string LogOutTime = "";
                        string AvgClerikalBusy = "00:00:00";
                        string AvgUnHold = "00:00:00";
                        string AvgACDBusy = "00:00:00";

                        if (obj.TotalLoggedInTime != 0)
                        {
                            AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                            TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                            _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                            _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                            _OccupancyCount++;
                        }
                        if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                        {
                            LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                            //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                            if (_LogInTime > obj.LogInTime)
                                _LogInTime = obj.LogInTime;
                        }

                        if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                        {
                            LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                            if (_LogOutTime > obj.LogOutTime)
                                _LogOutTime = obj.LogOutTime;
                        }

                        if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                        {
                            _LongestUnHoldTime = obj.LongestUnHoldTime;
                        }
                        if (obj.ClerikalBusyCount != 0)
                        {
                            AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                        }
                        if (obj.ACDBusyCount != 0)
                        {
                            AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                            _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                        }

                        if (obj.UnHoldCount != 0)
                        {
                            AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                            _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                        }
                        _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                        _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                        _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                        _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                        _TransferCount = _TransferCount + obj.TransferCount;
                        _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                        _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                        _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                        _HangUpCount = _HangUpCount + obj.HangUpCount;

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(LogInTime);
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime));
                        BodyCell = ws.Cell(Row, 5).SetValue(AvgClerikalBusy);
                        BodyCell = ws.Cell(Row, 6).SetValue(AvailableTime);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.ACDBusyCount.ToString());
                        BodyCell = ws.Cell(Row, 8).SetValue(AvgACDBusy);
                        BodyCell = ws.Cell(Row, 9).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                        BodyCell = ws.Cell(Row, 10).SetValue(obj.TransferCount.ToString());
                        BodyCell = ws.Cell(Row, 11).SetValue(AvgUnHold);
                        BodyCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime));
                        BodyCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime));
                        BodyCell = ws.Cell(Row, 14).SetValue(obj.OutBoundCallCount.ToString());
                        BodyCell = ws.Cell(Row, 15).SetValue(Occupancy);
                        BodyCell = ws.Cell(Row, 16).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime));
                        BodyCell = ws.Cell(Row, 17).SetValue(obj.HangUpCount.ToString());
                        BodyCell = ws.Cell(Row, 18).SetValue(LogOutTime);
                        BodyCell = ws.Cell(Row, 19).SetValue(TotalLoggedInTime);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            if (_LogInTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 2).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                FooterCell = ws.Cell(Row, 2).SetValue(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(_ACDBusyCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 10).SetValue(_TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 14).SetValue(_OutBoundCallCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 15).SetValue(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 16).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 17).SetValue(_HangUpCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            if (_LogOutTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 18).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                FooterCell = ws.Cell(Row, 18).SetValue(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            FooterCell = ws.Cell(Row, 19).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateGroupConsolidatedReportCSV(string ReportName, List<ReportGroupConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                List<List<ReportGroupConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                foreach (List<ReportGroupConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].StartDate + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Board Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Total Offered");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Total Answered");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Total ABND.");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("ABND. %");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Service Level");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Average FTE Available");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("Logged in Staff");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("AVG. Hold");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("Transferred Out");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("AVG. Wait Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("Longest Wait Answered");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("Longest Wait ABND.");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("AVG. Wait ABND.");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 15).SetValue("Internal Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 16).SetValue("Internal Handling Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 17).SetValue("AVG. Internal Call Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 18).SetValue("AVG. Calls Per Hour");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 19).SetValue("Transfers In");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;

                        string TotalCalls = "";
                        string TotalAnswered = "0";
                        string TotalAbanodoned = "0";
                        string AbandonedPer = "0";
                        string SLAPer = "0";
                        string AvgAvailableTime = "00:00:00";
                        string LoggedInCount = "0";
                        string AvgHold = "00:00:00";
                        string TransferACD = "0";
                        string AvgWaitTime = "00:00:00";
                        string LongestWaitAnswer = "00:00:00";
                        string LongestWaitAbandoned = "00:00:00";
                        string AvgWaitAbandonedTime = "00:00:00";
                        string TotalInternalCall = "0";
                        string TotalInternalTime = "00:00:00";
                        string AVGInternalTime = "00:00:00";
                        string AvgCallsHour = "0";
                        string TotalTransfersIn = "0";

                        ReportGroupConsolidatedEntity obj = ReportEntityLists[i];


                        if (obj.TotalCalls != "")
                        {
                            TotalCalls = obj.TotalCalls;
                        }
                        if (obj.TotalAnswered != "")
                        {
                            TotalAnswered = obj.TotalAnswered;
                        }
                        if (obj.TotalAbanodoned != "")
                        {
                            TotalAbanodoned = obj.TotalAbanodoned;
                        }
                        if (obj.AbandonedPer != "")
                        {
                            AbandonedPer = Math.Round(Convert.ToDouble(obj.AbandonedPer), 2).ToString();

                        }
                        if (obj.SLAPer != "")
                        {
                            SLAPer = Math.Round(Convert.ToDouble(obj.SLAPer), 2).ToString();

                        }
                        if (obj.AvgAvailableTime != "")
                        {
                            AvgAvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgAvailableTime) * 3600).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LoggedInCount != "")
                        {
                            LoggedInCount = obj.LoggedInCount;
                        }
                        if (obj.AvgHold != "")
                        {
                            AvgHold = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgHold)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.TransferACD != "")
                        {
                            TransferACD = obj.TransferACD;
                        }
                        if (obj.AvgWaitTime != "")
                        {
                            AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LongestWaitAnswer != "")
                        {
                            LongestWaitAnswer = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAnswer)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LongestWaitAbandoned != "")
                        {
                            LongestWaitAbandoned = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAbandoned)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AvgWaitAbandonedTime != "")
                        {
                            AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.TotalInternalCall != "")
                        {
                            TotalInternalCall = obj.TotalInternalCall;
                        }
                        if (obj.TotalInternalTime != "")
                        {
                            TotalInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalInternalTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AVGInternalTime != "")
                        {
                            AVGInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AVGInternalTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AvgCallsHour != "")
                        {
                            AvgCallsHour = Math.Round(Convert.ToDouble(obj.AvgCallsHour), 2).ToString();
                        }
                        if (obj.TotalTransfersIn != "")
                        {
                            TotalTransfersIn = obj.TotalTransfersIn;
                        }


                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(ReportsCommonMethods.GetHourFormat(obj.Title));
                        BodyCell = ws.Cell(Row, 2).SetValue(TotalCalls);
                        BodyCell = ws.Cell(Row, 3).SetValue(TotalAnswered);
                        BodyCell = ws.Cell(Row, 4).SetValue(TotalAbanodoned);
                        BodyCell = ws.Cell(Row, 5).SetValue(AbandonedPer);
                        BodyCell = ws.Cell(Row, 6).SetValue(SLAPer);
                        BodyCell = ws.Cell(Row, 7).SetValue(AvgAvailableTime);

                        BodyCell = ws.Cell(Row, 8).SetValue(LoggedInCount);
                        BodyCell = ws.Cell(Row, 9).SetValue(AvgHold);
                        BodyCell = ws.Cell(Row, 10).SetValue(TransferACD);
                        BodyCell = ws.Cell(Row, 11).SetValue(AvgWaitTime);
                        BodyCell = ws.Cell(Row, 12).SetValue(LongestWaitAnswer);
                        BodyCell = ws.Cell(Row, 13).SetValue(LongestWaitAbandoned);

                        BodyCell = ws.Cell(Row, 14).SetValue(AvgWaitAbandonedTime);
                        BodyCell = ws.Cell(Row, 15).SetValue(TotalInternalCall);
                        BodyCell = ws.Cell(Row, 16).SetValue(TotalInternalTime);
                        BodyCell = ws.Cell(Row, 17).SetValue(AVGInternalTime);
                        BodyCell = ws.Cell(Row, 18).SetValue(AvgCallsHour);
                        BodyCell = ws.Cell(Row, 19).SetValue(TotalTransfersIn);


                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateYBVCallsReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                Headercell = ws.Cell(Row, 1).SetValue("Date");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Midnight-9AM");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("9AM-5PM");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("5PM-Midnight");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("Transfer Count");
                Headercell.Style.Font.Bold = true;

                int TransferCount = 0;
                int FirstCount = 0;
                int SecondCount = 0;
                int ThirdCount = 0;
                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportYBVCallsEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Date);
                    BodyCell = ws.Cell(Row, 2).SetValue(obj.FirstCount);
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.SecondCount);
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.ThirdCount);
                    BodyCell = ws.Cell(Row, 5).SetValue(obj.TransferCount);

                    TransferCount += obj.TransferCount;
                    FirstCount += obj.FirstCount;
                    SecondCount += obj.SecondCount;
                    ThirdCount += obj.ThirdCount;

                }
                Row++;
                IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 2).SetValue(FirstCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 3).SetValue(SecondCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 4).SetValue(ThirdCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 5).SetValue(TransferCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");


                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateYBVCallsByIntervalReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo,int TimeInterval)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                .Select(y => new ReportYBVCallsEntity
                {
                    Date = y.First().Date,
                    TransferCount = y.Sum(d => d.TransferCount),
                }).ToList();

                List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                   
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("TransferCount");
                    Headercell.Style.Font.Bold = true;
                    


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportYBVCallsEntity obj = ReportEntityLists[i];

                        
                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey+"-"+ ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TransferCount.ToString());
                       
                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            
                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAHTCallsReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                Headercell = ws.Cell(Row, 1).SetValue("Date");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Midnight-9AM");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("9AM-5PM");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("5PM-Midnight");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("Transfer Count");
                Headercell.Style.Font.Bold = true;

                int TransferCount = 0;
                int FirstCount = 0;
                int SecondCount = 0;
                int ThirdCount = 0;
                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportYBVCallsEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Date);
                    BodyCell = ws.Cell(Row, 2).SetValue(obj.FirstCount);
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.SecondCount);
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.ThirdCount);
                    BodyCell = ws.Cell(Row, 5).SetValue(obj.TransferCount);

                    TransferCount += obj.TransferCount;
                    FirstCount += obj.FirstCount;
                    SecondCount += obj.SecondCount;
                    ThirdCount += obj.ThirdCount;

                }
                Row++;
                IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 2).SetValue(FirstCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 3).SetValue(SecondCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 4).SetValue(ThirdCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 5).SetValue(TransferCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");


                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAHTCallsByIntervalReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                .Select(y => new ReportYBVCallsEntity
                {
                    Date = y.First().Date,
                    TransferCount = y.Sum(d => d.TransferCount),
                }).ToList();

                List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("TransferCount");
                    Headercell.Style.Font.Bold = true;



                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportYBVCallsEntity obj = ReportEntityLists[i];


                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TransferCount.ToString());

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentConsolidatedBaordReportCSV(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {


                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ImageLocation = HttpContext.Current.Server.MapPath("~/Content/images//Logo2.png");
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(.09);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
                .Select(y => new ReportAgentConsolidatedEntity
                {
                    AgentName = y.First().AgentName,
                    GroupName = y.First().GroupName,
                    LogInTime = y.Min(c => c.LogInTime),
                    LogOutTime = y.Min(c => c.LogOutTime),
                    TotalLoggedInTime = y.Sum(c => c.TotalLoggedInTime),
                    ACDBusyTime = y.Sum(c => c.ACDBusyTime),
                    NonACDBusyTime = y.Sum(c => c.NonACDBusyTime),
                    ClerikalBusyTime = y.Sum(c => c.ClerikalBusyTime),
                    TempAbsTime = y.Sum(c => c.TempAbsTime),
                    UnHoldTime = y.Sum(c => c.UnHoldTime),
                    LongestUnHoldTime = y.Max(c => c.LongestUnHoldTime),
                    TotalIdleTime = y.Sum(c => c.TotalIdleTime),
                    ACDBusyCount = y.Sum(c => c.ACDBusyCount),
                    LoggedInCount = y.Sum(c => c.LoggedInCount),
                    LoggedOutCount = y.Sum(c => c.LoggedOutCount),
                    ClerikalBusyCount = y.Sum(c => c.ClerikalBusyCount),
                    TempAbsCount = y.Sum(c => c.TempAbsCount),
                    OutBoundCallCount = y.Sum(c => c.OutBoundCallCount),
                    TransferCount = y.Sum(c => c.TransferCount),
                    UnHoldCount = y.Sum(c => c.UnHoldCount),
                    HangUpCount = y.Sum(c => c.HangUpCount),


                }).ToList();
                List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();

                

                foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent: " + ReportEntityLists[0].AgentName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Board Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Logged In Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Temp. Absense Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Clerical Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("AVG. Clerical Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Available Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Total Calls Handled");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("AVG. Call Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("Total Calls Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("Calls Transferred");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("AVG. Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("Longest Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("Total Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("Calls Out");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 15).SetValue("Occupancy %");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 16).SetValue("Idle Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 17).SetValue("Short Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 18).SetValue("Logged Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 19).SetValue("Total Logged In Time");
                    Headercell.Style.Font.Bold = true;

                    Double _TempAbsTime = 0;
                    Double _ClerikalBusyTime = 0;
                    Double _AvailableTime = 0;
                    Double _TotalLoggedInTime = 0;
                    Double _ACDBusyCount = 0;
                    Double _ACDBusyTime = 0;
                    Double _TransferCount = 0;
                    Double _UnHoldTime = 0;
                    Double _OutBoundCallCount = 0;

                    Double _TotalIdleTime = 0;
                    Double _HangUpCount = 0;
                    Double _Occupancy = 0;
                    Double _OccupancyCount = 0;
                    Double _AvgACDBusy = 0;
                    Double _AvgUnHold = 0;
                    Double _AvgClerikalBusy = 0;
                    TimeSpan _LogInTime = TimeSpan.MaxValue;
                    TimeSpan _LogOutTime = TimeSpan.MaxValue;
                    Double _LongestUnHoldTime = 0;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;

                        ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                        string TotalLoggedInTime = "";//N/A
                        string AvailableTime = "";//N/A
                        string Occupancy = "";//N/A
                        string LogInTime = "";//N/A
                        string LogOutTime = "";
                        string AvgClerikalBusy = "00:00:00";
                        string AvgUnHold = "00:00:00";
                        string AvgACDBusy = "00:00:00";


                        if (obj.TotalLoggedInTime != 0)
                        {
                            //AvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime).ToString(@"hh\:mm\:ss");
                            AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                            //Occupancy = Math.Round((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / WorkingHours / 36, 2).ToString();
                            TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                            _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                            _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                            _OccupancyCount++;
                        }
                        if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                        {
                            LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                            //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                            if (_LogInTime > obj.LogInTime)
                                _LogInTime = obj.LogInTime;
                        }

                        if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                        {
                            LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                            if (_LogOutTime > obj.LogOutTime)
                                _LogOutTime = obj.LogOutTime;
                        }
                        if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                        {
                            _LongestUnHoldTime = obj.LongestUnHoldTime;
                        }
                        if (obj.ClerikalBusyCount != 0)
                        {
                            AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                            _AvgClerikalBusy = _AvgClerikalBusy + Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount);

                        }
                        if (obj.ACDBusyCount != 0)
                        {
                            AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                            _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                        }

                        if (obj.UnHoldCount != 0)
                        {
                            AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                            _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                        }
                        _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                        _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                        _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                        _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                        _TransferCount = _TransferCount + obj.TransferCount;
                        _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                        _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                        _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                        _HangUpCount = _HangUpCount + obj.HangUpCount;


                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(ReportsCommonMethods.GetHourFormat(obj.GroupName));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.LogInTime);
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime));
                        BodyCell = ws.Cell(Row, 5).SetValue(AvgClerikalBusy);
                        BodyCell = ws.Cell(Row, 6).SetValue(AvailableTime);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.ACDBusyCount.ToString());

                        BodyCell = ws.Cell(Row, 8).SetValue(AvgACDBusy);
                        BodyCell = ws.Cell(Row, 9).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                        BodyCell = ws.Cell(Row, 10).SetValue(obj.TransferCount.ToString());
                        BodyCell = ws.Cell(Row, 11).SetValue(AvgUnHold);
                        BodyCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime));
                        BodyCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime));

                        BodyCell = ws.Cell(Row, 14).SetValue(obj.OutBoundCallCount.ToString());
                        BodyCell = ws.Cell(Row, 15).SetValue(Occupancy);
                        BodyCell = ws.Cell(Row, 16).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime));
                        BodyCell = ws.Cell(Row, 17).SetValue(obj.HangUpCount.ToString());
                        BodyCell = ws.Cell(Row, 18).SetValue(LogOutTime);
                        BodyCell = ws.Cell(Row, 19).SetValue(TotalLoggedInTime);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            if (_LogInTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 2).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                FooterCell = ws.Cell(Row, 2).SetValue(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }

                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgClerikalBusy / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(_ACDBusyCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 10).SetValue(_TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 14).SetValue(_OutBoundCallCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 15).SetValue(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 16).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 17).SetValue(_HangUpCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            if (_LogOutTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 18).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                FooterCell = ws.Cell(Row, 18).SetValue(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            FooterCell = ws.Cell(Row, 19).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }


                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
       
    }
}