using System;
using System.Collections.Generic;
using System.Web.Services;
using System.Web.Script.Services;
using System.Threading;
using System.Globalization;
using vSuperMTClient.Entities;
using vSuperMTClient.DALs;
using LogApp;
using System.Web;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.IO;
using System.Linq;
using Secure;
using System.Configuration;
using System.Web.UI.DataVisualization.Charting;
using ClosedXML.Excel;
using System.Text;
using System.Windows.Forms.VisualStyles;

namespace vSuperMTClient
{
    public partial class ACDReports : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Session["User"] != null && Session["vSupervisorDB"] != null)
            {
                try
                {
                    if (!IsPostBack)
                    {
                        UsersEntity userProfileobj = (UsersEntity)Session["User"];
                        if (Session["SuperAdmin"] != null)
                        {
                        }
                        //else if (userProfileobj.userType != "Supervisor")
                        //{
                        //    Response.Redirect("Login.aspx");
                        //}
                        //else if (userProfileobj.Permissions.Find(x => x == 7) != 7)
                        //{
                        //    Response.Redirect("Login.aspx");
                        //}
                        //ReportsCommonMethods.GetAvailableLicenses();
                    }
                }
                catch (Exception ex)
                {
                    Log4Net.WriteException(ex);
                    return;
                }
            }
            else
            {
                Response.Redirect("~/Login.aspx");
            }
        }
        //1:Call Summary Report
        public static string GetCallsSummaryReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);

                List<ReportCallsSummaryEntity> ReportEntityList = new List<ReportCallsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetCallsSummaryReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallsSummaryReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallsSummaryReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        public static string GetCallsSummaryReport2(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);

                List<ReportCallsSummaryEntity> ReportEntityList = new List<ReportCallsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetCallsSummaryReport2(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallsSummaryReport2(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateCallsSummaryReportCSV2(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallsSummaryReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetDDIsSummaryReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {
                Log4Net.WriteLog("1 Processing Report:" + ReportName, LogType.GENERALLOG);
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);

                List<ReportDDIsSummaryEntity> ReportEntityList = new List<ReportDDIsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetDDIsSummaryReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    Log4Net.WriteLog("2 Processing Report:" + ReportName, LogType.GENERALLOG);
                    string FileName = GenerateDDIsSummaryReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    Log4Net.WriteLog("3 Processing Report:" + ReportName, LogType.GENERALLOG);
                    string FileName = GenerateDDIsSummaryReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    Log4Net.WriteLog("3 Processing Report:" + ReportName, LogType.GENERALLOG);
                    string FileName = GenerateDDIsSummaryReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetIVRDTMFReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);

                List<ReportIVRDtmfEntity> ReportEntityList = new List<ReportIVRDtmfEntity>();

                ReportEntityList = ReportsDALObj.GetIVRDTMFReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateIVRDTMFReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateIVRDTMFReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else 
                {
                    string FileName = GenerateIVRDTMFReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }

            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetBasicCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);

                List<ReportCallsSummaryEntity> ReportEntityList = new List<ReportCallsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetCallsSummaryReport2(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateBasicCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateBasicCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    //string FileName = GenerateBasicCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    //return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //2:All Calls Report
        public static string GetAllCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays, string Status)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();


                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAllCallsEntity> ReportEntityList = new List<ReportAllCallsEntity>();

                ReportEntityList = ReportsDALObj.GetAllCallsReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAllCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAllCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAllCallsReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetOutboundDetailReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays, string Status, string DialerType)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                //  string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                string vIVRMTClientDB = HttpContext.Current.Session["vIvrDB"].ToString();

                ReportsDAL ReportsDALObj = new ReportsDAL(vIVRMTClientDB);
                List<ReportOutboundSchedulerDetailEntity> ReportEntityList = new List<ReportOutboundSchedulerDetailEntity>();

                ReportEntityList = ReportsDALObj.GetOutboundDetailReport(FromDate, ToDate, timeFrom, timeTo, Status);
                List<ReportOutboundSchedulerDetailEntity> ReportEntityList2 = ReportEntityList.Where(y => y.DialerType == DialerType).ToList();
                if (ReportType == "PDF")
                {
                    string FileName = GenerateOutboundDetailReport(ReportName, ReportEntityList2, FromDate, ToDate, timeFrom, timeTo, DialerType);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateOutboundDetailReportCSV(ReportName, ReportEntityList2, FromDate, ToDate, timeFrom, timeTo, DialerType);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateOutboundDetailReportExcel(ReportName, ReportEntityList2, FromDate, ToDate, timeFrom, timeTo, DialerType);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }



        //3:Abandoned Calls Report
        public static string GetAbandonedCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAbandonedCallsEntity> ReportEntityList = new List<ReportAbandonedCallsEntity>();

                ReportEntityList = ReportsDALObj.GetAbandonedCallsReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAbandonedCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAbandonedCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAbandonedCallsReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //4:Call Breakdown by Hour
        public static string GetCallBreakdownByHourReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays, int TimeInterval)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportCallBreakdownByIntervalEntity> ReportEntityList = new List<ReportCallBreakdownByIntervalEntity>();

                ReportEntityList = ReportsDALObj.GetCallBreakdownByHourReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays, TimeInterval);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallBreakdownByHourReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else if (ReportType == "CSV")

                {
                    string FileName = GenerateCallBreakdownByHourReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallBreakdownByHourReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }

            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //5:Agent Availability Report
        public static string GetAgentAvailabilityReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentConsolidatedEntity> ReportEntityList = new List<ReportAgentConsolidatedEntity>();

                ReportEntityList = ReportsDALObj.GetAgentConsolidatedReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.AgentHangUpThreshold, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentAvailabilityReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {                   
                    string FileName = GenerateAgentAvailabilityReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentAvailabilityReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }



            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetAgentAvailabilityReport_(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentAvailabilityEntity> ReportEntityList = new List<ReportAgentAvailabilityEntity>();

                ReportEntityList = ReportsDALObj.GetAgentAvailabilityReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentAvailabilityReport_(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentAvailabilityReportCSV_(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentAvailabilityReportExcel_(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }



            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //6:Call Volume by Agent
        public static string GetCallVolumeByAgentReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentCallsCountEntity> ReportEntityList = new List<ReportAgentCallsCountEntity>();

                ReportEntityList = ReportsDALObj.GetCallVolumeByAgentReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallVolumeByAgentReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")

                {
                    string FileName = GenerateCallVolumeByAgentReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }

                else
                {
                    string FileName = GenerateCallVolumeByAgentReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //7:Agent Presence
        public static string GetAgentPresenceReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentPresenceEntity> ReportEntityList = new List<ReportAgentPresenceEntity>();

                ReportEntityList = ReportsDALObj.GetAgentPresenceReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentPresenceReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentPresenceReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentPresenceReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //8:Talk Time by Agent
        public static string GetTalkTimebyAgentReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentCallsSummaryEntity> ReportEntityList = new List<ReportAgentCallsSummaryEntity>();

                ReportEntityList = ReportsDALObj.GetTalkTimebyAgentReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateTalkTimebyAgentReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateTalkTimebyAgentReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateTalkTimebyAgentReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //9:Itemised Calls By Agent
        public static string GetItemisedCallsByAgentReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentCallsTakenEntity> ReportEntityList = new List<ReportAgentCallsTakenEntity>();

                ReportEntityList = ReportsDALObj.GetItemisedCallsByAgentReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateItemisedCallsByAgentReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateItemisedCallsByAgentReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateItemisedCallsByAgentReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //10:Agent Summary By Group
        public static string GetAgentSummaryByGroupReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            ///this is not currently in use
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportGroupAgentCallVolumeEntity> ReportEntityList = new List<ReportGroupAgentCallVolumeEntity>();

                ReportEntityList = ReportsDALObj.GetAgentSummaryByGroupReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentSummaryByGroupReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentSummaryByGroupReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //11:Agent Consolidated Report
        public static string GetAgentConsolidatedReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentConsolidatedEntity> ReportEntityList = new List<ReportAgentConsolidatedEntity>();

                ReportEntityList = ReportsDALObj.GetAgentConsolidatedReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.AgentHangUpThreshold, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentConsolidatedReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentConsolidatedReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }

                else
                {
                    string FileName = GenerateAgentConsolidatedReportExcel(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }

            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetAgentOverviewReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentOverviewEntity> ReportEntityList = new List<ReportAgentOverviewEntity>();

                ReportEntityList = ReportsDALObj.GetAgentOverviewReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.InternalLength, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentOverviewReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentOverviewReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentOverviewReportExcel(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }

            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetAgentOverviewSummaryReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentOverviewEntity> ReportEntityList = new List<ReportAgentOverviewEntity>();

                ReportEntityList = ReportsDALObj.GetAgentOverviewSummaryReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.InternalLength, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentOverviewSummaryReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentOverviewSummaryReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }

                else
                {
                    string FileName = GenerateAgentOverviewSummaryReportExcel(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetAgentConsolidatedSummaryReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentOverviewEntity> ReportEntityList = new List<ReportAgentOverviewEntity>();

                ReportEntityList = ReportsDALObj.GetAgentConsolidatedSummaryReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.InternalLength, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentConsolidatedSummaryReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentConsolidatedSummaryReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }

                else
                {
                    string FileName = GenerateAgentConsolidatedSummaryReportExcel(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetAgentUnavailbilityReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentUnavailbeEntity> ReportEntityList = new List<ReportAgentUnavailbeEntity>();
                System.Collections.Hashtable tablereason = SettingsDAL.GetUnavailableReasons();
                ReportEntityList = ReportsDALObj.GetAgentUnavailableReport(FromDate, ToDate, timeFrom, timeTo, Agents, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentUnavailableReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo, tablereason);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentUnavailableReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo, tablereason);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentUnavailableReportExcel(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo, tablereason);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        //12:Group Consolidated Report
        public static string GetGroupConsolidatedReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportGroupConsolidatedEntity> ReportEntityList = new List<ReportGroupConsolidatedEntity>();

                ReportEntityList = ReportsDALObj.GetGroupConsolidatedReport(FromDate, ToDate, timeFrom, timeTo, Groups, SettingsList.AgentWorkingHours, WeekDays);

                if (ReportType == "PDF")
                {
                    string FileName = GenerateGroupConsolidatedReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateGroupConsolidatedReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateGroupConsolidatedReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //47:Queue Analysis Report
        public static string GetQueueAnalysisReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportQueueAnalysisEntity> ReportEntityList = new List<ReportQueueAnalysisEntity>();

                ReportEntityList = ReportsDALObj.GetQueueAnalysisReport(FromDate, ToDate, timeFrom, timeTo, Groups, SettingsList.AgentWorkingHours, WeekDays);

                if (ReportType == "PDF")
                {
                    string FileName = GenerateQueueAnalysisReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateQueueAnalysisReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateQueueAnalysisReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string Get_DEKRA_QueueAnalysisReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportQueueAnalysisEntity> ReportEntityList = new List<ReportQueueAnalysisEntity>();

                ReportEntityList = ReportsDALObj.Get_DEKRA_QueueAnalysisReport(FromDate, ToDate, timeFrom, timeTo, Groups, SettingsList.AgentWorkingHours, WeekDays);

                if (ReportType == "PDF")
                {
                    string FileName = Generate_DEKRA_QueueAnalysisReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = Generate_DEKRA_QueueAnalysisReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = Generate_DEKRA_QueueAnalysisReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        //13:YBV Calls Report & OverflowCalls
        public static string GetOverflowCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportOverflowedCalls> ReportEntityList = new List<ReportOverflowedCalls>();

                ReportEntityList = ReportsDALObj.GetCallsoverflowedReport(FromDate, ToDate, timeFrom, timeTo, Groups, SettingsList.AgentWorkingHours, WeekDays);

                if (ReportType == "PDF")
                {
                    string FileName = GenerateOverflowedcallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateOverFlowedCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateOverFlowedCallsReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        public static string GetRoutingTreeReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<RoutingTreeReport> ReportEntityList = new List<RoutingTreeReport>();

                ReportEntityList = ReportsDALObj.GetCallsRoutingReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateRoutingCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateRoutingCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateRoutingCallsReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                    return FileName;


                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetYBVCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetYBVCallsReport(FromDate, ToDate, timeFrom, timeTo, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //32:YBV Calls Report
        public static string GetYBVCallsByIntervalReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays, int TimeInterval)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetYBVCallsByIntervalReport(FromDate, ToDate, timeFrom, timeTo, WeekDays, TimeInterval);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsByIntervalReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateYBVCallsByIntervalReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsByIntervalReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //41:Cut Off YBV Calls Report
        public static string GetYBVCutOffCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays, int TimeInterval)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCutOffCallsEntity> ReportEntityList = new List<ReportYBVCutOffCallsEntity>();
                ReportEntityList = ReportsDALObj.GetYBVCutOffCallsReport(FromDate, ToDate, timeFrom, timeTo, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCutOffCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCutOffCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //14:Consolidated Agent Board Report
        //this report also use the same procedure as AgentConsolidatedReport , we just "Group by Board" the data on application level
        public static string GetConsolidatedAgentBoardReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportAgentConsolidatedEntity> ReportEntityList = new List<ReportAgentConsolidatedEntity>();

                ReportEntityList = ReportsDALObj.GetAgentConsolidatedReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, SettingsList.AgentHangUpThreshold, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentConsolidatedBaordReport(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateAgentConsolidatedBaordReportCSV(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentConsolidatedBaordReportExcel(ReportName, ReportEntityList, FromDate, ToDate, SettingsList.AgentWorkingHours, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //33:AHT Calls Report

        public static string GetQueueOverViewReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays, string Groups)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<QueueviewReport> ReportEntityList = new List<QueueviewReport>();
                ReportEntityList = ReportsDALObj.GetQueueOverVReport(FromDate, ToDate, timeFrom, timeTo, WeekDays, SettingsList.AgentWorkingHours, Groups);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateQueueOverReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateQueueOverReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                 else 
                {
                    string FileName = GenerateQueueOverReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetAHTCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetAHTCallsReport(FromDate, ToDate, timeFrom, timeTo, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //34:AHT Calls Report
        public static string GetAHTCallsByIntervalReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays, int TimeInterval)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportYBVCallsEntity> ReportEntityList = new List<ReportYBVCallsEntity>();
                ReportEntityList = ReportsDALObj.GetAHTCallsByIntervalReport(FromDate, ToDate, timeFrom, timeTo, WeekDays, TimeInterval);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateYBVCallsByIntervalReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateYBVCallsByIntervalReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //35:External Routing Calls Report
        public static string GetExternalRoutingCallsReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays, string ExternalRouting)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportExternalRoutingCallsEntity> ReportEntityList = new List<ReportExternalRoutingCallsEntity>();
                ReportEntityList = ReportsDALObj.GetExternalRoutingCallsReport(FromDate, ToDate, timeFrom, timeTo, WeekDays, ExternalRouting);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateExternalRoutingCallsReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateExternalRoutingCallsReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //35-1:SLA Performance by Queue Report
        public static string GetSLAPerfromaceReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                SettingsDAL SettingssDALObj = new SettingsDAL(ClientDB);
                SettingsEntity SettingsList = SettingssDALObj.GetSettings();
                List<ReportSLAPerformance> ReportEntityList = new List<ReportSLAPerformance>();

                ReportEntityList = ReportsDALObj.GetSLAPerformanceReport(FromDate, ToDate, timeFrom, timeTo, Groups, SettingsList.AgentWorkingHours, WeekDays);

                if (ReportType == "PDF")
                {
                    string FileName = GenerateSLAReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateSLAReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }

                else
                {
                    string FileName = GenerateSLAReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }

            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        //36:External Routing Calls Report
        public static string GetExternalRoutingCallsByIntervalReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string WeekDays, int TimeInterval, string ExternalRouting)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportExternalRoutingCallsEntity> ReportEntityList = new List<ReportExternalRoutingCallsEntity>();
                ReportEntityList = ReportsDALObj.GetExternalRoutingCallsByIntervalReport(FromDate, ToDate, timeFrom, timeTo, WeekDays, TimeInterval, ExternalRouting);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateExternalRoutingCallsByIntervalReport(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else if (ReportType == "CSV")

                {
                    string FileName = GenerateExternalRoutingCallsByIntervalReportCSV(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateExternalRoutingCallsByIntervalReportExcel(ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, TimeInterval);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //39:Calls by Primary Reason Report
        public static string GetCallsbyPrimaryReasonReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportCallsbyPrimaryReasonEntity> ReportEntityList = new List<ReportCallsbyPrimaryReasonEntity>();

                string vAcdClientDB = HttpContext.Current.Session["vAcdDB"].ToString();
                SettingsDAL SettingsDALObj = new SettingsDAL(vAcdClientDB);
                bool SecondaryOutcomeEnable = SettingsDALObj.GetSecondaryOutcomeBit();
                ReportEntityList = ReportsDALObj.GetCallsbyPrimaryReasonReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallsbyPrimaryReasonReport(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateCallsbyPrimaryReasonReportCSV(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }

                else
                {
                    string FileName = GenerateCallsbyPrimaryReasonReportExcel(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }





            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //40:Call Breakdown by Primary Reason
        public static string GetCallBreakdownbyPrimaryReasonReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportCallBreakdownbyPrimaryReasonEntity> ReportEntityList = new List<ReportCallBreakdownbyPrimaryReasonEntity>();
                ReportEntityList = ReportsDALObj.GetCallBreakdownbyPrimaryReasonReport(FromDate, ToDate, timeFrom, timeTo, Groups, WeekDays);               

                string vAcdClientDB = HttpContext.Current.Session["vAcdDB"].ToString();
                SettingsDAL SettingsDALObj = new SettingsDAL(vAcdClientDB);
                bool SecondaryOutcomeEnable = SettingsDALObj.GetSecondaryOutcomeBit();
                List<csPrimaryOutcomeData> ListPrimaryOutComes = SettingsDAL.GetPrimaryOutcomes();

                if (ReportType == "PDF")
                {
                    string FileName = GenerateCallBreakdownbyPrimaryReasonReport(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo,ListPrimaryOutComes);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateCallBreakdownbyPrimaryReasonReportCSV(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, ListPrimaryOutComes);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateCallBreakdownbyPrimaryReasonReportExcel(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string Get_DEKRA_CallBreakdownbyPrimaryReasonReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportEntityList = new List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA>();
                ReportEntityList = ReportsDALObj.Get_DEKRA_CallBreakdownbyPrimaryReasonReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);

                string vAcdClientDB = HttpContext.Current.Session["vAcdDB"].ToString();
                SettingsDAL SettingsDALObj = new SettingsDAL(vAcdClientDB);
                bool SecondaryOutcomeEnable = SettingsDALObj.GetSecondaryOutcomeBit();
                List<csPrimaryOutcomeData> ListPrimaryOutComes = SettingsDAL.GetPrimaryOutcomes();
                if (ReportType == "PDF")
                {
                    string FileName = Generate_DEKRA_CallBreakdownbyPrimaryReasonReport(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, ListPrimaryOutComes);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = Generate_DEKRA_CallBreakdownbyPrimaryReasonReportCSV(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, ListPrimaryOutComes);
                    return FileName;
                }
                else
                {
                    string FileName = Generate_DEKRA_CallBreakdownbyPrimaryReasonReportExcel(SecondaryOutcomeEnable, ReportName, ReportEntityList, FromDate, ToDate, timeFrom, timeTo, ListPrimaryOutComes);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }


        // mazhar
        //43:Agent Scoring Report
        public static string GetAgentScoringReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                var ReportSettingParm = ReportsDALObj.GetAgentReportSettingParm();
                ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentScoringEntity> ReportEntityList = new List<ReportAgentScoringEntity>();

                ReportEntityList = ReportsDALObj.GetAgentScoringReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays, ReportSettingParm.AgentCallAnsweredInNSec, ReportSettingParm.AgentAvaliablityHours);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentScoringReport(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")

                {
                    string FileName = GenerateAgentScoringReportCSV(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentScoringReportExcel(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetAgentLeadReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                var ReportSettingParm = ReportsDALObj.GetAgentReportSettingParm();
                ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportAgentLeadEntity> ReportEntityList = new List<ReportAgentLeadEntity>();

                ReportEntityList = ReportsDALObj.GetAgentLeadReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays, ReportSettingParm.AgentCallAnsweredInNSec, ReportSettingParm.AgentAvaliablityHours);
                if (ReportType == "PDF")
                {
                    string FileName = GenerateAgentLeadReport(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")

                {
                    string FileName = GenerateAgentLeadReportCSV(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateAgentLeadReportExcel(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }


            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        // mazhar
        //44:Agent Scoring Report
        public static string GetSupervisorScoringReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                var ReportSettingParm = ReportsDALObj.GetSupervisorReportSettingParm();
                ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportSupervisorScoringEntity> ReportEntityList = new List<ReportSupervisorScoringEntity>();

                ReportEntityList = ReportsDALObj.GetSupervisorScoringReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays, ReportSettingParm.QCallAnsweredInNSec, ReportSettingParm.QWaitingTimeInNSec);

                if (ReportType == "PDF")
                {
                    string FileName = GenerateSupervisorScoringReport(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateSupervisorScoringReportCSV(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateSupervisorScoringReportExcel(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }



            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }

        public static string GetSupervisorLeadReport(string ReportType, string ReportName, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string Agents, string WeekDays)
        {
            try
            {
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                var ReportSettingParm = ReportsDALObj.GetSupervisorReportSettingParm();
                ReportsDALObj = new ReportsDAL(vBoardClientDB);
                List<ReportSupervisorScoringEntity> ReportEntityList = new List<ReportSupervisorScoringEntity>();

                ReportEntityList = ReportsDALObj.GetSupervisorScoringReport(FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays, ReportSettingParm.QCallAnsweredInNSec, ReportSettingParm.QWaitingTimeInNSec);

                if (ReportType == "PDF")
                {
                    string FileName = GenerateSupervisorScoringReport(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, timeFrom, timeTo);
                    return FileName;
                }
                else if (ReportType == "CSV")
                {
                    string FileName = GenerateSupervisorScoringReportCSV(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }
                else
                {
                    string FileName = GenerateSupervisorScoringReportExcel(ReportName, ReportEntityList, ReportSettingParm, FromDate, ToDate, 0, timeFrom, timeTo);
                    return FileName;
                }



            }
            catch (Exception ex)
            {
                LogApp.Log4Net.WriteException(ex);
            }
            return null;
        }
        //****************************************************************************//
        public static string GenerateQueueOverReport(string ReportName, List<QueueviewReport> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Graphtable = null;
                PdfPTable Datatable = null;
                document.Open();

                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();

                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";


                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    Graphtable = new PdfPTable(1);
                    Graphtable.TotalWidth = 820f;
                    Graphtable.LockedWidth = true;
                    Graphtable.SetWidths(new float[] { 1f });

                    Image pdfImage1 = Image.GetInstance(GraphQueueOverviewReport1(ReportEntityList).GetBuffer());
                    cell = ReportsCommonMethods.GraphImageCell(pdfImage1, 33.3f, PdfPCell.ALIGN_CENTER);
                    Graphtable.AddCell(cell);

                    document.Add(Graphtable);

                    Datatable = new PdfPTable(5);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 6f, 1f, 3f, 1f });
                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));
                    Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Missed Calls"));
                    Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                    document.Add(Datatable);

                    Datatable = new PdfPTable(9);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Queue Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Duration"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Avg. Call Duration"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Avg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Abandoned Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Avg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowRightCell("Total Calls"));
                    List<QueueviewReport> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                   .Select(y => new QueueviewReport
                   {
                       totalcalls = y.Sum(d => d.totalcalls),
                       AvgAnswer = y.Sum(d => d.AvgAnswer),
                       AvgMissedDuration = y.Sum(d => Convert.ToInt32(d.AvgMissedDuration)),
                       AvgResponseTime = y.Sum(d => d.AvgResponseTime),
                       TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                       TotalMissedCalls = y.Sum(d => d.TotalMissedCalls),
                       TotalAnswerDuration = y.Sum(d => d.TotalAnswerDuration),
                       TotalMissedDuration=y.Sum(d => (d.AvgMissedDuration*d.TotalMissedCalls)),
                       TotalResponseTime = y.Sum(d => (d.AvgResponseTime * d.TotalAnsweredCalls))
                   }).ToList();

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        QueueviewReport obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Title));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalAnswerDuration))));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.AvgAnswer))));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgResponseTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalMissedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgMissedDuration)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowRightCellBold(obj.totalcalls.ToString()));
                            ///Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.LostCalls.ToString()));

                            QueueviewReport obj1 = TempReportEntityGroupedList[0];

                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalAnswerDuration))));
                            if (obj1.TotalAnsweredCalls > 0)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalAnswerDuration / obj1.TotalAnsweredCalls))));
                            }
                            else
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(0)));

                            if (obj1.TotalAnsweredCalls > 0)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalResponseTime / obj1.TotalAnsweredCalls))));
                            }
                            else
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(0)));
                            //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgResponseTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalMissedCalls.ToString()));

                            if (obj1.TotalMissedCalls > 0)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalMissedDuration / obj1.TotalMissedCalls))));
                            }
                            else
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(0)));
                            //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgMissedDuration)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowRightCellBGColored(obj1.totalcalls.ToString()));
                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Title));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalAnswerDuration))));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.AvgAnswer))));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgResponseTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalMissedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgMissedDuration)));
                            Datatable.AddCell(ReportsCommonMethods.RowRightCellBold(obj.totalcalls.ToString()));
                        }
                    }
                    document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateQueueOverReportCSV(string ReportName, List<QueueviewReport> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {

            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {
                    var image = ws.AddPicture(ImageLocation);
                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                Headercell = ws.Cell(Row, 1).SetValue("Answered Calls");
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Alignment.Horizontal =XLAlignmentHorizontalValues.Center;
                ws.Range("A9:E9").Merge();
                
                Headercell = ws.Cell(Row, 6).SetValue("Missed Calls");
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Range("F9:H9").Merge();

                Row += 1;
                Headercell = ws.Cell(Row, 1).SetValue("Queue Name");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Total");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("Total Duration");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("Avg. Call Duration");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
             
                Headercell = ws.Cell(Row, 6).SetValue("Abandoned Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 7).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 8).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;


                List<QueueviewReport> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                   .Select(y => new QueueviewReport
                   {
                       totalcalls = y.Sum(d => d.totalcalls),
                       AvgAnswer = y.Sum(d => d.AvgAnswer),
                       AvgMissedDuration = y.Sum(d => Convert.ToInt32(d.AvgMissedDuration)),
                       AvgResponseTime = y.Sum(d => d.AvgResponseTime),
                       TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                       TotalMissedCalls = y.Sum(d => d.TotalMissedCalls),
                       TotalAnswerDuration = y.Sum(d => d.TotalAnswerDuration),
                       TotalMissedDuration = y.Sum(d => (d.AvgMissedDuration * d.TotalMissedCalls)),
                       TotalResponseTime = y.Sum(d => (d.AvgResponseTime * d.TotalAnsweredCalls))
                   }).ToList();

                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    QueueviewReport obj = ReportEntityList[i];

                    if (i == ReportEntityList.Count-1 )
                    {

                        Row++;

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Title);

                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalAnsweredCalls);
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalAnswerDuration)));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.AvgAnswer)));
                        BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgResponseTime));
                        BodyCell = ws.Cell(Row, 6).SetValue("");
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.TotalMissedCalls);
                        BodyCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgMissedDuration));
                        BodyCell = ws.Cell(Row, 8).SetValue(obj.totalcalls);

                        QueueviewReport obj1 = TempReportEntityGroupedList[0];
                        Row++;

                        BodyCell = ws.Cell(Row, 1).SetValue("Total");
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        BodyCell = ws.Cell(Row, 2).SetValue(obj1.TotalAnsweredCalls);
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalAnswerDuration)));
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                        if (obj1.TotalAnsweredCalls > 0)
                        {
                            BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalAnswerDuration / obj1.TotalAnsweredCalls)));
                            BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        }
                        else
                            BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(0));
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                        if (obj1.TotalAnsweredCalls > 0)
                        {
                            BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalResponseTime / obj1.TotalAnsweredCalls)));
                            BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        }
                        else
                            BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(0));
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgResponseTime)));

                        BodyCell = ws.Cell(Row, 6).SetValue(obj1.TotalMissedCalls);
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                        if (obj1.TotalMissedCalls > 0)
                        {
                            BodyCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj1.TotalMissedDuration / obj1.TotalMissedCalls)));
                            BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        }
                        else
                            BodyCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(0));
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgMissedDuration)));
                        BodyCell = ws.Cell(Row, 8).SetValue(obj1.totalcalls);
                        BodyCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    }
                    else
                    {
                        Row++;
                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Title);
                     
                BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalAnsweredCalls);

                BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalAnswerDuration)));
                BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.AvgAnswer)));
                BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgResponseTime));
              
                BodyCell = ws.Cell(Row, 6).SetValue(obj.TotalMissedCalls);
                BodyCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgMissedDuration));
                BodyCell = ws.Cell(Row, 8).SetValue(obj.totalcalls);
        
                    }
                }

                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }
        public static string GenerateQueueOverReportExcel(string ReportName, List<QueueviewReport> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {

            String separator = ",";
            StringBuilder output = new StringBuilder();

            String[] headings = { "Queue Name", "Total", "Total Duration", "Avg. Call Duration", "Avg. Wait Time", "Abandoned Calls", "Avg. Wait Time", "Total Calls" };
            output.AppendLine(string.Join(separator, headings));





            List<QueueviewReport> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                  .Select(y => new QueueviewReport
                  {
                      totalcalls = y.Sum(d => d.totalcalls),
                      AvgAnswer = y.Sum(d => d.AvgAnswer),
                      AvgMissedDuration = y.Sum(d => Convert.ToInt32(d.AvgMissedDuration)),
                      AvgResponseTime = y.Sum(d => d.AvgResponseTime),
                      TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                      TotalMissedCalls = y.Sum(d => d.TotalMissedCalls),
                      TotalAnswerDuration = y.Sum(d => d.TotalAnswerDuration),
                      TotalMissedDuration = y.Sum(d => (d.AvgMissedDuration * d.TotalMissedCalls)),
                      TotalResponseTime = y.Sum(d => (d.AvgResponseTime * d.TotalAnsweredCalls))
                  }).ToList();

            for (int i = 0; i < ReportEntityList.Count; i++)
            {
                QueueviewReport obj = ReportEntityList[i];         
                                  
            




           
                String[] newLine = { obj.Title, obj.TotalAnsweredCalls.ToString(), ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalAnswerDuration)), ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.AvgAnswer)), ReportsCommonMethods.GetTimeFromSeconds(obj.AvgResponseTime), obj.TotalMissedCalls.ToString(), ReportsCommonMethods.GetTimeFromSeconds(obj.AvgMissedDuration),obj.totalcalls.ToString() };
                output.AppendLine(string.Join(separator, newLine));
            }

            string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

            File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




            return FileName;
        }



        public static MemoryStream GraphQueueOverviewReport1(List<QueueviewReport> ReportEntityList)
        {

            Series s1 = new Series("Answered Calls");
            s1.ChartType = SeriesChartType.StackedBar;
            s1.IsValueShownAsLabel = true;

            s1.Font = new System.Drawing.Font("Calibri", 24f);
            s1.Color = System.Drawing.ColorTranslator.FromHtml("#ed1b24");
            s1.LabelForeColor = System.Drawing.Color.White;


            Series s2 = new Series("Missed Calls");
            s2.ChartType = SeriesChartType.StackedBar;
            s2.IsValueShownAsLabel = true;
            s2.Font = new System.Drawing.Font("Calibri", 24f);
            s2.Color = System.Drawing.ColorTranslator.FromHtml("#86878b"); ;
            s2.LabelForeColor = System.Drawing.Color.White;

            Chart c = new Chart();
            c.Width = 2500;
            c.Height = 1110;
            c.Series.Add(s2);
            c.Series.Add(s1);

            c.BackColor = System.Drawing.Color.White;

            ChartArea chartArea = new ChartArea();
            c.ChartAreas.Add(chartArea);
            c.Titles.Add("Queues Overview Calls");
            c.Titles[0].Font = new System.Drawing.Font("Calibri", 24f);
            c.Legends.Add(new Legend("Default") { Docking = Docking.Bottom, Alignment = System.Drawing.StringAlignment.Center, Font = new System.Drawing.Font("Calibri", 21f) });


            c.ChartAreas[0].AxisX.Title = "Queues";
            c.ChartAreas[0].AxisY.Title = "Calls";
            c.ChartAreas[0].AxisX.Interval = 1;
            c.ChartAreas[0].AxisY.LabelStyle.Font = new System.Drawing.Font("Calibri", 21f);
            c.ChartAreas[0].AxisX.LabelStyle.Font = new System.Drawing.Font("Calibri", 21f);
            c.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Calibri", 24f);
            c.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Calibri", 24f);
            // c.ChartAreas[0].AxisX.Maximum = 20;
            for (int i = 0; i < ReportEntityList.Count; i++)
            {
                if (i < 20)
                {
                    QueueviewReport obj = ReportEntityList[i];
                    if (obj.TotalAnsweredCalls <= 0)
                    {
                        obj.TotalAnsweredCalls = 0;
                    }
                    if (obj.TotalMissedCalls <= 0)
                    {
                        obj.TotalMissedCalls = 0;
                    }


                    c.Series["Answered Calls"].Points.AddXY(obj.Title, obj.TotalAnsweredCalls);
                    c.Series["Missed Calls"].Points.AddXY(obj.Title, obj.TotalMissedCalls);

                    if (obj.TotalAnsweredCalls <= 0)
                    {
                        c.Series["Answered Calls"].Points[i].Label = " ";
                    }
                    if (obj.TotalMissedCalls <= 0)
                    {
                        c.Series["Missed Calls"].Points[i].Label = " ";
                    }
                }
            }

            var ChartImage = new MemoryStream();
            c.SaveImage(ChartImage, ChartImageFormat.Bmp);
            return ChartImage;
        }
        public static string GenerateCallsSummaryReport(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);

                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                //.ToString(info.DateTimeFormat.ShortDatePattern)
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {


                    Datatable = new PdfPTable(7);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f, 1.5f, 1f, 1f, 1.5f, 1.5f });
                    Datatable.SpacingBefore = 15f;
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Queues"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls(%)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Avg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Longest Waiting"));

                    List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                     .Select(y => new ReportCallsSummaryEntity
                     {

                         TotalCalls = y.Sum(d => d.TotalCalls),
                         TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                         TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                         AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                         AVGWaitTime = y.Average(d => d.AVGWaitTime),
                         LongestWaitingTime = y.Max(d => d.LongestWaitingTime),

                     }).ToList();

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportCallsSummaryEntity obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));

                            ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime)));

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                        }
                    }
                    document.Add(Datatable);
                    document.Close();
                }
                else
                {
                    Datatable = new PdfPTable(1);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f });
                    Datatable.SpacingBefore = 15f;
                    Datatable.AddCell(ReportsCommonMethods.EmptyDataCell("No data found."));
                    document.Add(Datatable);
                    document.Close();
                }
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallsSummaryReport2(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                //.ToString(info.DateTimeFormat.ShortDatePattern)
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    ///////////////1
                    string IsYBV = "1";// ConfigurationManager.AppSettings["IsYBV"];
                    if (IsYBV == "0")
                    {
                        Datatable = new PdfPTable(10);
                    }
                    else
                    {
                        Datatable = new PdfPTable(11);
                    }

                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;

                    /////////////2
                    if (IsYBV == "0")
                    {
                        Datatable.SetWidths(new float[] { 3f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                    }
                    else
                    {
                        Datatable.SetWidths(new float[] { 3f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                    }

                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queues"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Transferred In"));

                    ////////////3
                    if (IsYBV != "0")
                    {
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed Out"));
                    }

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Answered Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. Calls(%)"));
                    // Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nAnswered Calls"));
                    // Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nABND. Calls"));
                    //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nABND. Calls(%)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Wait Time"));
                    // Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nAvg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Waiting"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Shortest Waiting"));
                   // Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Directed \nto Voicmail"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg Logged-In \nAgents"));
                    //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflow In \nLongest Waiting"));


                    List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                      .Select(y => new ReportCallsSummaryEntity
                      {

                          TotalCalls = y.Sum(d => d.TotalCalls),
                          TotalTransferredIn = y.Sum(d => d.TotalTransferredIn),
                          TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                          TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                          AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                          AVGWaitTime = y.Average(d => d.AVGWaitTime),
                          LongestWaitingTime = y.Max(d => d.LongestWaitingTime),
                          OverFlowInAnsweredCalls = y.Sum(d => d.OverFlowInAnsweredCalls),
                          OverFlowInAbndCalls = y.Sum(d => d.OverFlowInAbndCalls),
                          OverFlowInAbandonedCallsPercentage = y.Average(d => d.OverFlowInAbandonedCallsPercentage),
                          OverFlowInAVGWaitTime = y.Average(d => d.OverFlowInAVGWaitTime),
                          OverFlowInLongestWaitingTime = y.Max(d => d.OverFlowInLongestWaitingTime),
                          TotalYBVTansferredOut = y.Sum(d => d.TotalYBVTansferredOut),
                          // ShortestWaitingTime = y.Max(d => d.ShortestWaitingTime),
                          ShortestWaitingTime = y.Min(d => d.ShortestWaitingTime),
                          VoicemailCall = y.Sum(d => d.VoicemailCall),
                          CallDays = y.Sum(d => d.CallDays),
                          LoginAgent = y.Sum(d => d.LoginAgent),
                          LoginDate = y.Sum(d => d.LoginDate),

                      }).ToList();

                    double TotalLoginAgents = 0;
                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportCallsSummaryEntity obj = ReportEntityList[i];
                        if (obj.CallDays > 0)
                            TotalLoginAgents += (double)obj.LoginAgent / (double)obj.CallDays;
                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalTransferredIn.ToString()));
                            if (IsYBV != "0")
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalYBVTansferredOut.ToString()));
                            }
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            //  Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OverFlowInAnsweredCalls.ToString()));
                            //   Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OverFlowInAbndCalls.ToString()));
                            //  Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.OverFlowInAbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            // Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInAVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ShortestWaitingTime)));
                          //  Datatable.AddCell(ReportsCommonMethods.BottomRowCell("v"));
                            if (obj.CallDays > 0)
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round((double)obj.LoginAgent / (double)obj.CallDays).ToString()));
                            else
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell("0"));

                            ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalTransferredIn.ToString()));
                            if (IsYBV != "0")
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalYBVTansferredOut.ToString()));
                            }
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                            // Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.OverFlowInAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAbandonedCalls.ToString()));
                            // Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.OverFlowInAbndCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString()));
                            // Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(float.Parse(obj1.OverFlowInAbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime)));
                            //  Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.OverFlowInAVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.ShortestWaitingTime)));
                          //  Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored("v"));
                            if (obj1.CallDays > 0)
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(TotalLoginAgents).ToString()));
                            //  Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round((double)obj1.LoginAgent / (double)obj1.CallDays).ToString()));
                            else
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored("0"));
                            //  Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.OverFlowInLongestWaitingTime)));

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalTransferredIn.ToString()));
                            if (IsYBV != "0")
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalYBVTansferredOut.ToString()));
                            }
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                            //Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OverFlowInAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAbandonedCalls.ToString()));
                            // Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OverFlowInAbndCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            //   Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.OverFlowInAbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            //  Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInAVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ShortestWaitingTime)));
                          //  Datatable.AddCell(ReportsCommonMethods.RowCell("v"));
                            if (obj.CallDays > 0)
                                Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round((double)obj.LoginAgent / (double)obj.CallDays).ToString()));
                            else
                                Datatable.AddCell(ReportsCommonMethods.RowCell((0).ToString()));
                            //  Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.OverFlowInLongestWaitingTime)));
                        }
                    }
                    document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateDDIsSummaryReport(string ReportName, List<ReportDDIsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                Log4Net.WriteLog("3 Processing Report:" + ReportName, LogType.GENERALLOG);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    ///////////////1
                    // string IsYBV = ConfigurationManager.AppSettings["IsYBV"];

                    Datatable = new PdfPTable(4);


                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;



                    Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f });

                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Calls Received"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Calls Routed to a Queue"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Calls Answered by Agents"));


                    //List<ReportDDIsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                    // .Select(y => new ReportDDIsSummaryEntity
                    // {

                    //     TotalIVRCalls = y.Sum(d => d.TotalIVRCalls),
                    //     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                    //     TotalCallsInQueue = y.Sum(d => d.TotalCallsInQueue)

                    // }).ToList();

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportDDIsSummaryEntity obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TotalIVRCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TotalCallsInQueue.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TotalAnsweredCalls.ToString()));

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalIVRCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalCallsInQueue.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalAnsweredCalls.ToString()));
                        }
                    }
                    document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateDDIsSummaryReportCSV(string ReportName, List<ReportDDIsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {
                    var image = ws.AddPicture(ImageLocation);
                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                Headercell = ws.Cell(Row, 1).SetValue("Name");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Calls Received");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Calls Routed to a Queue");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Calls Answered by Agents");
                Headercell.Style.Font.Bold = true;
                List<ReportDDIsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                 .Select(y => new ReportDDIsSummaryEntity
                 {
                     TotalIVRCalls = y.Sum(d => d.TotalIVRCalls),
                     TotalCallsInQueue = y.Sum(d => d.TotalCallsInQueue),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls)
                 }).ToList();

                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportDDIsSummaryEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.BoardTitle);

                    BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalIVRCalls);
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalCallsInQueue);
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.TotalAnsweredCalls);

                    if (i == ReportEntityList.Count - 1)
                    {
                        Row++;
                        ReportDDIsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                        IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalIVRCalls);
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                        FooterCell = ws.Cell(Row, 3).SetValue(obj1.TotalCallsInQueue);
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                        FooterCell = ws.Cell(Row, 4).SetValue(obj1.TotalAnsweredCalls);
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                        Row++;
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateDDIsSummaryReportExcel(string ReportName, List<ReportDDIsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try

            { 

       

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Name", "Calls Received", "Calls Routed to a Queue", "Calls Answered by Agents" };
                output.AppendLine(string.Join(separator, headings));

                List<ReportDDIsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                 .Select(y => new ReportDDIsSummaryEntity
                 {
                     TotalIVRCalls = y.Sum(d => d.TotalIVRCalls),
                     TotalCallsInQueue = y.Sum(d => d.TotalCallsInQueue),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls)
                 }).ToList();



             


                for (int i = 0; i < ReportEntityList.Count; i++)
                {


                 



                   
                    ReportDDIsSummaryEntity obj = ReportEntityList[i];


                    String[] newLine = { obj.BoardTitle, obj.TotalIVRCalls.ToString(), obj.TotalCallsInQueue.ToString(), obj.TotalAnsweredCalls.ToString()};
                    output.AppendLine(string.Join(separator, newLine));


           

                }

            string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

            File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());


            return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }


      


        }

        public static string GenerateIVRDTMFReport(string ReportName, List<ReportIVRDtmfEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportIVRDtmfEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.BoardTitle })
               .Select(y => new ReportIVRDtmfEntity
               {
                   BoardTitle = y.First().BoardTitle,
                   TotalCalls = y.Sum(d => d.TotalCalls),

               }).ToList();


                    foreach (ReportIVRDtmfEntity ReportEntityLists in TempReportEntityGroupedList)
                    {
                        List<ReportIVRDtmfEntity> List2 = ReportEntityList.Where(x => x.BoardTitle == ReportEntityLists.BoardTitle).ToList();
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("DDI Name: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists.BoardTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Total Calls: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists.TotalCalls + "", FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 5f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);


                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 0f;
                        Datatable.SpacingAfter = 5f;


                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Node Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Option Selected"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Queue Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowRightCell("Total Calls"));

                        // Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Queue Name"));
                        //         Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Queue Number"));



                        foreach (ReportIVRDtmfEntity obj2 in List2)
                        {
                            //if (obj2.QueueName != null && obj2.QueueName.Trim().Length > 0)
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj2.NodeName + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj2.DTMF));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj2.QueueName));
                                Datatable.AddCell(ReportsCommonMethods.RowRightCell(obj2.TotalCalls + ""));
                                //          Datatable.AddCell(ReportsCommonMethods.RowCell(obj2.QueueNumber));
                            }

                        }
                        document.Add(Datatable);
                    }
                   // document.Add(Datatable);


                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateIVRDTMFReportCSV(string ReportName, List<ReportIVRDtmfEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                if (ReportEntityList.Count > 0)
                {
                    List<ReportIVRDtmfEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.BoardTitle })
               .Select(y => new ReportIVRDtmfEntity
               {
                   BoardTitle = y.First().BoardTitle,
                   TotalCalls = y.Sum(d => d.TotalCalls),

               }).ToList();



                    foreach (ReportIVRDtmfEntity ReportEntityLists in TempReportEntityGroupedList)
                    {
                        List<ReportIVRDtmfEntity> List2 = ReportEntityList.Where(x => x.BoardTitle == ReportEntityLists.BoardTitle).ToList();
                        Row++;
                        Headercell = ws.Cell(Row, 1).SetValue("DDI Name: " + ReportEntityLists.BoardTitle + " ");
                        Headercell.RichText.Substring(0, 5).Bold = true;
                        Headercell.Style.Font.FontSize = 13;
                        Headercell = ws.Cell(Row, 2).SetValue("Total Calls: " + ReportEntityLists.TotalCalls + " ");
                        Headercell.RichText.Substring(0, 5).Bold = true;
                        Headercell.Style.Font.FontSize = 13;
                        Row++;

                        Headercell = ws.Cell(Row, 1).SetValue("Node Name");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 2).SetValue("Option Selected");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 3).SetValue("Queue Name");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 4).SetValue("Total Calls");
                        Headercell.Style.Font.Bold = true;

                        foreach (ReportIVRDtmfEntity obj2 in List2)
                        {
                            //if (obj2.QueueName != null && obj2.QueueName.Trim().Length > 0)
                            {
                                Row++;

                                IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj2.NodeName);
                                BodyCell = ws.Cell(Row, 2).SetValue(obj2.DTMF);
                                BodyCell = ws.Cell(Row, 3).SetValue(obj2.QueueName);
                                //         BodyCell = ws.Cell(Row, 2).SetValue(obj2.QueueNumber);
                                BodyCell = ws.Cell(Row, 4).SetValue(obj2.TotalCalls);
                            }
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateIVRDTMFReportExcel(string ReportName, List<ReportIVRDtmfEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {


                String separator = ",";
                StringBuilder output = new StringBuilder();
                String[] headings = { "DDI Name", "Total Calls", "Node Name", "Option Selected", "Queue Name", "Total Calls" };
                output.AppendLine(string.Join(separator, headings));

                if (ReportEntityList.Count > 0)
                {
                    List<ReportIVRDtmfEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.BoardTitle })
               .Select(y => new ReportIVRDtmfEntity
               {
                   BoardTitle = y.First().BoardTitle,
                   TotalCalls = y.Sum(d => d.TotalCalls),

               }).ToList();

                  

                


                    foreach (ReportIVRDtmfEntity ReportEntityLists in TempReportEntityGroupedList)
                    {
                        List<ReportIVRDtmfEntity> List2 = ReportEntityList.Where(x => x.BoardTitle == ReportEntityLists.BoardTitle).ToList();
                     
                        foreach (ReportIVRDtmfEntity obj2 in List2)
                        {
                            
                            {
                                

                                String[] newLine = { ReportEntityLists.BoardTitle, ReportEntityLists.TotalCalls.ToString(), obj2.NodeName, obj2.DTMF, obj2.QueueName, obj2.QueueNumber, obj2.TotalCalls.ToString() };
                                output.AppendLine(string.Join(separator, newLine));

                            }
                        }
                    }
                }
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateBasicCallsReport(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    Datatable = new PdfPTable(7);

                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;

                    Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f });

                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queues"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls"));

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Answered Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. Calls(%)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Wait Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Waiting"));

                    List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                     .Select(y => new ReportCallsSummaryEntity
                     {

                         TotalCalls = y.Sum(d => d.TotalCalls),
                         TotalTransferredIn = y.Sum(d => d.TotalTransferredIn),
                         TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                         TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                         AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                         AVGWaitTime = y.Average(d => d.AVGWaitTime),
                         LongestWaitingTime = y.Max(d => d.LongestWaitingTime),
                         OverFlowInAnsweredCalls = y.Sum(d => d.OverFlowInAnsweredCalls),
                         OverFlowInAbndCalls = y.Sum(d => d.OverFlowInAbndCalls),
                         OverFlowInAbandonedCallsPercentage = y.Average(d => d.OverFlowInAbandonedCallsPercentage),
                         OverFlowInAVGWaitTime = y.Average(d => d.OverFlowInAVGWaitTime),
                         OverFlowInLongestWaitingTime = y.Max(d => d.OverFlowInLongestWaitingTime),
                         TotalYBVTansferredOut = y.Sum(d => d.TotalYBVTansferredOut),

                     }).ToList();

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportCallsSummaryEntity obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));

                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));

                            ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));

                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime)));

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.BoardTitle));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));

                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAbandonedCalls.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                        }
                    }
                    document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAllCallsReport(string ReportName, List<ReportAllCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";

                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();

                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                //phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToShortTimeString() + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportAllCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAllCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      CallCount = y.Count(),
                      TotalAgentDuration = y.Sum(d => d.TotalAgentDuration)


                  }).ToList();


                    List<List<ReportAllCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();
                    foreach (List<ReportAllCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths
                        SubSectionHeadertable.SpacingBefore = 0f;
                        SubSectionHeadertable.SpacingAfter = 0f;
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].BoardTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(6);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f,1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date & Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Waited in Queue"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Duration at Agent(s)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Callers Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Queue Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Status"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAllCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DateTime.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalAgentDuration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DDI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Status));

                                ReportAllCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total: " + obj1.CallCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.TotalAgentDuration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DateTime.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalAgentDuration)));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DDI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Status));
                            }
                        }
                        document.Add(Datatable);
                    }

                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateOutboundDetailReport(string ReportName, List<ReportOutboundSchedulerDetailEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string DialerType)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";

                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    //    List<ReportAllCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                    //  .Select(y => new ReportAllCallsEntity
                    //  {
                    //      BoardTitle = y.First().BoardTitle,
                    //      Duration = y.Sum(d => d.Duration),
                    //      CallCount = y.Count()


                    //  }).ToList();


                    //     List<List<ReportAllCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();
                    //     foreach (List<ReportAllCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    //     {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 535f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths
                    SubSectionHeadertable.SpacingBefore = 0f;
                    SubSectionHeadertable.SpacingAfter = 0f;
                    phrase = new Phrase();

                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 10f;
                    cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(6);
                    Datatable.TotalWidth = 535f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;

                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date & Time"));
                    if (DialerType == "Abandoned")
                    {
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Abandoned Queue"));
                    }
                    else if (DialerType == "Callback")
                    {
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Origin"));
                    }
                    else //(DialerType == "Contact")
                    {
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Schedule Name"));
                    }
                 
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Dialled Number"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent Ext"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Outcome"));
                    List<List<ReportOutboundSchedulerDetailEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.AttemptID).Select(y => y.ToList()).ToList();
                    foreach (List<ReportOutboundSchedulerDetailEntity> list1 in ReportEntityGroupedList)
                    {
                        if (list1.Count > 0)
                        {
                            var obj = list1[list1.Count - 1];
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DateTime));
                            if (DialerType == "Abandoned")
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AbandonedQueue));
                            }
                            else if (DialerType == "Callback")
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.ScheduleQueue));
                            }
                            else //(DialerType == "Contact")
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.ScheduleName));
                            }
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DialledNumber));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentNumber));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Status));
                        }
                    }
                    document.Add(Datatable);
                    // }

                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }



        public static string GenerateAbandonedCallsReport(string ReportName, List<ReportAbandonedCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;

                Headertable.AddCell(cell);

                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportAbandonedCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAbandonedCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      CallCount = y.Count()

                  }).ToList();


                    List<List<ReportAbandonedCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();
                    foreach (List<ReportAbandonedCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].BoardTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date & Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Waited in Queue"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Callers Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Queue Name"));

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAbandonedCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DateTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DDI));

                                ReportAbandonedCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total: " + obj1.CallCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));

                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DateTime));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DDI));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallBreakdownByHourReport(string ReportName, List<ReportCallBreakdownByIntervalEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<ReportCallBreakdownByIntervalEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle })
                     .Select(y => new ReportCallBreakdownByIntervalEntity
                     {
                         Date = y.First().Date,
                         BoardTitle = y.First().BoardTitle,
                         TotalCalls = y.Sum(d => d.TotalCalls),
                         TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                         TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                         AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                         LongestWaitingTime = y.Max(d => d.LongestWaitingTime),

                     }).ToList();

                    List<List<ReportCallBreakdownByIntervalEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportCallBreakdownByIntervalEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("     Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].BoardTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(6);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ABND. Calls(%)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Longest Waiting"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportCallBreakdownByIntervalEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAnsweredCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalAbandonedCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));

                                ReportCallBreakdownByIntervalEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle && x.Date == obj.Date);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAnsweredCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalAbandonedCalls.ToString()));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(obj1.AbandonedCallsPercentage).ToString()));
                                double AbandonedCallsPercentage = ((double)obj1.TotalAbandonedCalls / (double)obj1.TotalCalls * 100);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(Math.Round(AbandonedCallsPercentage, 2).ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime)));


                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAnsweredCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalAbandonedCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime)));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentAvailabilityReport(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
               .Select(y => new ReportAgentConsolidatedEntity
               {
                   AgentName = y.First().AgentName,
                   GroupName = y.First().GroupName,
                   TotalIdleTime = y.Sum(d => d.TotalIdleTime),
                   TotalLoggedInTime = y.Sum(d => d.TotalLoggedInTime),
                   TotalLoggedOutTime = y.Sum(d => d.TotalLoggedOutTime),
                   ACDBusyTime = y.Sum(d => d.ACDBusyTime),
                   NonACDBusyTime = y.Sum(d => d.NonACDBusyTime),
                   TempAbsTime = y.Sum(d => d.TempAbsTime),
                   LoggedInCount = y.Sum(d => d.LoggedInCount),
                   LoggedOutCount = y.Sum(d => d.LoggedOutCount),
                   TempAbsCount = y.Sum(d => d.TempAbsCount),

               }).ToList();                 


                    List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.GroupName }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                    {

                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(10);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1.1f, 1.3f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent Name"));
                        //Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Logged in Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Idle Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time Agent Logged In"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time Agent Logged out"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ACD Call Duration Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Non-ACD Call Duration Busy Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Time Absent"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("No. of Logins"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("No. of Logouts"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowRightCell("No. of Absences"));


                        double TotalIdleTime = 0;
                        double TotalLoggedInTime = 0;
                        double TotalLoggedOutTime = 0;
                        double ACDBusyTime = 0;
                        double NonACDBusyTime = 0;
                        double TempAbsTime = 0;
                        double LoggedInCount = 0;
                        double LoggedOutCount = 0;
                        double TempAbsCount = 0;


                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                            TotalIdleTime += obj.TotalIdleTime;
                            TotalLoggedInTime += obj.TotalLoggedInTime;
                            TotalLoggedOutTime += obj.TotalLoggedOutTime;
                            ACDBusyTime += obj.ACDBusyTime;
                            NonACDBusyTime += obj.NonACDBusyTime;
                            TempAbsTime += obj.TempAbsTime;
                            LoggedInCount += obj.LoggedInCount;
                            LoggedOutCount += obj.LoggedOutCount;
                            TempAbsCount += obj.TempAbsCount;
                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedOutTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TempAbsCount.ToString()));

                                //ReportAgentConsolidatedEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);                                
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(TotalIdleTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(TotalLoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(TotalLoggedOutTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(NonACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(TempAbsCount.ToString()));
                            }
                            else
                            {

                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedOutTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TempAbsCount.ToString()));
                            }
                        }

                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentAvailabilityReport_(string ReportName, List<ReportAgentAvailabilityEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {

                    List<ReportAgentAvailabilityEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                 .Select(y => new ReportAgentAvailabilityEntity
                 {
                     GroupName = y.First().GroupName,
                     LoggedInTime = y.Sum(d => d.LoggedInTime),
                     LoggedOutTime = y.Sum(d => d.LoggedOutTime),
                     ACDBusyTime = y.Sum(d => d.ACDBusyTime),
                     NonACDBusyTime = y.Sum(d => d.NonACDBusyTime),
                     TempAbsTime = y.Sum(d => d.TempAbsTime),
                     LoggedInCount = y.Sum(d => d.LoggedInCount),
                     LoggedOutCount = y.Sum(d => d.LoggedOutCount),
                     TempAbsCount = y.Sum(d => d.TempAbsCount),

                 }).ToList();

                    List<List<ReportAgentAvailabilityEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentAvailabilityEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        string IsOXO = ConfigurationManager.AppSettings["IsOXO"];

                        if (IsOXO == "0")
                        {
                            Datatable = new PdfPTable(9);
                        }
                        else
                        {
                            Datatable = new PdfPTable(10);
                        }
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;

                        if (IsOXO == "0")
                        {
                            Datatable.SetWidths(new float[] { 1f, 1f,1f, 1f, 1f, 1f, 1f, 1.1f, 1.3f });
                        }
                        else
                        {
                            Datatable.SetWidths(new float[] { 1f, 1f,1f, 1f, 1f, 1f, 1f, 1f, 1.1f, 1.3f });
                        }
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowLeftCell("Agent Name"));
                        //Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Logged in Time"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Idle Time"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Time Agent Logged In"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Time Agent Logged out"));


                        if (IsOXO == "0")
                        {
                            Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("CCD Busy"));
                            //Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Non ACD"));
                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("ACD Call Duration Time"));
                            Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Non-ACD Call Duration Busy Time"));
                        }

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Total Time Absent"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("No. of Logins"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("No. of Logouts"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("No. of Absences"));

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        if (IsOXO == "0")
                        {
                            Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Time"));
                            //Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Busy Time"));
                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                            Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        }

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));//Absences
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentAvailabilityEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedOutTime)));
                                if (IsOXO == "0")
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                    //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                }
                                else
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                }

                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TempAbsCount.ToString()));


                                ReportAgentAvailabilityEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedOutTime)));
                                if (IsOXO == "0")
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.ACDBusyTime)));
                                    //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.NonACDBusyTime)));
                                }
                                else
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.ACDBusyTime)));
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.NonACDBusyTime)));
                                }

                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TempAbsCount.ToString()));
                            }
                            else
                            {

                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedOutTime)));
                                if (IsOXO == "0")
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                    //Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                }
                                else
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                    Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime)));
                                }
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.LoggedInCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.LoggedOutCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TempAbsCount.ToString()));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        // mazhar --43

        public static string GenerateAgentScoringReport(string ReportName, List<ReportAgentScoringEntity> ReportEntityList, AgentScoringReportSettingParms reportSettingParms, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {

                    List<List<ReportAgentScoringEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Title, x.AgentName }).Select(y => y.ToList()).ToList();

                    int i = 0;
                    foreach (List<ReportAgentScoringEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                    {
                        i++;
                        SubSectionHeadertable = new PdfPTable(4);
                        SubSectionHeadertable.TotalWidth = 535.75f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 133.75f, 133.75f, 133.75f, 133.75f });//fixed widths
                        if (i == 1)
                        {
                            SubSectionHeadertable.SpacingBefore = 10f;
                        }
                        else
                        {
                            SubSectionHeadertable.SpacingBefore = 20f;
                        }

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityAgentScoreEntity[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.PaddingBottom = 5f;
                        SubSectionHeadertable.AddCell(cell);


                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityAgentScoreEntity[0].Title, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.PaddingBottom = 5f;
                        SubSectionHeadertable.AddCell(cell);

                        int Days_worked = ReportEntityAgentScoreEntity.Count;
                        int AgentAvaliblity_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AgentAvailabilityPercent) / Days_worked);
                        int AgentAvaliblityScore_overAll = (int)((AgentAvaliblity_overAll) * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                        int CallAnswerWithInNSec_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AnsweredWithInPercent) / Days_worked);
                        int CallAnswerWithInNSecScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                        int CallAccepted_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallAcceptedPercent) / Days_worked);
                        int CallAcceptedScore_overAll = (int)((CallAccepted_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                        // int CallAcceptedScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                        int total_score = AgentAvaliblityScore_overAll + CallAnswerWithInNSecScore_overAll + CallAcceptedScore_overAll;
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Score: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(total_score.ToString(), FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);

                        cell.PaddingBottom = 5f;
                        SubSectionHeadertable.AddCell(cell);

                        SubSectionHeadertable.AddCell(ReportsCommonMethods.PhraseCell(new Phrase(), PdfPCell.ALIGN_RIGHT));
                        document.Add(SubSectionHeadertable);


                        var Summary = new PdfPTable(1);
                        Summary.TotalWidth = 535f;
                        Summary.LockedWidth = true;
                        Summary.SetTotalWidth(new float[] { 535 });//fixed widths
                        Summary.SpacingBefore = 5f;
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Summary ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 5f;

                        Summary.AddCell(cell);
                        document.Add(Summary);
                        Datatable = new PdfPTable(6);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 60f, 90f, 100f, 100f, 85f, 90f });
                        //Datatable.SpacingBefore = 10f;

                        float paddingleft = 2f;
                        float paddingRight = 2f;
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Days Worked", 11f, Element.ALIGN_CENTER, paddingleft, paddingRight));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Agent Availability (Score)", 11f, Element.ALIGN_CENTER, 5, 5));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Answered by Agent within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)", 11f, Element.ALIGN_CENTER, 5, 5));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Calls Answered by Agent (Score)", 11f, Element.ALIGN_LEFT, 10, 10));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Avg. Calls Answered Daily", 11f, Element.ALIGN_CENTER, 12, 12));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Total Calls Answered", 11f, Element.ALIGN_RIGHT, 10, 10));

                        phrase = new Phrase();
                        phrase.Add(new Chunk(Days_worked.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;

                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk((int)AgentAvaliblity_overAll + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(AgentAvaliblityScore_overAll.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(CallAnswerWithInNSec_overAll + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(CallAnswerWithInNSecScore_overAll.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(CallAccepted_overAll + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(CallAcceptedScore_overAll.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        int AverageCalls = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsHandled) / Days_worked);
                        phrase = new Phrase();
                        phrase.Add(new Chunk(AverageCalls.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        int total_calls_received = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsServed));
                        phrase = new Phrase();
                        phrase.Add(new Chunk(total_calls_received.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        document.Add(Datatable);

                        var Breakdown = new PdfPTable(1);
                        Breakdown.TotalWidth = 535f;
                        Breakdown.LockedWidth = true;
                        Breakdown.SetTotalWidth(new float[] { 535 });//fixed widths
                        Breakdown.SpacingBefore = 10f;
                        Breakdown.SpacingAfter = 10f;
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Breakdown", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        Breakdown.AddCell(cell);
                        document.Add(Breakdown);

                        Datatable = new PdfPTable(6);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;

                        Datatable.SetWidths(new float[] { 60f, 90f, 100f, 100f, 85f, 90f });
                        ///Datatable.SpacingBefore = 5f;

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Date", 11f, Element.ALIGN_LEFT, paddingleft, paddingRight));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Daily Score", 11f, Element.ALIGN_CENTER, 0, 0));

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Agent Availability (Score)", 11f, Element.ALIGN_CENTER, 5, 5));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Answered within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)", 11f, Element.ALIGN_CENTER, 5, 5));

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Calls Answered by Agent (Score)", 11f, Element.ALIGN_CENTER, 10, 10));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold("Calls Answered", 11f, Element.ALIGN_CENTER, 0, 0));


                        foreach (var Record in ReportEntityAgentScoreEntity)
                        {

                            phrase = new Phrase();
                            phrase.Add(new Chunk(Record.StartTime.Substring(0, 10).Replace('-', '/'), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);


                            int daily_score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0) + Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0) + Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));

                            phrase = new Phrase();
                            phrase.Add(new Chunk(daily_score.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);




                            int agent_avaliblity_Score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                            phrase = new Phrase();
                            phrase.Add(new Chunk((int)Record.AgentAvailabilityPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            phrase.Add(new Chunk(agent_avaliblity_Score.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                            phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);

                            int Called_answered_score = (int)(Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                            phrase = new Phrase();
                            phrase.Add(new Chunk((int)Record.AnsweredWithInPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            phrase.Add(new Chunk(Called_answered_score.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                            phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);
                            int Accepted_Call_score = (int)(Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));

                            phrase = new Phrase();
                            phrase.Add(new Chunk((int)Record.CallAcceptedPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            phrase.Add(new Chunk(Accepted_Call_score.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                            phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);
                            
                            phrase = new Phrase();
                            phrase.Add(new Chunk(Record.CallsServed.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_CENTER);
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);
                        }


                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentLeadReport(string ReportName, List<ReportAgentLeadEntity> ReportEntityList, AgentScoringReportSettingParms reportSettingParms, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Graphtable = null;
                //PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    //SubSectionHeadertable.AddCell(ReportsCommonMethods.PhraseCell(new Phrase(), PdfPCell.ALIGN_RIGHT));
                    //document.Add(SubSectionHeadertable);


                    Graphtable = new PdfPTable(1);
                    Graphtable.TotalWidth = 820f;
                    Graphtable.LockedWidth = true;
                    Graphtable.SetWidths(new float[] { 1f });

                    Image pdfImage1 = Image.GetInstance(GraphAgentLeadReport(ReportEntityList, reportSettingParms).GetBuffer());
                    cell = ReportsCommonMethods.GraphImageCell(pdfImage1, 33.3f, PdfPCell.ALIGN_CENTER);
                    Graphtable.AddCell(cell);

                    document.Add(Graphtable);




                    var Summary = new PdfPTable(1);
                    Summary.TotalWidth = 782f;
                    Summary.LockedWidth = true;
                    Summary.SetTotalWidth(new float[] { 782 });//fixed widths
                    Summary.SpacingBefore = 5f;
                    phrase = new Phrase();
                    phrase.Add(new Chunk("League Table ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 5f;
                    cell.PaddingBottom = 5f;

                    Summary.AddCell(cell);
                    document.Add(Summary);

                    Datatable = new PdfPTable(8);
                    Datatable.TotalWidth = 782;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f });
                    //Datatable.SpacingBefore = 10f;

                    float paddingleft = 5f;
                    float paddingRight = 5f;
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Agent Name", 11f, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Overall Score", 11f,  paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Days Worked", 11f, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Agent Availability (Score)", 11f, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Answered by Agent within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)", 11f, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Calls Answered by Agent (Score)", 11f, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Avg. Calls Answered Daily", 11f, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Total Calls Answered", 11f, paddingleft, paddingRight));

                    List<List<ReportAgentLeadEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();

                    int i = 0;
                    foreach (List<ReportAgentLeadEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                    {
                        i++;                                       

                        int Days_worked = ReportEntityAgentScoreEntity.Count;
                        int AgentAvaliblity_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AgentAvailabilityPercent) / Days_worked);
                        int AgentAvaliblityScore_overAll = (int)((AgentAvaliblity_overAll) * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                        int CallAnswerWithInNSec_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AnsweredWithInPercent) / Days_worked);
                        int CallAnswerWithInNSecScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                        int CallAccepted_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallAcceptedPercent) / Days_worked);
                        int CallAcceptedScore_overAll = (int)((CallAccepted_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                        int total_score = AgentAvaliblityScore_overAll + CallAnswerWithInNSecScore_overAll + CallAcceptedScore_overAll;

                        phrase = new Phrase();
                        phrase.Add(new Chunk(ReportEntityAgentScoreEntity[0].AgentName, FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(Days_worked.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(total_score.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk((int)AgentAvaliblity_overAll + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(AgentAvaliblityScore_overAll.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(CallAnswerWithInNSec_overAll + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(CallAnswerWithInNSecScore_overAll.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(CallAccepted_overAll + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(CallAcceptedScore_overAll.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        int AverageCalls = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsHandled) / Days_worked);
                        phrase = new Phrase();
                        phrase.Add(new Chunk(AverageCalls.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                        int total_calls_received = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsServed));
                        phrase = new Phrase();
                        phrase.Add(new Chunk(total_calls_received.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingLeft = 5f;
                        cell.PaddingBottom = 0f;
                        Datatable.AddCell(cell);

                       // document.Add(Datatable);
                    }
                    document.Add(Datatable);
                    foreach (List<ReportAgentLeadEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                    {                        
                        var Breakdown = new PdfPTable(1);
                        Breakdown.TotalWidth = 782f;
                        Breakdown.LockedWidth = true;
                        Breakdown.SetTotalWidth(new float[] { 782 });//fixed widths
                        Breakdown.SpacingBefore = 10f;
                        Breakdown.SpacingAfter = 0f;
                        
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Daily Breakdown", FontFactory.GetFont("Arial", 12, Font.BOLD, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        Breakdown.AddCell(cell);
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Agent: " + ReportEntityAgentScoreEntity[0].AgentName, FontFactory.GetFont("Arial", 12, Font.BOLD, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 0f;
                        cell.PaddingBottom = 0f;
                        Breakdown.AddCell(cell);
                        document.Add(Breakdown);

                        Datatable = new PdfPTable(6);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;

                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f });
                        ///Datatable.SpacingBefore = 5f;

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Date", 11f, paddingleft, paddingRight));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Daily Score", 11f, paddingleft, paddingRight));

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Agent Availability (Score)", 11f, paddingleft, paddingRight));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Answered within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)", 11f, paddingleft, paddingRight));

                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Calls Accepted by Agent (Score)", 11f, paddingleft, paddingRight));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Calls Answered", 11f, paddingleft, paddingRight));


                        foreach (var Record in ReportEntityAgentScoreEntity)
                        {

                            phrase = new Phrase();
                            phrase.Add(new Chunk(Record.StartTime.Substring(0, 10).Replace('-', '/'), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                            cell.PaddingLeft = paddingleft;
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);


                            int daily_score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0) + Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0) + Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));

                            phrase = new Phrase();
                            phrase.Add(new Chunk(daily_score.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                            cell.PaddingLeft = paddingleft;
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);

                            int agent_avaliblity_Score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                            phrase = new Phrase();
                            phrase.Add(new Chunk((int)Record.AgentAvailabilityPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            phrase.Add(new Chunk(agent_avaliblity_Score.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                            phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                            cell.PaddingLeft = paddingleft;
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);

                            int Called_answered_score = (int)(Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                            phrase = new Phrase();
                            phrase.Add(new Chunk((int)Record.AnsweredWithInPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            phrase.Add(new Chunk(Called_answered_score.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                            phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                            cell.PaddingLeft = paddingleft;
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);
                            int Accepted_Call_score = (int)(Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));

                            phrase = new Phrase();
                            phrase.Add(new Chunk((int)Record.CallAcceptedPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            phrase.Add(new Chunk(Accepted_Call_score.ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                            phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                            cell.PaddingLeft = paddingleft;
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);

                            phrase = new Phrase();
                            phrase.Add(new Chunk(Record.CallsServed.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                            cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                            cell.PaddingLeft = paddingleft;
                            cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                            cell.PaddingTop = 5f;
                            cell.PaddingBottom = 0f;
                            Datatable.AddCell(cell);
                        }
                        document.Add(Datatable);

                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static MemoryStream GraphAgentLeadReport(List<ReportAgentLeadEntity> ReportEntityList, AgentScoringReportSettingParms reportSettingParms)
        {

            Series s1 = new Series("Score");
            s1.ChartType = SeriesChartType.StackedBar;
            s1.IsValueShownAsLabel = true;

            s1.Font = new System.Drawing.Font("Calibri", 24f);
            s1.Color = System.Drawing.ColorTranslator.FromHtml("#ed1b24");
            s1.LabelForeColor = System.Drawing.Color.White;




            Chart c = new Chart();
            c.Width = 2500;
            c.Height = 1110;
            c.Series.Add(s1);


            c.BackColor = System.Drawing.Color.White;

            ChartArea chartArea = new ChartArea();
            c.ChartAreas.Add(chartArea);
            c.Titles.Add("Agent Report - League Table");
            c.Titles[0].Font = new System.Drawing.Font("Calibri", 24f);
            c.Legends.Add(new Legend("Default") { Docking = Docking.Bottom, Alignment = System.Drawing.StringAlignment.Center, Font = new System.Drawing.Font("Calibri", 21f) });


            c.ChartAreas[0].AxisX.Title = "Agent";
            c.ChartAreas[0].AxisY.Title = "Score";
            c.ChartAreas[0].AxisX.Interval = 1;
            c.ChartAreas[0].AxisY.LabelStyle.Font = new System.Drawing.Font("Calibri", 21f);
            c.ChartAreas[0].AxisX.LabelStyle.Font = new System.Drawing.Font("Calibri", 21f);
            c.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Calibri", 24f);
            c.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Calibri", 24f);
            // c.ChartAreas[0].AxisX.Maximum = 20;



            List<List<ReportAgentLeadEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();

            int i = 0;
            foreach (List<ReportAgentLeadEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
            {
                i++;

                int Days_worked = ReportEntityAgentScoreEntity.Count;
                int AgentAvaliblity_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AgentAvailabilityPercent) / Days_worked);
                int AgentAvaliblityScore_overAll = (int)((AgentAvaliblity_overAll) * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                int CallAnswerWithInNSec_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AnsweredWithInPercent) / Days_worked);
                int CallAnswerWithInNSecScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                int CallAccepted_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallAcceptedPercent) / Days_worked);
                int CallAcceptedScore_overAll = (int)((CallAccepted_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                int total_score = AgentAvaliblityScore_overAll + CallAnswerWithInNSecScore_overAll + CallAcceptedScore_overAll;

            //    phrase = new Phrase();
            //    phrase.Add(new Chunk(ReportEntityAgentScoreEntity[0].AgentName, FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                c.Series["Score"].Points.AddXY(ReportEntityAgentScoreEntity[0].AgentName, total_score);

            }



         

            var ChartImage = new MemoryStream();
            c.SaveImage(ChartImage, ChartImageFormat.Bmp);
            return ChartImage;
        }

        public static string GenerateSupervisorScoringReport(string ReportName, List<ReportSupervisorScoringEntity> ReportEntityList, SupervisorScoringReportSettingParms ReportParm, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Graphtable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });

                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {












                    Graphtable = new PdfPTable(1);
                    Graphtable.TotalWidth = 820f;
                    Graphtable.LockedWidth = true;
                    Graphtable.SetWidths(new float[] { 1f });

                    Image pdfImage1 = Image.GetInstance(GraphSupervisorScoringReport(ReportEntityList,ReportParm).GetBuffer());
                    cell = ReportsCommonMethods.GraphImageCell(pdfImage1, 33.3f, PdfPCell.ALIGN_CENTER);
                    Graphtable.AddCell(cell);

                    document.Add(Graphtable);








                    var Summary = new PdfPTable(1);
                    Summary.TotalWidth = 782f;
                    Summary.LockedWidth = true;
                    Summary.SetTotalWidth(new float[] { 782 });//fixed widths
                    Summary.SpacingBefore = 5f;
                    phrase = new Phrase();
                    phrase.Add(new Chunk("League Table ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    cell.PaddingTop = 5f;
                    cell.PaddingBottom = 5f;

                    Summary.AddCell(cell);
                    document.Add(Summary);

                    Datatable = new PdfPTable(7);
                    Datatable.TotalWidth = 782f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f });


                    float paddingleft = 5f;
                    float paddingRight = 5f;
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Queue Name", 11, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Overall Score", 11, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Total Calls Received", 11, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Calls Answered (Score)", 11, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Answer within " + ReportParm.QCallAnsweredInNSec + " Seconds (Score)", 11, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Waited Less than " + ReportsCommonMethods.GetMinutesFromSeconds2(ReportParm.QWaitingTimeInNSec) + " Seconds (Score)", 11, paddingleft, paddingRight));
                    Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCellBold2("Avg. Calls Abandoned Daily.", 11, paddingleft, paddingRight));

                    foreach (ReportSupervisorScoringEntity ReportEntity in ReportEntityList)
                    {
                        phrase = new Phrase();
                        phrase.Add(new Chunk(ReportEntity.BoardTitle, FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 5f;
                        //cell.PaddingLeft = 30f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        var score = ReportEntity.AnsweredPercent * (ReportParm.QCallsAnsweredScore / 100.0) + ReportEntity.AnsweredWithInPercent * (ReportParm.QCallAnsweredInNSecScore / 100.0) + ReportEntity.WaitingWithInPercent * (ReportParm.QWaitingTimeScore / 100.0);
                        phrase.Add(new Chunk((int)score+"", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 5f;
                        //cell.PaddingLeft = 30f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(ReportEntity.TotalCalls.ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 5f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk((int)ReportEntity.AnsweredPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(((int)(ReportEntity.AnsweredPercent * (ReportParm.QCallsAnsweredScore / 100.0))).ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 5f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk((int)ReportEntity.AnsweredWithInPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(((int)(ReportEntity.AnsweredWithInPercent * (ReportParm.QCallAnsweredInNSecScore / 100.0))).ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 5f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk((int)ReportEntity.WaitingWithInPercent + "% (", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(((int)(ReportEntity.WaitingWithInPercent * (ReportParm.QWaitingTimeScore / 100.0))).ToString(), FontFactory.GetFont("Arial", 11, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(")", FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 5f;
                        Datatable.AddCell(cell);

                        phrase = new Phrase();
                        phrase.Add(new Chunk(((int)ReportEntity.AvgAbandoned).ToString(), FontFactory.GetFont("Arial", 11, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 5f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 5f;
                        Datatable.AddCell(cell);                       
                    }
                    document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static MemoryStream GraphSupervisorScoringReport(List<ReportSupervisorScoringEntity> ReportEntityList, SupervisorScoringReportSettingParms ReportParm)
        {

            Series s1 = new Series("Score");
            s1.ChartType = SeriesChartType.StackedBar;
            s1.IsValueShownAsLabel = true;

            s1.Font = new System.Drawing.Font("Calibri", 24f);
            s1.Color = System.Drawing.ColorTranslator.FromHtml("#ed1b24");
            s1.LabelForeColor = System.Drawing.Color.White;


           

            Chart c = new Chart();
            c.Width = 2500;
            c.Height = 1110;
            c.Series.Add(s1);
            

            c.BackColor = System.Drawing.Color.White;

            ChartArea chartArea = new ChartArea();
            c.ChartAreas.Add(chartArea);
            c.Titles.Add("Queue Report - League Table");
            c.Titles[0].Font = new System.Drawing.Font("Calibri", 24f);
            c.Legends.Add(new Legend("Default") { Docking = Docking.Bottom, Alignment = System.Drawing.StringAlignment.Center, Font = new System.Drawing.Font("Calibri", 21f) });


            c.ChartAreas[0].AxisX.Title = "Queues";
            c.ChartAreas[0].AxisY.Title = "Score";
            c.ChartAreas[0].AxisX.Interval = 1;
            c.ChartAreas[0].AxisY.LabelStyle.Font = new System.Drawing.Font("Calibri", 21f);
            c.ChartAreas[0].AxisX.LabelStyle.Font = new System.Drawing.Font("Calibri", 21f);
            c.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Calibri", 24f);
            c.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Calibri", 24f);
            // c.ChartAreas[0].AxisX.Maximum = 20;
            for (int i = 0; i < ReportEntityList.Count; i++)
            {
                if (i < 20)
                {
                    ReportSupervisorScoringEntity obj = ReportEntityList[i];
                    //if (obj.TotalAnsweredCalls <= 0)
                    //{
                    //    obj.TotalAnsweredCalls = 0;
                    //}
                    //if (obj.TotalMissedCalls <= 0)
                    //{
                    //    obj.TotalMissedCalls = 0;
                    //}

                    var score = obj.AnsweredPercent * (ReportParm.QCallsAnsweredScore / 100.0) + obj.AnsweredWithInPercent * (ReportParm.QCallAnsweredInNSecScore / 100.0) + obj.WaitingWithInPercent * (ReportParm.QWaitingTimeScore / 100.0);
                    c.Series["Score"].Points.AddXY(obj.BoardTitle,(int) score);
                    //c.Series["Missed Calls"].Points.AddXY(obj.Title, obj.TotalMissedCalls);

                    //if (obj.TotalAnsweredCalls <= 0)
                    //{
                    //    c.Series["Answered Calls"].Points[i].Label = " ";
                    //}
                    //if (obj.TotalMissedCalls <= 0)
                    //{
                    //    c.Series["Missed Calls"].Points[i].Label = " ";
                    //}
                }
            }

            var ChartImage = new MemoryStream();
            c.SaveImage(ChartImage, ChartImageFormat.Bmp);
            return ChartImage;
        }
        public static string GenerateCallVolumeByAgentReport(string ReportName, List<ReportAgentCallsCountEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentCallsCountEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.GroupName }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentCallsCountEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(3);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;
                        Datatable.DefaultCell.Border = Rectangle.BOTTOM_BORDER;
                        Datatable.DefaultCell.PaddingTop = 10f;
                        Datatable.DefaultCell.PaddingBottom = 10f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Hour"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));


                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentCallsCountEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetHourFormat(obj.Hour)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetHourFormat(obj.Hour)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentPresenceReport(string ReportName, List<ReportAgentPresenceEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentPresenceEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentPresenceEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 420f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(2);
                        Datatable.TotalWidth = 420f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f });
                        Datatable.SpacingBefore = 15f;
                        Datatable.DefaultCell.Border = Rectangle.BOTTOM_BORDER;
                        Datatable.DefaultCell.PaddingTop = 10f;
                        Datatable.DefaultCell.PaddingBottom = 10f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Status"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date & Time"));



                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentPresenceEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Action));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.StartTime));


                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Action));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.StartTime));


                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateTalkTimebyAgentReport(string ReportName, List<ReportAgentCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                .Select(y => new ReportAgentCallsSummaryEntity
                {
                    GroupName = y.First().GroupName,
                    TotalCalls = y.Sum(d => d.TotalCalls),
                    TotalTalkTime = y.Sum(d => d.TotalTalkTime),
                    AvgTalkTime = y.Average(d => d.AvgTalkTime),
                }).ToList();

                    List<List<ReportAgentCallsSummaryEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentCallsSummaryEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;


                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Answered Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Talk Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Avg Talk Time"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentCallsSummaryEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalTalkTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgTalkTime)));

                                ReportAgentCallsSummaryEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.TotalTalkTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgTalkTime)));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalTalkTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgTalkTime)));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateItemisedCallsByAgentReport(string ReportName, List<ReportAgentCallsTakenEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentCallsTakenEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
               .Select(y => new ReportAgentCallsTakenEntity
               {
                   GroupName = y.First().GroupName,
                   AgentName = y.First().AgentName,
                   Duration = y.Sum(d => d.Duration),

               }).ToList();

                    List<List<ReportAgentCallsTakenEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportAgentCallsTakenEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(5);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;



              //          Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Call Type"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Extension"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Callers Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Waited in Queue"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Call Duration"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Date/Time"));
                        double QueueDuration = 0;
                        double Duration = 0;
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportAgentCallsTakenEntity obj = ReportEntityLists[i];
                            QueueDuration += obj.QueueDuration;
                            Duration += obj.Duration;
                            if (i == ReportEntityLists.Count - 1)
                            {

                      //          Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.CallType));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.Extension));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.QueueDuration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.StartTime));

                              // ReportAgentCallsTakenEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName && x.AgentName == obj.AgentName);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(QueueDuration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                            }
                            else
                            {

                           //     Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.CallType));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.Extension));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.QueueDuration)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.StartTime));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentSummaryByGroupReport(string ReportName, List<ReportGroupAgentCallVolumeEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                ///this is not currently in use
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportGroupAgentCallVolumeEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.DateOnly, x.Title }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportGroupAgentCallVolumeEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].DateOnly, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Board: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Title, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(7);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;


                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowLeftCell("Hour"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Agents Logged in"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Call Count"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents on"));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents on "));
                        Datatable.AddCell(ReportsCommonMethods.FirstHeaderRowCell("Avg Agents Set"));

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(""));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Logged in"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("ACD Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Non-ACD Calls "));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("as Busy"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportGroupAgentCallVolumeEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetHourFormat(obj.HourOnly)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AgentLoggedCount));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.CallsCount));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGLogIn));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGCallBusy));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGNonCallBusy));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.AVGBusy));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetHourFormat(obj.HourOnly)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AgentLoggedCount));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.CallsCount));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGLogIn));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGCallBusy));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGNonCallBusy));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.AVGBusy));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentConsolidatedReport(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {
                // ReportName = ReportName;
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupName }).Select(y => y.ToList()).ToList();


                    foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].EventDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(19);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 0.5f, 1f, 1f, 1f, 0.5f, 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;



                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged In\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Time\n Unavailable"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Wrap-up\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Wrap-up\n Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Available\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nHandled"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ACD Call\nnot accepted"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Call\nTalk Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nTalk Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Transferred"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Hold\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Hold\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Hold\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Out"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Occupancy %"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Idle Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nNot Accepted"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged Out\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Logged\nIn Time"));

                        Double _TempAbsTime = 0;
                        Double _ClerikalBusyTime = 0;
                        Double _AvailableTime = 0;
                        Double _TotalLoggedInTime = 0;
                        Double _ACDBusyCount = 0;
                        Double _ACDBusyTime = 0;
                        Double _TransferCount = 0;
                        Double _UnHoldTime = 0;
                        Double _OutBoundCallCount = 0;

                        Double _TotalIdleTime = 0;
                        Double _AvgClerikalBusy = 0;
                        Double _HangUpCount = 0;
                        Double _Occupancy = 0;
                        Double _OccupancyCount = 0;
                        Double _AvgACDBusy = 0;
                        Double _AvgUnHold = 0;
                        Double _ACDCallnotaccept = 0;
                        TimeSpan _LogInTime = TimeSpan.MaxValue;
                        TimeSpan _LogOutTime = TimeSpan.MaxValue;
                        Double _LongestUnHoldTime = 0;


                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {

                            ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                            string TotalLoggedInTime = "";//N/A
                            string AvailableTime = "";//N/A
                            string Occupancy = "";//N/A
                            string LogInTime = "";//N/A
                            string LogOutTime = "";
                            string AvgClerikalBusy = "00:00:00";
                            string AvgUnHold = "00:00:00";
                            string AvgACDBusy = "00:00:00";


                            if (obj.TotalLoggedInTime != 0)
                            {
                                AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                                Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                                TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                                _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                                _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                                _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                                _OccupancyCount++;
                            }
                            if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                            {
                                LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                                //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                                if (_LogInTime > obj.LogInTime)
                                    _LogInTime = obj.LogInTime;
                            }

                            if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                            {
                                LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                                if (_LogOutTime > obj.LogOutTime)
                                    _LogOutTime = obj.LogOutTime;
                            }

                            if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                            {
                                _LongestUnHoldTime = obj.LongestUnHoldTime;
                            }
                            if (obj.ClerikalBusyCount != 0)
                            {
                                AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                                _AvgClerikalBusy = _AvgClerikalBusy + Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount);
                            }
                            if (obj.ACDBusyCount != 0)
                            {
                                AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                                _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                            }

                            if (obj.UnHoldCount != 0)
                            {
                                AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                                _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                            }
                            _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                            _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                            _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                            _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                            _TransferCount = _TransferCount + obj.TransferCount;
                            _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                            _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                            _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                            _HangUpCount = _HangUpCount + obj.HangUpCount;
                            _ACDCallnotaccept = _ACDCallnotaccept + obj.ACDCallnotaccept;
                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogInTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgClerikalBusy));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvailableTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDBusyCount.ToString()));
                                // Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDCallnotaccept.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgACDBusy));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgUnHold));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OutBoundCallCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Occupancy));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ClerikalBusyTime.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDCallnotaccept.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogOutTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalLoggedInTime));


                                //Combined Totals 
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                if (_LogInTime == TimeSpan.MaxValue)
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                }
                                else
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss")));
                                }
                                // table.AddCell(BottomRowCell(!_LogInTime.HasValue ? "" : _LogInTime.Value.ToString("HH:mm:ss")));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgClerikalBusy / ReportEntityLists.Count)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDBusyCount.ToString()));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDCallnotaccept.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_TransferCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OutBoundCallCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDCallnotaccept.ToString()));
                                if (_LogOutTime == TimeSpan.MaxValue)
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                }
                                else
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss")));
                                }
                                //table.AddCell(ReportsCommonMethods.BottomRowCell(!_LogOutTime.HasValue ? "" : _LogOutTime.Value.ToString("HH:mm:ss")));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime)));

                            }
                            else
                            {

                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(LogInTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgClerikalBusy));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvailableTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDBusyCount.ToString()));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDCallnotaccept.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgACDBusy));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgUnHold));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OutBoundCallCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(Occupancy));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ClerikalBusyTime.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDCallnotaccept.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(LogOutTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(TotalLoggedInTime));

                            }
                        }

                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentOverviewReport(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {
                //   ReportName = "Consolidated Agent Report";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentOverviewEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupTitle }).Select(y => y.ToList()).ToList();


                    foreach (List<ReportAgentOverviewEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].EventDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].GroupTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(18);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;



                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ACD Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg ACD Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg ACW Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg Hold Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Ext In Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Ext Out Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Ext Out Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("External\nExt Out Calls"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("External\nExt Out Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 2\n(Outbound)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 3\n(Assist on Call)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 1\n(Toilet)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 4\n(Break)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUXOUT Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nNot Accepted"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Agent Ring\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Staffed Time"));

                        int _ACDCalls = 0;
                        Double _ACDTime = 0;
                        string ACDTime = "00:00:00";
                        int _ACW = 0;
                        Double _ACWTime = 0;
                        string ACWTime = "00:00:00";

                        Double _HoldTime = 0;
                        string HoldTime = "00:00:00";

                        int _ExtinCalls = 0;
                        Double _EXTInTime = 0;
                        string EXTInTime = "00:00:00";

                        Double _EXTInHoldTime = 0;
                        int _ExtOutCalls = 0;
                        Double _ExtOutTime = 0;
                        string ExtoutTime = "00:00:00";
                        Double _ExtOutHoldTime = 0;
                        int _ExternalExtCalls = 0;
                        Double _ExternalExtTime = 0;
                        string ExternalExtoutTime = "00:00:00";
                        Double _ExternalExtHoldTime = 0;
                        Double _Aux1 = 0;
                        string AUX1 = "00:00:00";
                        Double _Aux2 = 0;
                        string AUX2 = "00:00:00";
                        Double _Aux3 = 0;
                        string AUX3 = "00:00:00";
                        Double _Aux4 = 0;
                        string AUX4 = "00:00:00";
                        int _CallsNotAccepted = 0;
                        Double _AgentRingTime = 0;
                        string AgentRingTime = "00:00:00";
                        Double _StaffedTime = 0;
                        string StaffedTime = "00:00:00";


                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {

                            ReportAgentOverviewEntity obj = ReportEntityLists[i];
                            _ACDCalls += obj.ACDBusyCount;
                            _ACDTime += obj.ACDBusyTime;//
                            if (obj.ACDBusyCount > 0)
                                ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                            else
                                ACDTime = "00:00:00";

                            _ACW += obj.ACWCount;
                            _ACWTime += obj.ACWTime;
                            if (obj.ACWCount > 0)
                                ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACWTime) / obj.ACWCount);
                            else
                                ACWTime = "00:00:00";

                            _HoldTime += obj.UnHoldTime;
                            if (obj.ACDBusyCount > 0)
                                HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                            else
                                HoldTime = "00:00:00";

                            _ExtinCalls += obj.ExtInCalls;
                            _EXTInTime += obj.ExtInCallsTime;
                            EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                            _EXTInHoldTime += obj.ExtInCallsHoldTime;

                            _ExtOutCalls = obj.ExtOutCalls;
                            _ExtOutTime += obj.ExternalExtOutCallsTime;
                            ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                            _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                            _ExternalExtCalls += obj.ExternalExtOutCalls;
                            _ExternalExtTime += obj.ExternalExtOutCallsTime;
                            ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                            _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                            _Aux1 += obj.AUX1Time;
                            AUX1 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX1Time);
                            _Aux2 += obj.AUX2Time;
                            AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                            _Aux3 += obj.AUX3Time;
                            AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                            _Aux4 += obj.AUX4Time;
                            AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                            _CallsNotAccepted += obj.ACDnotacceptCount;
                            _AgentRingTime += obj.ACDRingTime;
                            AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                            _StaffedTime += obj.TotalLoggedInTime;
                            StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);

                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDBusyCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACDTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACWTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(HoldTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExtInCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExtOutCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ExtoutTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExternalExtOutCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ExternalExtoutTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX2));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX3));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX1));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX4));

                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDnotacceptCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AgentRingTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(StaffedTime));


                                //Combined Totals 
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDCalls + ""));
                                string avg = "00:00:00";
                                if (_ACDCalls > 0)
                                    avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime / _ACDCalls);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(avg));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ACWTime)));
                                avg = "00:00:00";
                                if (_ACDCalls > 0)
                                    avg = ReportsCommonMethods.GetTimeFromSeconds(_HoldTime / _ACDCalls);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(avg));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExtinCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExtOutCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExtOutTime + _ExtOutHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExternalExtCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime + _ExternalExtHoldTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux2)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux3)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux1)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux4)));

                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_CallsNotAccepted + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AgentRingTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_StaffedTime)));

                            }
                            else
                            {

                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDBusyCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ACDTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ACWTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(HoldTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExtInCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExtOutCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ExtoutTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExternalExtOutCalls + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ExternalExtoutTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AUX2));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AUX3));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AUX1));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AUX4));

                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDnotacceptCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AgentRingTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(StaffedTime));

                            }
                        }

                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentOverviewSummaryReport(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {
                //   ReportName = "Consolidated Agent Report";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    // List<List<ReportAgentOverviewEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupTitle }).Select(y => y.ToList()).ToList();


                    //foreach (List<ReportAgentOverviewEntity> ReportEntityLists in ReportEntityList)
                    // {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 782f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                    //phrase = new Phrase();
                    //phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    //phrase.Add(new Chunk(ReportEntityLists[0].EventDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    //phrase.Add(new Chunk("      Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    //phrase.Add(new Chunk(ReportEntityLists[0].GroupTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    //cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    //cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    //cell.PaddingTop = 10f;
                    //cell.PaddingBottom = 0f;
                    //SubSectionHeadertable.AddCell(cell);
                    //document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(18);
                    Datatable.TotalWidth = 782f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;



                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Agent Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ACD Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg ACD Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg ACW Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg Hold Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Ext In Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Ext Out Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Ext Out Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("External\nExt Out Calls"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("External\nExt Out Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 2\n(Outbound)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 3\n(Assist on Call)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 1\n(Toilet)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 4\n(Break)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUXOUT Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nNot Accepted"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Agent Ring\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Staffed Time"));

                    int _ACDCalls = 0;
                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";
                    int _ACW = 0;
                    Double _ACWTime = 0;
                    string ACWTime = "00:00:00";

                    Double _HoldTime = 0;
                    string HoldTime = "00:00:00";

                    int _ExtinCalls = 0;
                    Double _EXTInTime = 0;
                    string EXTInTime = "00:00:00";

                    Double _EXTInHoldTime = 0;
                    int _ExtOutCalls = 0;
                    Double _ExtOutTime = 0;
                    string ExtoutTime = "00:00:00";
                    Double _ExtOutHoldTime = 0;
                    int _ExternalExtCalls = 0;
                    Double _ExternalExtTime = 0;
                    string ExternalExtoutTime = "00:00:00";
                    Double _ExternalExtHoldTime = 0;
                    Double _Aux1 = 0;
                    string AUX1 = "00:00:00";
                    Double _Aux2 = 0;
                    string AUX2 = "00:00:00";
                    Double _Aux3 = 0;
                    string AUX3 = "00:00:00";
                    Double _Aux4 = 0;
                    string AUX4 = "00:00:00";
                    int _CallsNotAccepted = 0;
                    Double _AgentRingTime = 0;
                    string AgentRingTime = "00:00:00";
                    Double _StaffedTime = 0;
                    string StaffedTime = "00:00:00";


                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {

                        ReportAgentOverviewEntity obj = ReportEntityList[i];
                        _ACDCalls += obj.ACDBusyCount;
                        _ACDTime += obj.ACDBusyTime;//
                        if (obj.ACDBusyCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                        else
                            ACDTime = "00:00:00";

                        _ACW += obj.ACWCount;
                        _ACWTime += obj.ACWTime;
                        if (obj.ACWCount > 0)
                            ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACWTime) / obj.ACWCount);
                        else
                            ACWTime = "00:00:00";

                        _HoldTime += obj.UnHoldTime;
                        if (obj.ACDBusyCount > 0)
                            HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                        else
                            HoldTime = "00:00:00";

                        _ExtinCalls += obj.ExtInCalls;
                        _EXTInTime += obj.ExtInCallsTime;
                        EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                        _EXTInHoldTime += obj.ExtInCallsHoldTime;

                        _ExtOutCalls = obj.ExtOutCalls;
                        _ExtOutTime += obj.ExternalExtOutCallsTime;
                        ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                        _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                        _ExternalExtCalls += obj.ExternalExtOutCalls;
                        _ExternalExtTime += obj.ExternalExtOutCallsTime;
                        ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                        _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                        _Aux1 += obj.AUX1Time;
                        AUX1 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX1Time);
                        _Aux2 += obj.AUX2Time;
                        AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                        _Aux3 += obj.AUX3Time;
                        AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                        _Aux4 += obj.AUX4Time;
                        AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                        _CallsNotAccepted += obj.ACDnotacceptCount;
                        _AgentRingTime += obj.ACDRingTime;
                        AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                        _StaffedTime += obj.TotalLoggedInTime;
                        StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);

                        if (i == ReportEntityList.Count - 1)
                        {

                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDBusyCount + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACDTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACWTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(HoldTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExtInCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExternalExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ExternalExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX2));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX3));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX1));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX4));

                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDnotacceptCount + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AgentRingTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(StaffedTime));


                            //Combined Totals 
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDCalls + ""));
                            string avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime / _ACDCalls);
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(avg));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ACWTime)));
                            avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_HoldTime / _ACDCalls);
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(avg));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExtinCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExtOutTime + _ExtOutHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExternalExtCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime + _ExternalExtHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux2)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux3)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux1)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux4)));

                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_CallsNotAccepted + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AgentRingTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_StaffedTime)));

                        }
                        else
                        {

                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDBusyCount + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ACDTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ACWTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(HoldTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExtInCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExternalExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ExternalExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AUX2));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AUX3));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AUX1));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AUX4));

                            Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDnotacceptCount + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AgentRingTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(StaffedTime));

                        }
                    }

                    document.Add(Datatable);
                    // }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentOverviewSummaryReportExcel(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {

            String separator = ",";
            StringBuilder output = new StringBuilder();
            try
            {
                //   ReportName = "Consolidated Agent Report";

                if (ReportEntityList.Count > 0)
                {

                    String[] headings = { "Agent Name", "ACD Calls", "Avg ACD Time", "Avg ACW Time", "Avg Hold Time", "Ext In Calls", "Ext Out Calls", "Ext Out Time", "External Ext Out Calls", "External Ext Out Time", "AUX 2 (Outbound)", "AUX 3 (Assist on Call)", "AUX 1(Toilet)", "AUX 4 (Break)", "AUXOUT Time", "Total Calls Not Accepted", "Agent Ring Time", "Staffed Time" };
                    output.AppendLine(string.Join(separator, headings));



                    int _ACDCalls = 0;
                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";
                    int _ACW = 0;
                    Double _ACWTime = 0;
                    string ACWTime = "00:00:00";

                    Double _HoldTime = 0;
                    string HoldTime = "00:00:00";

                    int _ExtinCalls = 0;
                    Double _EXTInTime = 0;
                    string EXTInTime = "00:00:00";

                    Double _EXTInHoldTime = 0;
                    int _ExtOutCalls = 0;
                    Double _ExtOutTime = 0;
                    string ExtoutTime = "00:00:00";
                    Double _ExtOutHoldTime = 0;
                    int _ExternalExtCalls = 0;
                    Double _ExternalExtTime = 0;
                    string ExternalExtoutTime = "00:00:00";
                    Double _ExternalExtHoldTime = 0;
                    Double _Aux1 = 0;
                    string AUX1 = "00:00:00";
                    Double _Aux2 = 0;
                    string AUX2 = "00:00:00";
                    Double _Aux3 = 0;
                    string AUX3 = "00:00:00";
                    Double _Aux4 = 0;
                    string AUX4 = "00:00:00";
                    int _CallsNotAccepted = 0;
                    Double _AgentRingTime = 0;
                    string AgentRingTime = "00:00:00";
                    Double _StaffedTime = 0;
                    string StaffedTime = "00:00:00";


                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {

                        ReportAgentOverviewEntity obj = ReportEntityList[i];
                        _ACDCalls += obj.ACDBusyCount;
                        _ACDTime += obj.ACDBusyTime;//
                        if (obj.ACDBusyCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                        else
                            ACDTime = "00:00:00";

                        _ACW += obj.ACWCount;
                        _ACWTime += obj.ACWTime;
                        if (obj.ACWCount > 0)
                            ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACWTime) / obj.ACWCount);
                        else
                            ACWTime = "00:00:00";

                        _HoldTime += obj.UnHoldTime;
                        if (obj.ACDBusyCount > 0)
                            HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                        else
                            HoldTime = "00:00:00";

                        _ExtinCalls += obj.ExtInCalls;
                        _EXTInTime += obj.ExtInCallsTime;
                        EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                        _EXTInHoldTime += obj.ExtInCallsHoldTime;

                        _ExtOutCalls = obj.ExtOutCalls;
                        _ExtOutTime += obj.ExternalExtOutCallsTime;
                        ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                        _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                        _ExternalExtCalls += obj.ExternalExtOutCalls;
                        _ExternalExtTime += obj.ExternalExtOutCallsTime;
                        ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                        _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                        _Aux1 += obj.AUX1Time;
                        AUX1 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX1Time);
                        _Aux2 += obj.AUX2Time;
                        AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                        _Aux3 += obj.AUX3Time;
                        AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                        _Aux4 += obj.AUX4Time;
                        AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                        _CallsNotAccepted += obj.ACDnotacceptCount;
                        _AgentRingTime += obj.ACDRingTime;
                        AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                        _StaffedTime += obj.TotalLoggedInTime;
                        StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);




                        // String[] headings = { "Agent Name", "ACD Calls",                        "Avg ACD Time", "Avg ACW Time", "Avg Hold Time", "Ext In Calls",                   "Ext Out Calls",                  "Ext Out Time",             "External Ext Out Calls",                "External Ext Out Time", "AUX 2 (Outbound)", "AUX 3 (Assist on Call)", "AUX 1(Toilet)",  "AUX 4 (Break)", "AUXOUT Time", "Total Calls Not Accepted", "Agent Ring Time", "Staffed Time" };
                        String[] newLine = { obj.AgentName, obj.ACDBusyCount.ToString() + " ", ACDTime, ACWTime, HoldTime, obj.ExtInCalls.ToString() + " ", obj.ExtOutCalls.ToString() + " ", obj.ExtOutCalls.ToString(), obj.ExternalExtOutCalls.ToString() + " ", ExternalExtoutTime, AUX2, AUX3, AUX1, AUX4, ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime), obj.ACDnotacceptCount + " ", AgentRingTime, StaffedTime };
                        output.AppendLine(string.Join(separator, newLine));


                    }


                }
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

            string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

            File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




            return FileName;

        }

        public static string GenerateAgentConsolidatedSummaryReport(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {
                //   ReportName = "Consolidated Agent Report";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    // List<List<ReportAgentOverviewEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupTitle }).Select(y => y.ToList()).ToList();


                    //foreach (List<ReportAgentOverviewEntity> ReportEntityLists in ReportEntityList)
                    // {
                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 782f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                    //phrase = new Phrase();
                    //phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    //phrase.Add(new Chunk(ReportEntityLists[0].EventDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    //phrase.Add(new Chunk("      Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                    //phrase.Add(new Chunk(ReportEntityLists[0].GroupTitle, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                    //cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    //cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                    //cell.PaddingTop = 10f;
                    //cell.PaddingBottom = 0f;
                    //SubSectionHeadertable.AddCell(cell);
                    //document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(14);
                    Datatable.TotalWidth = 782f;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;



                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Agent Name"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ACD Calls Answered"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. ACD Talk Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Wrap-up Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Hold Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Internal Calls\n(Recevied)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Internal Calls\n(Made)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Time on Internal\nCalls (Made)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("External Calls\n(Made)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Time on External\nCalls (Made)"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Unavailable Instances"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Time\nUnavailable"));
                   // Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 1\n(Toilet)"));
                   // Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUX 4\n(Break)"));
                    //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AUXOUT Time"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ACD Calls\nNot Accepted"));
          //          Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Agent Ring\nTime"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Staffed Time"));

                    int _ACDCalls = 0;
                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";
                    int _ACW = 0;
                    Double _ACWTime = 0;
                    string ACWTime = "00:00:00";

                    Double _HoldTime = 0;
                    string HoldTime = "00:00:00";

                    int _ExtinCalls = 0;
                    Double _EXTInTime = 0;
                    string EXTInTime = "00:00:00";

                    Double _EXTInHoldTime = 0;
                    int _ExtOutCalls = 0;
                    Double _ExtOutTime = 0;
                    string ExtoutTime = "00:00:00";
                    Double _ExtOutHoldTime = 0;
                    int _ExternalExtCalls = 0;
                    Double _ExternalExtTime = 0;
                    string ExternalExtoutTime = "00:00:00";
                    Double _ExternalExtHoldTime = 0;

                    int _AbsCount = 0;
                    Double _ABSTime = 0;
                    string ABSTime = "00:00:00";
                    //Double _Aux2 = 0;
                    //string AUX2 = "00:00:00";
                    //Double _Aux3 = 0;
                    //string AUX3 = "00:00:00";
                    //Double _Aux4 = 0;
                    //string AUX4 = "00:00:00";
                    int _CallsNotAccepted = 0;
                    Double _AgentRingTime = 0;
                    string AgentRingTime = "00:00:00";
                    Double _StaffedTime = 0;
                    string StaffedTime = "00:00:00";


                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {

                        ReportAgentOverviewEntity obj = ReportEntityList[i];
                        _ACDCalls += obj.ACDBusyCount;
                        _ACDTime += obj.ACDBusyTime;//
                        if (obj.ACDBusyCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                        else
                            ACDTime = "00:00:00";

                        _ACW += obj.ClerikalBusyCount;
                        _ACWTime += obj.ClerikalBusyTime;
                        //if (obj.ClerikalBusyCount > 0)
                            ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime));
                        //else
                        //    ACWTime = "00:00:00";

                        _HoldTime += obj.UnHoldTime;
                        if (obj.ACDBusyCount > 0)
                            HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                        else
                            HoldTime = "00:00:00";

                        _ExtinCalls += obj.ExtInCalls;
                        _EXTInTime += obj.ExtInCallsTime;
                        EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                        _EXTInHoldTime += obj.ExtInCallsHoldTime;

                        _ExtOutCalls = obj.ExtOutCalls;
                        _ExtOutTime += obj.ExternalExtOutCallsTime;
                        ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                        _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                        _ExternalExtCalls += obj.ExternalExtOutCalls;
                        _ExternalExtTime += obj.ExternalExtOutCallsTime;
                        ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                        _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                        _AbsCount += obj.TempAbsCount;
                        _ABSTime += obj.TempAbsTime;
                        ABSTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime);
                        //_Aux2 += obj.AUX2Time;
                        //AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                        //_Aux3 += obj.AUX3Time;
                        //AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                        //_Aux4 += obj.AUX4Time;
                        //AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                        _CallsNotAccepted += obj.ACDnotacceptCount;
                        _AgentRingTime += obj.ACDRingTime;
                        AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                        _StaffedTime += obj.TotalLoggedInTime;
                        StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);

                        if (i == ReportEntityList.Count - 1)
                        {

                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.AgentName));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDBusyCount + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACDTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACWTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(HoldTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExtInCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ExternalExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ExternalExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TempAbsCount+""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ABSTime));
                            //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX1));
                           // Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AUX4));

                           // Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDnotacceptCount + ""));
                 //           Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AgentRingTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(StaffedTime));


                            //Combined Totals 
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDCalls + ""));
                            string avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime / _ACDCalls);
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(avg));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ACWTime)));
                            avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_HoldTime / _ACDCalls);
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(avg));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExtinCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExtOutTime + _ExtOutHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ExternalExtCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime + _ExternalExtHoldTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_AbsCount+""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ABSTime)));
                           // Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux1)));
                           // Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_Aux4)));

                            //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_CallsNotAccepted + ""));
             //               Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AgentRingTime)));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_StaffedTime)));

                        }
                        else
                        {

                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.AgentName));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDBusyCount + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ACDTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ACWTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(HoldTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExtInCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ExternalExtOutCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ExternalExtoutTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TempAbsCount+""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ABSTime));
                            //Datatable.AddCell(ReportsCommonMethods.RowCell(AUX1));
                            //Datatable.AddCell(ReportsCommonMethods.RowCell(AUX4));

                            //Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime)));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDnotacceptCount + ""));
               //             Datatable.AddCell(ReportsCommonMethods.RowCell(AgentRingTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(StaffedTime));

                        }
                    }

                    document.Add(Datatable);
                    // }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentConsolidatedSummaryReportCSV(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                if (ReportName.Length >= 32)
                    ReportName = ReportName.Substring(0, 31);
                IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                //  List<List<ReportAgentOverviewEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupTitle }).Select(y => y.ToList()).ToList();


                // foreach (List<ReportAgentOverviewEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    //Row++;
                    //Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].EventDate + " ");
                    //Headercell.RichText.Substring(0, 5).Bold = true;
                    //Headercell.Style.Font.FontSize = 13;
                    //Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupTitle + " ");
                    //Headercell.RichText.Substring(0, 5).Bold = true;
                    //Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("ACD Calls Answered");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Avg. ACD Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Total Wrap-up Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Avg. Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Internal Calls (Recevied)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Internal Calls (Made)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("Total Time on Internal Calls (Made)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("External Calls (Made)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("Total Time on External Calls (Made)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("Unavailable Instances");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("Total Time Unavailable");
                    Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 13).SetValue("AUX 1(Toilet)");
                    //Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 14).SetValue("AUX 4(Break)");
                    //Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 15).SetValue("AUXOUT Time");
                    //Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("ACD Calls Not Accepted");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("Staffed Time");
                    Headercell.Style.Font.Bold = true;

                    int _ACDCalls = 0;

                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";
                    int _ACW = 0;
                    Double _ACWTime = 0;
                    string ACWTime = "00:00:00";

                    Double _HoldTime = 0;
                    string HoldTime = "00:00:00";

                    int _ExtinCalls = 0;
                    Double _EXTInTime = 0;
                    string EXTInTime = "00:00:00";

                    Double _EXTInHoldTime = 0;
                    int _ExtOutCalls = 0;
                    Double _ExtOutTime = 0;
                    string ExtoutTime = "00:00:00";
                    Double _ExtOutHoldTime = 0;
                    int _ExternalExtCalls = 0;
                    Double _ExternalExtTime = 0;
                    string ExternalExtoutTime = "00:00:00";
                    Double _ExternalExtHoldTime = 0;
                    int _AbsCount = 0;
                    Double _ABSTime = 0;
                    string ABSTime = "00:00:00";
                    //Double _Aux2 = 0;
                    //string AUX2 = "00:00:00";
                    //Double _Aux3 = 0;
                    //string AUX3 = "00:00:00";
                    //Double _Aux4 = 0;
                    //string AUX4 = "00:00:00";
                    int _CallsNotAccepted = 0;
                    Double _AgentRingTime = 0;
                    string AgentRingTime = "00:00:00";
                    Double _StaffedTime = 0;
                    string StaffedTime = "00:00:00";

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        Row++;
                        ReportAgentOverviewEntity obj = ReportEntityList[i];

                        _ACDCalls += obj.ACDBusyCount;
                        _ACDTime += obj.ACDBusyTime;//
                        if (obj.ACDBusyCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                        else
                            ACDTime = "00:00:00";

                        _ACW += obj.ClerikalBusyCount;
                        _ACWTime += obj.ClerikalBusyTime;
                       // if (obj.ClerikalBusyCount > 0)
                            ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime));
                        //else
                        //    ACWTime = "00:00:00";

                        _HoldTime += obj.UnHoldTime;
                        if (obj.ACDBusyCount > 0)
                            HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                        else
                            HoldTime = "00:00:00";

                        _ExtinCalls += obj.ExtInCalls;
                        _EXTInTime += obj.ExtInCallsTime;
                        EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                        _EXTInHoldTime += obj.ExtInCallsHoldTime;

                        _ExtOutCalls = obj.ExtOutCalls;
                        _ExtOutTime += obj.ExternalExtOutCallsTime;
                        ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                        _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                        _ExternalExtCalls += obj.ExternalExtOutCalls;
                        _ExternalExtTime += obj.ExternalExtOutCallsTime;
                        ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                        _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                        _ABSTime += obj.TempAbsTime;
                        _AbsCount += obj.TempAbsCount;
                        ABSTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime);
                        //_Aux2 += obj.AUX2Time;
                        //AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                        //_Aux3 += obj.AUX3Time;
                        //AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                        //_Aux4 += obj.AUX4Time;
                        //AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                        _CallsNotAccepted += obj.ACDnotacceptCount;
                        _AgentRingTime += obj.ACDRingTime;
                        AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                        _StaffedTime += obj.TotalLoggedInTime;
                        StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.ACDBusyCount);
                        BodyCell = ws.Cell(Row, 3).SetValue(ACDTime);
                        BodyCell = ws.Cell(Row, 4).SetValue(ACWTime);
                        BodyCell = ws.Cell(Row, 5).SetValue(HoldTime);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.ExtInCalls);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.ExtOutCalls);
                        BodyCell = ws.Cell(Row, 8).SetValue(ExtoutTime);
                        BodyCell = ws.Cell(Row, 9).SetValue(obj.ExternalExtOutCalls);
                        BodyCell = ws.Cell(Row, 10).SetValue(ExternalExtoutTime);
                        BodyCell = ws.Cell(Row, 11).SetValue(obj.TempAbsCount);
                        BodyCell = ws.Cell(Row, 12).SetValue(ABSTime);
                       // BodyCell = ws.Cell(Row, 13).SetValue(AUX1);
                       // BodyCell = ws.Cell(Row, 14).SetValue(AUX4);
                       // BodyCell = ws.Cell(Row, 15).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime));
                        BodyCell = ws.Cell(Row, 13).SetValue(obj.ACDnotacceptCount);
               //         BodyCell = ws.Cell(Row, 14).SetValue(AgentRingTime);
                        BodyCell = ws.Cell(Row, 14).SetValue(StaffedTime);


                        if (i == ReportEntityList.Count - 1)
                        {
                            Row++;
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDCalls));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            string avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime / _ACDCalls);
                            FooterCell = ws.Cell(Row, 3).SetValue(avg);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACWTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_HoldTime / _ACDCalls);
                            FooterCell = ws.Cell(Row, 5).SetValue(avg);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(_ExtinCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(_ExtOutCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExtOutTime + _ExtOutHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(_ExternalExtCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 10).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime + _ExternalExtHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 11).SetValue(_AbsCount);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ABSTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux1));
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 14).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux4));
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 15).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime));
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 13).SetValue(_CallsNotAccepted);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 14).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AgentRingTime));
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            FooterCell = ws.Cell(Row, 14).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_StaffedTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentConsolidatedSummaryReportExcel(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {

            String separator = ",";
            StringBuilder output = new StringBuilder();
            try
            {
                //   ReportName = "Consolidated Agent Report";

                if (ReportEntityList.Count > 0)
                {

                    String[] headings = { "Agent Name", "ACD Calls Answered", "Avg. ACD Talk Time", "Total Wrap-up Time", "Avg. Hold Time", "Internal Calls (Recevied)", "Internal Calls (Made)", "Total Time on Internal Calls (Made)", "External Calls (Made)", "Total Time on External Calls (Made)", "Unavailable Instances", "Total Time Unavailable", "ACD Calls Not Accepted",  "Staffed Time" };
                    output.AppendLine(string.Join(separator, headings));



                    int _ACDCalls = 0;
                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";
                    int _ACW = 0;
                    Double _ACWTime = 0;
                    string ACWTime = "00:00:00";

                    Double _HoldTime = 0;
                    string HoldTime = "00:00:00";

                    int _ExtinCalls = 0;
                    Double _EXTInTime = 0;
                    string EXTInTime = "00:00:00";

                    Double _EXTInHoldTime = 0;
                    int _ExtOutCalls = 0;
                    Double _ExtOutTime = 0;
                    string ExtoutTime = "00:00:00";
                    Double _ExtOutHoldTime = 0;
                    int _ExternalExtCalls = 0;
                    Double _ExternalExtTime = 0;
                    string ExternalExtoutTime = "00:00:00";
                    Double _ExternalExtHoldTime = 0;
                    int _AbsCount = 0;
                    Double _ABSTime = 0;
                    string ABSTime = "00:00:00";
                    //Double _Aux2 = 0;
                    //string AUX2 = "00:00:00";
                    //Double _Aux3 = 0;
                    //string AUX3 = "00:00:00";
                    //Double _Aux4 = 0;
                    //string AUX4 = "00:00:00";
                    int _CallsNotAccepted = 0;
                    Double _AgentRingTime = 0;
                    string AgentRingTime = "00:00:00";
                    Double _StaffedTime = 0;
                    string StaffedTime = "00:00:00";


                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {

                        ReportAgentOverviewEntity obj = ReportEntityList[i];
                        _ACDCalls += obj.ACDBusyCount;
                        _ACDTime += obj.ACDBusyTime;//
                        if (obj.ACDBusyCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                        else
                            ACDTime = "00:00:00";

                        _ACW += obj.ClerikalBusyCount;
                        _ACWTime += obj.ClerikalBusyTime;
                       // if (obj.ClerikalBusyCount > 0)
                            ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime));
                       // else
                        //    ACWTime = "00:00:00";

                        _HoldTime += obj.UnHoldTime;
                        if (obj.ACDBusyCount > 0)
                            HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                        else
                            HoldTime = "00:00:00";

                        _ExtinCalls += obj.ExtInCalls;
                        _EXTInTime += obj.ExtInCallsTime;
                        EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                        _EXTInHoldTime += obj.ExtInCallsHoldTime;

                        _ExtOutCalls = obj.ExtOutCalls;
                        _ExtOutTime += obj.ExternalExtOutCallsTime;
                        ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                        _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                        _ExternalExtCalls += obj.ExternalExtOutCalls;
                        _ExternalExtTime += obj.ExternalExtOutCallsTime;
                        ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                        _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                        _AbsCount += obj.TempAbsCount;
                        _ABSTime += obj.TempAbsTime;
                        ABSTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime);
                        //_Aux2 += obj.AUX2Time;
                        //AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                        //_Aux3 += obj.AUX3Time;
                        //AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                        //_Aux4 += obj.AUX4Time;
                        //AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                        _CallsNotAccepted += obj.ACDnotacceptCount;
                        _AgentRingTime += obj.ACDRingTime;
                        AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                        _StaffedTime += obj.TotalLoggedInTime;
                        StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);





                        String[] newLine = { obj.AgentName, obj.ACDBusyCount.ToString() + " ", ACDTime, ACWTime, HoldTime, obj.ExtInCalls.ToString() + " ", obj.ExtOutCalls.ToString() + " ", obj.ExtOutCalls.ToString(), obj.ExternalExtOutCalls.ToString() + " ", ExternalExtoutTime, obj.TempAbsCount + " ", ABSTime, obj.ACDnotacceptCount + " ",  StaffedTime };
                        output.AppendLine(string.Join(separator, newLine));


                    }


                }
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

            string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

            File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




            return FileName;

        }









        public static string GenerateAgentUnavailableReport(string ReportName, List<ReportAgentUnavailbeEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo, System.Collections.Hashtable tablereason)
        {
            try
            {
                //   ReportName = "Consolidated Agent Report";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk("Agent Report - Unavailability Summary", FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentUnavailbeEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();


                    foreach (List<ReportAgentUnavailbeEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        // phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        // phrase.Add(new Chunk(ReportEntityLists[0].EventDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk(Environment.NewLine + "Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 2f, 2f, 2f });
                        Datatable.SpacingBefore = 10f;



                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Unavailability Code"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Reason"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Number of Instances"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total Time"));


                        int _ACDCalls = 0;
                        Double _ACDTime = 0;
                        string ACDTime = "00:00:00";

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {

                            ReportAgentUnavailbeEntity obj = ReportEntityLists[i];
                            _ACDCalls += obj.ReasonCount;
                            _ACDTime += obj.ReasonTime;//
                            if (obj.ReasonCount > 0)
                                ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ReasonTime));
                            else
                                ACDTime = "00:00:00";


                            if (i == ReportEntityLists.Count - 1)
                            {
                                if (tablereason.ContainsKey(obj.Reason.Trim().ToLower()))
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell((string)tablereason[obj.Reason.Trim().ToLower()]));
                                }
                                else
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell("N/A"));

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Reason));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ReasonCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACDTime));

                                //Combined Totals 
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDCalls + ""));
                                string avg = "00:00:00";
                                if (_ACDCalls > 0)
                                    avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(avg));


                            }
                            else
                            {
                                if (tablereason.ContainsKey(obj.Reason.Trim().ToLower()))
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell((string)tablereason[obj.Reason.Trim().ToLower()]));
                                }
                                else
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell("N/A"));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Reason));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ReasonCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ACDTime));
                            }
                        }

                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentUnavailableReportCSV(string ReportName, List<ReportAgentUnavailbeEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo, System.Collections.Hashtable tablereason)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue("Agent Report - Unavailability Summary");
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportAgentUnavailbeEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();


                foreach (List<ReportAgentUnavailbeEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent: " + ReportEntityLists[0].AgentName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Unavailability Code");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Reason");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Total Instances");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Total Time");
                    Headercell.Style.Font.Bold = true;


                    int _ACDCalls = 0;

                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentUnavailbeEntity obj = ReportEntityLists[i];

                        _ACDCalls += obj.ReasonCount;
                        _ACDTime += obj.ReasonTime;//
                        if (obj.ReasonCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ReasonTime));
                        else
                            ACDTime = "00:00:00";



                        IXLCell BodyCell = null;
                        if (tablereason.ContainsKey(obj.Reason.Trim().ToLower()))
                        {
                            BodyCell = ws.Cell(Row, 1).SetValue((string)tablereason[obj.Reason.Trim().ToLower()]);
                        }
                        else
                            BodyCell = ws.Cell(Row, 1).SetValue("N/A");

                        BodyCell = ws.Cell(Row, 2).SetValue(obj.Reason);
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.ReasonCount);
                        BodyCell = ws.Cell(Row, 4).SetValue(ACDTime);


                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDCalls));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            string avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime);
                            FooterCell = ws.Cell(Row, 4).SetValue(avg);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAgentUnavailableReportExcel(string ReportName, List<ReportAgentUnavailbeEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo, System.Collections.Hashtable tablereason)
        {

            String separator = ",";
            StringBuilder output = new StringBuilder();

            try
            {

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentUnavailbeEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();


                    String[] headings = { "Agent", "Unavailability Code", "Reason", "Number of Instances", "Total Time" };
                    output.AppendLine(string.Join(separator, headings));

                    foreach (List<ReportAgentUnavailbeEntity> ReportEntityLists in ReportEntityGroupedList)
                    {



                        int _ACDCalls = 0;
                        Double _ACDTime = 0;
                        string ACDTime = "00:00:00";

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {

                            ReportAgentUnavailbeEntity obj = ReportEntityLists[i];
                            _ACDCalls += obj.ReasonCount;
                            _ACDTime += obj.ReasonTime;//
                            if (obj.ReasonCount > 0)
                                ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ReasonTime));
                            else
                                ACDTime = "00:00:00";

                            // String[] newLine = "";


                            if (tablereason.ContainsKey(obj.Reason.Trim().ToLower()))
                            {

                                String[] newLine = { obj.AgentName, tablereason[obj.Reason.Trim().ToLower()].ToString(), obj.Reason.ToString(), obj.ReasonCount.ToString(), ACDTime };
                                output.AppendLine(string.Join(separator, newLine));

                            }
                            else
                            {
                                String[] newLine1 = { obj.AgentName, "N/A", obj.Reason.ToString(), obj.ReasonCount.ToString(), ACDTime };
                                output.AppendLine(string.Join(separator, newLine1));
                            }


                        }


                    }
                }

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

            string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

            File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




            return FileName;

        }







        public static string GenerateSLAReport(string ReportName, List<ReportSLAPerformance> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                //ReportName = "SLA Performance by Queue Report ";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportSLAPerformance>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();
                    List<ReportSLAPerformance> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate, x.Title })
                     .Select(y => new ReportSLAPerformance
                     {
                         TotalCalls = Convert.ToString(y.Sum(d => Convert.ToInt32(d.TotalCalls))),
                         SLAOutside = Convert.ToString(y.Sum(d => Convert.ToInt32(d.SLAOutside))),
                         SLAWithIn = Convert.ToString(y.Sum(d => Convert.ToInt32(d.SLAWithIn))),
                         Title = y.First().Title,
                         StartDate = y.First().StartDate,
                     }).ToList();

                    foreach (List<ReportSLAPerformance> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].StartDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(4);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 2f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queue Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Answered"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Answered \nWithIn SLA"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Answered \nOutside SLA"));

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            string TotalCalls = "";
                            string CallWithinsla = "";
                            string callousidesla = "";

                            ReportSLAPerformance obj = ReportEntityLists[i];
                            if (obj.TotalCalls != "")
                            {
                                TotalCalls = obj.TotalCalls;
                            }
                            if (obj.SLAOutside != "")
                            {
                                callousidesla = obj.SLAOutside;
                            }

                            if (obj.SLAWithIn != "")
                            {
                                CallWithinsla = obj.SLAWithIn;
                            }
                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Title));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalCalls));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(CallWithinsla));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(callousidesla));

                                ReportSLAPerformance obj1 = TempReportEntityGroupedList.Find(x => x.Title == obj.Title && x.StartDate == obj.StartDate);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TotalCalls.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.SLAWithIn.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.SLAOutside.ToString()));

                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Title));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalCalls));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(CallWithinsla));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(callousidesla));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateOverflowedcallsReport(string ReportName, List<ReportOverflowedCalls> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportOverflowedCalls>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                    foreach (List<ReportOverflowedCalls> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].StartDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(11);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 2.5f, 0.6f, 0.6f, 0.6f, 0.6f, 0.6f, 0.6f, 0.6f, 0.6f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queue Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Overflowed"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed Due to Max Wait Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed Due to Max Callers"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed Outside of Service Hours"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed Due to No Agents Logged In"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Trasnsferred In by Agents"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Transferred out by Caller"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed to Other Queues"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Wait before Being Overflowed"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Wait before Being Overflowed"));

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {

                            ReportOverflowedCalls obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Title));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.Totaloverflowedcall.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.Totaloverflowedcallwaittime.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.Totaloverflowedcallerwaiting.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotaloverflowedcallOUTOFHOUR.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotaloverflowedcallNOAgent.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotalTransfersIn.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotaloverflowedcallDTMF.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TotaloverflowedcallInQueues.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.OverFlowInWaitTime))));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.OverFlowInAVGWaitTime))));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Title));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.Totaloverflowedcall.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.Totaloverflowedcallwaittime.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.Totaloverflowedcallerwaiting.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotaloverflowedcallOUTOFHOUR.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotaloverflowedcallNOAgent.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotalTransfersIn.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotaloverflowedcallDTMF.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TotaloverflowedcallInQueues.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.OverFlowInWaitTime))));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.OverFlowInAVGWaitTime))));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateRoutingCallsReport(string ReportName, List<RoutingTreeReport> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {

                    List<RoutingTreeReport> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title)
                 .Select(y => new RoutingTreeReport
                 {
                     Title = y.First().Title,
                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalNotAccepted = y.Sum(d => d.TotalNotAccepted),
                 }).ToList();

                    List<List<RoutingTreeReport>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title).Select(y => y.ToList()).ToList();

                    foreach (List<RoutingTreeReport> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Title, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Total Calls: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].TotalCalls.ToString(), FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("      Total Calls Not Accepted: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].TotalNotAccepted.ToString(), FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_MIDDLE);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 15f;
                        cell.PaddingBottom = 10f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(7);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 20f;
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Callers Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Call Arrived"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Call Ended"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Call Offered Time(s)"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Duration"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Agent Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Outcome"));
                        string callid = "";
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            RoutingTreeReport obj = ReportEntityLists[i];
                            if (callid != obj.CallID)
                            {
                                callid = obj.CallID;
                                int durtime = -1;
                               
                                var getcallid = ReportEntityLists.Where(w => w.CallID == obj.CallID).OrderBy(x =>x.DTAgentStartTime).ToList();
                                if (getcallid.Count > 0)
                                {
                                    int j = 1;
                                    List<RoutingTreeReport> data = new List<RoutingTreeReport>();
                                    foreach (var model in getcallid)
                                    {
                                        if (durtime < 0)
                                        {
                                            try
                                            {
                                                durtime = (int)obj.DTAgentStartTime.Subtract(obj.DTCallArrived).TotalSeconds;
                                            }
                                            catch (Exception ex)
                                            {
                                                durtime = 0;
                                            }
                                        }
                                        if (model.EventId == 5 && j == 1)
                                        {
                                            data.Add(model);
                                        }
                                        else
                                        {
                                            if (j == 1)
                                            {
                                                data.Add(model);
                                                j++;
                                            }
                                            else
                                            {
                                                model.CLI = "";
                                                model.CallArrived = string.Empty;
                                                model.CallEnded = string.Empty;
                                               // model.DTAgentStartTime=m
                                                data.Add(model);
                                                j++;
                                            }
                                        }

                                    }
                                    int loopid = 1;
                                    string LastTime = string.Empty;
                                    int LastDuration = 0;
                                    foreach (var item in data)
                                    {
                                      
                                        if (data.Count == 1 && item.EventId == 5)
                                        {
                                            int finldu = item.Duration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;// item.Duration + durtime;
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CLI));


                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallArrived.ToString()));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallEnded.ToString()));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentStartTime.ToString()));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(" " + ReportsCommonMethods.GetTimeFromSeconds(finldu)));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentName.ToString()));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Disconnected"));
                                            durtime = item.Duration + durtime;
                                            loopid++;
                                        }
                                        else
                                        {
                                            if (loopid == 1)
                                            {
                                                if (item.EventId == 5)
                                                {
                                                    LastTime = item.AgentStartTime;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;
                                                    LastDuration = item.Duration;
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CLI));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallArrived.ToString()));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallEnded.ToString()));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(" " + ReportsCommonMethods.GetTimeFromSeconds(durtime)));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentName.ToString()));

                                                    //    Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Ringing"));
                                                    durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                                else
                                                {
                                                    int finladuration = item.Duration;// LastDuration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;// item.Duration + durtime;

                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CLI));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallArrived.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallEnded.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentStartTime));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(" " + ReportsCommonMethods.GetTimeFromSeconds(finladuration)));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentName.ToString()));
                                                    if (item.EventId == 4)
                                                    {
                                                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Not Accepted"));
                                                    }
                                                    if (item.EventId == 6)
                                                    {
                                                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Answered"));
                                                    }
                                                    durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                            }
                                            else if (loopid == data.Count && item.EventId == 5)
                                            {
                                                if (data.Count > 1)
                                                {
                                                    int finladu = item.Duration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;//item.Duration + durtime;
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentStartTime));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(" " + ReportsCommonMethods.GetTimeFromSeconds(finladu)));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentName.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Disconnected"));
                                                    durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                                else
                                                {
                                                    int finldu = item.Duration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;//item.Duration + durtime;
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CLI));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallArrived.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallEnded.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentStartTime));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(" " + ReportsCommonMethods.GetTimeFromSeconds(finldu)));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentName.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Disconnected"));
                                                    durtime = item.Duration + durtime;
                                                    loopid++;
                                                }

                                            }
                                            else
                                            {
                                                if (item.EventId == 5)
                                                {
                                                    LastTime = item.AgentStartTime;//  (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;
                                                    LastDuration = item.Duration;
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(" " + ReportsCommonMethods.GetTimeFromSeconds(durtime)));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentName.ToString()));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Ringing"));
                                                    durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                                else
                                                {
                                                    int finladurationnn = LastDuration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;// item.Duration + durtime;
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    //Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CLI));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallArrived.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.CallEnded.ToString()));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(LastTime));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(" " + ReportsCommonMethods.GetTimeFromSeconds(finladurationnn)));
                                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(item.AgentName.ToString()));
                                                    if (item.EventId == 4)
                                                    {
                                                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Not Accepted"));
                                                    }
                                                    if (item.EventId == 6)
                                                    {
                                                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell("Answered"));
                                                    }
                                                    durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                            }
                                        }

                                    }
                                }
                                else
                                    durtime = 0;
                            }
                        }
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }


        public static string GenerateRoutingCallsReportCSV(string ReportName, List<RoutingTreeReport> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                if (ReportEntityList.Count > 0)
                {

                    List<RoutingTreeReport> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title)
                 .Select(y => new RoutingTreeReport
                 {
                     Title = y.First().Title,
                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalNotAccepted = y.Sum(d => d.TotalNotAccepted),
                 }).ToList();

                    List<List<RoutingTreeReport>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title).Select(y => y.ToList()).ToList();

                    foreach (List<RoutingTreeReport> ReportEntityLists in ReportEntityGroupedList)
                    {

                        Row++;

                        Headercell = ws.Cell(Row, 1).SetValue("Board: " + ReportEntityLists[0].Title + " ");
                        Headercell.RichText.Substring(0, 5).Bold = true;
                        Headercell.Style.Font.FontSize = 13;


                        Headercell = ws.Cell(Row, 2).SetValue("Total Calls: " + ReportEntityLists[0].TotalCalls + " ");
                        Headercell.RichText.Substring(0, 5).Bold = true;
                        Headercell.Style.Font.FontSize = 13;

                        Headercell = ws.Cell(Row, 3).SetValue("Total Not Accepted: " + ReportEntityLists[0].TotalNotAccepted + " ");
                        Headercell.RichText.Substring(0, 5).Bold = true;
                        Headercell.Style.Font.FontSize = 13;


                        Row++;

                        Headercell = ws.Cell(Row, 1).SetValue("Callers Number");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 2).SetValue("Call Arrived");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 3).SetValue("Call Ended");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 4).SetValue("Call Offered Time(s)");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 5).SetValue("Duration");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 6).SetValue("Agent Name");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 7).SetValue("Outcome");
                        Headercell.Style.Font.Bold = true;



                        IXLCell BodyCell;


                        string callid = "";
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            RoutingTreeReport obj = ReportEntityLists[i];
                            if (callid != obj.CallID)
                            {
                                callid = obj.CallID;
                                var getcallid = ReportEntityLists.Where(w => w.CallID == obj.CallID).ToList();
                                if (getcallid.Count > 0)
                                {
                                    int j = 1;
                                    List<RoutingTreeReport> data = new List<RoutingTreeReport>();
                                    foreach (var model in getcallid)
                                    {
                                        if (model.EventId == 5 && j == 1)
                                        {
                                            data.Add(model);
                                        }
                                        else
                                        {
                                            if (j == 1)
                                            {
                                                data.Add(model);
                                                j++;
                                            }
                                            else
                                            {
                                                model.CLI = "";
                                                model.CallArrived = "";
                                                model.CallEnded = "";
                                                data.Add(model);
                                                j++;
                                            }
                                        }

                                    }
                                    int loopid = 1;
                                    string LastTime = string.Empty;
                                    int LastDuration = 0;
                                    foreach (var item in data)
                                    {
                                        if (data.Count == 1 && item.EventId == 5)
                                        {
                                            int finldu = item.Duration;//item.Duration + durtime;
                                            item.Status = "Disconnected";
                                            item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finldu);



                                            Row++;
                                            BodyCell = ws.Cell(Row, 1).SetValue(item.CLI);
                                            BodyCell = ws.Cell(Row, 2).SetValue(item.CallArrived.ToString());
                                            BodyCell = ws.Cell(Row, 3).SetValue(item.CallEnded.ToString());
                                            BodyCell = ws.Cell(Row, 4).SetValue(item.AgentStartTime);
                                            BodyCell = ws.Cell(Row, 5).SetValue(item.DurationofLeg);
                                            BodyCell = ws.Cell(Row, 6).SetValue(item.AgentName);
                                            BodyCell = ws.Cell(Row, 7).SetValue(item.Status);



                                           // durtime = item.Duration + durtime;
                                            loopid++;
                                        }
                                        else
                                        {
                                            if (loopid == 1)
                                            {
                                                if (item.EventId == 5)
                                                {
                                                    LastTime = item.AgentStartTime;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;
                                                    LastDuration = item.Duration;
                                                    loopid++;
                                                }
                                                else
                                                {
                                                    int finladuration = item.Duration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;//item.Duration + durtime;

                                                    item.Status = "";
                                                    if (item.EventId == 4)
                                                        item.Status = "Not Accepted";
                                                    else if (item.EventId == 6)
                                                        item.Status = "Answered";

                                                    item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finladuration);

                                                    Row++;
                                                    BodyCell = ws.Cell(Row, 1).SetValue(item.CLI);
                                                    BodyCell = ws.Cell(Row, 2).SetValue(item.CallArrived.ToString());
                                                    BodyCell = ws.Cell(Row, 3).SetValue(item.CallEnded.ToString());
                                                    BodyCell = ws.Cell(Row, 4).SetValue(item.AgentStartTime);
                                                    BodyCell = ws.Cell(Row, 5).SetValue(item.DurationofLeg);
                                                    BodyCell = ws.Cell(Row, 6).SetValue(item.AgentName);
                                                    BodyCell = ws.Cell(Row, 7).SetValue(item.Status);


                                                   // durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                            }
                                            else if (loopid == data.Count && item.EventId == 5)
                                            {
                                                int finladu = item.Duration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;//item.Duration + durtime;
                                                item.Status = "Disconnected";
                                                item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finladu);
                                                Row++;
                                                if (data.Count > 1)
                                                {
                                                    BodyCell = ws.Cell(Row, 1).SetValue("");
                                                    BodyCell = ws.Cell(Row, 2).SetValue("");
                                                    BodyCell = ws.Cell(Row, 3).SetValue("");

                                                }
                                                else
                                                {
                                                    BodyCell = ws.Cell(Row, 1).SetValue(item.CLI);
                                                    BodyCell = ws.Cell(Row, 2).SetValue(item.CallArrived.ToString());
                                                    BodyCell = ws.Cell(Row, 3).SetValue(item.CallEnded.ToString());
                                                }
                                                BodyCell = ws.Cell(Row, 4).SetValue(item.AgentStartTime);
                                                BodyCell = ws.Cell(Row, 5).SetValue(item.DurationofLeg);
                                                BodyCell = ws.Cell(Row, 6).SetValue(item.AgentName);
                                                BodyCell = ws.Cell(Row, 7).SetValue(item.Status);

                                                //durtime = item.Duration + durtime;
                                                loopid++;

                                            }
                                            else
                                            {
                                                if (item.EventId == 5)
                                                {
                                                    LastTime = item.AgentStartTime;//  (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;
                                                    LastDuration = item.Duration;
                                                    //durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                                else
                                                {
                                                    int finladuration = LastDuration;// LastTime;// item.Duration + durtime;

                                                    item.Status = "";
                                                    if (item.EventId == 4)
                                                        item.Status = "Not Accepted";
                                                    else if (item.EventId == 6)
                                                        item.Status = "Answered";

                                                    item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finladuration);

                                                    Row++;
                                                    BodyCell = ws.Cell(Row, 1).SetValue(item.CLI);
                                                    BodyCell = ws.Cell(Row, 2).SetValue(item.CallArrived.ToString());
                                                    BodyCell = ws.Cell(Row, 3).SetValue(item.CallEnded.ToString());
                                                    BodyCell = ws.Cell(Row, 4).SetValue(LastTime);
                                                    BodyCell = ws.Cell(Row, 5).SetValue(item.DurationofLeg);
                                                    BodyCell = ws.Cell(Row, 6).SetValue(item.AgentName);
                                                    BodyCell = ws.Cell(Row, 7).SetValue(item.Status);

                                                   // durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        Row++;
                        BodyCell = ws.Cell(Row, 1).SetValue("");
                        BodyCell = ws.Cell(Row, 2).SetValue("");
                        BodyCell = ws.Cell(Row, 3).SetValue("");
                        BodyCell = ws.Cell(Row, 4).SetValue("");
                        BodyCell = ws.Cell(Row, 5).SetValue("");
                        BodyCell = ws.Cell(Row, 6).SetValue("");

                    }
                }
                else
                {

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }

        public static string GenerateRoutingCallsReportExcel(string ReportName, List<RoutingTreeReport> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string Groups, string WeekDays)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();

                //String[] headings = { "Boards", "Total Calls", "Total Calls Not Accepted:", "Callers Number", "Call Arrived", "Call Ended", "Duration of Leg", "Agent Name","Status" };
                //output.AppendLine(string.Join(separator, headings));

                //foreach (var col in ReportEntityList.OrderBy(x => x.Title))
                //{


                //    String[] newLine = { col.Title, col.TotalCalls.ToString(),col.TotalNotAccepted.ToString() , col.CLI, col.CallArrived.ToString(), col.CallEnded.ToString(),"",col.AgentName,"" };
                //    output.AppendLine(string.Join(separator, newLine));
                //}







                if (ReportEntityList.Count > 0)
                {

                    List<RoutingTreeReport> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title)
                 .Select(y => new RoutingTreeReport
                 {
                     Title = y.First().Title,
                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalNotAccepted = y.Sum(d => d.TotalNotAccepted),
                 }).ToList();

                    List<List<RoutingTreeReport>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title).Select(y => y.ToList()).ToList();

                    String[] headings = { "Queue", "Total Calls", "Total Calls Not Accepted:", "Callers Number", "Call Arrived", "Call Ended", "Call Offered Time(s)", "Ring Start Time", "Agent Name", "Outcome" };
                    output.AppendLine(string.Join(separator, headings));

                    foreach (List<RoutingTreeReport> ReportEntityLists in ReportEntityGroupedList)
                    {








                        IXLCell BodyCell;


                        string callid = "";
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            RoutingTreeReport obj = ReportEntityLists[i];
                            if (callid != obj.CallID)
                            {
                                callid = obj.CallID;
                                var getcallid = ReportEntityLists.Where(w => w.CallID == obj.CallID).ToList();
                                if (getcallid.Count > 0)
                                {
                                    int j = 1;
                                    List<RoutingTreeReport> data = new List<RoutingTreeReport>();
                                    foreach (var model in getcallid)
                                    {
                                        if (model.EventId == 5 && j == 1)
                                        {
                                            data.Add(model);
                                        }
                                        else
                                        {
                                            if (j == 1)
                                            {
                                                data.Add(model);
                                                j++;
                                            }
                                            else
                                            {
                                                model.CLI = "";
                                                model.CallArrived = "";
                                                model.CallEnded = "";
                                                data.Add(model);
                                                j++;
                                            }
                                        }

                                    }
                                    int loopid = 1;
                                    string LastTime = string.Empty;
                                    int LastDuration = 0;
                                    foreach (var item in data)
                                    {
                                        if (data.Count == 1 && item.EventId == 5)
                                        {
                                            int finldu = item.Duration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;//item.Duration + durtime;
                                            item.Status = "Disconnected";
                                            item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finldu);



                                            String[] newLine = { obj.Title, obj.TotalCalls.ToString(), obj.TotalNotAccepted.ToString(), item.CLI, item.CallArrived.ToString(), item.CallEnded.ToString(),item.AgentStartTime, item.DurationofLeg, item.AgentName, item.Status };
                                            output.AppendLine(string.Join(separator, newLine));

                                           // durtime = item.Duration + durtime;
                                            loopid++;
                                        }
                                        else
                                        {
                                            if (loopid == 1)
                                            {
                                                if (item.EventId == 5)
                                                {
                                                    LastTime = item.AgentStartTime;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;
                                                    LastDuration = item.Duration;
                                                   // durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                                else
                                                {
                                                    int finladuration = item.Duration;// LastDuration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;// item.Duration + durtime;
                                                    item.Status = "";
                                                    if (item.EventId == 4)
                                                        item.Status = "Not Accepted";
                                                    else if (item.EventId == 6)
                                                        item.Status = "Answered";

                                                    item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finladuration);

                                                    String[] newLine = { obj.Title, obj.TotalCalls.ToString(), obj.TotalNotAccepted.ToString(), item.CLI, item.CallArrived.ToString(), item.CallEnded.ToString(), item.AgentStartTime, item.DurationofLeg, item.AgentName, item.Status };
                                                    output.AppendLine(string.Join(separator, newLine));



                                                   // durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                            }
                                            else if (loopid == data.Count && item.EventId == 5)
                                            {
                                                int finladu = item.Duration;// (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;//item.Duration + durtime;
                                                item.Status = "Disconnected";
                                                item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finladu);

                                                if (data.Count > 1)
                                                {
                                                    //BodyCell = ws.Cell(Row, 1).SetValue("");
                                                    //BodyCell = ws.Cell(Row, 2).SetValue("");
                                                    //BodyCell = ws.Cell(Row, 3).SetValue("");




                                                }
                                                else
                                                {
                                                    //BodyCell = ws.Cell(Row, 1).SetValue(item.CLI);
                                                    //BodyCell = ws.Cell(Row, 2).SetValue(item.CallArrived.ToString());
                                                    //BodyCell = ws.Cell(Row, 3).SetValue(item.CallEnded.ToString());
                                                }

                                                //BodyCell = ws.Cell(Row, 4).SetValue(item.DurationofLeg);
                                                //BodyCell = ws.Cell(Row, 5).SetValue(item.AgentName);
                                                //BodyCell = ws.Cell(Row, 6).SetValue(item.Status);

                                                String[] newLine = { obj.Title, obj.TotalCalls.ToString(), obj.TotalNotAccepted.ToString(), item.CLI, item.CallArrived.ToString(), item.CallEnded.ToString(), item.AgentStartTime, item.DurationofLeg, item.AgentName, item.Status };
                                                output.AppendLine(string.Join(separator, newLine));

                                               // durtime = item.Duration + durtime;
                                                loopid++;

                                            }
                                            else
                                            {
                                                if (item.EventId == 5)
                                                {
                                                    LastTime = item.AgentStartTime;//  (int)item.DTAgentStartTime.Subtract(item.DTCallArrived).TotalSeconds;
                                                    LastDuration = item.Duration;
                                                    //durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                                else
                                                {
                                                    int finladurationnn = LastDuration;// LastTime;// item.Duration + durtime;

                                                    item.Status = "";
                                                    if (item.EventId == 4)
                                                        item.Status = "Not Accepted";
                                                    else if (item.EventId == 6)
                                                        item.Status = "Answered";

                                                    item.DurationofLeg = ReportsCommonMethods.GetTimeFromSeconds(finladurationnn);

                                                    String[] newLine = { obj.Title, obj.TotalCalls.ToString(), obj.TotalNotAccepted.ToString(), item.CLI, item.CallArrived.ToString(), item.CallEnded.ToString(), LastTime, item.DurationofLeg, item.AgentName, item.Status };
                                                    output.AppendLine(string.Join(separator, newLine));


                                                   // durtime = item.Duration + durtime;
                                                    loopid++;
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }


                    }
                }




                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());













                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }


        public static string GenerateGroupConsolidatedReport(string ReportName, List<ReportGroupConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                //  ReportName = "Consolidated Queue Report ";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportGroupConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                    foreach (List<ReportGroupConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].StartDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(13);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 2.5f, 1f, 1f, 1f, 1f, 1f, 1.5f, 1f, 1f, 1.5f, 1.5f, 1.5f, 1f});
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queue Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total calls\noffered"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total calls\nanswered"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total ABND.%"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. %"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Service Level %"));
              //          Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Average FTE\nAvailable"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged in Agents"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Hold Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Trasnsferred by\nACD Agents"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Transferred to Queue\nby ACD Agents"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Wait\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Wait Time\nbeforeAnswered"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Wait Time\nbeforeAbandoning"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Wait Time\nABND."));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Internal Calls"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Internal Call Handling\nTime"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Internal\nCall Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Calls\nPer Hour"));




                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            string TotalCalls = "";
                            string TotalAnswered = "0";
                            string TotalAbanodoned = "0";
                            string AbandonedPer = "0";
                            string SLAPer = "0";
                            string AvgAvailableTime = "00:00:00";
                            string LoggedInCount = "0";
                            string AvgHold = "00:00:00";
                            string TransferACD = "0";
                            string AvgWaitTime = "00:00:00";
                            string LongestWaitAnswer = "00:00:00";
                            string LongestWaitAbandoned = "00:00:00";
                            string AvgWaitAbandonedTime = "00:00:00";
                            string TotalInternalCall = "0";
                            string TotalInternalTime = "00:00:00";
                            string AVGInternalTime = "00:00:00";
                            string AvgCallsHour = "0";
                            string TotalTransfersIn = "0";

                            ReportGroupConsolidatedEntity obj = ReportEntityLists[i];
                            if (obj.TotalCalls != "")
                            {
                                TotalCalls = obj.TotalCalls;
                            }
                            if (obj.TotalAnswered != "")
                            {
                                TotalAnswered = obj.TotalAnswered;
                            }
                            if (obj.TotalAbanodoned != "")
                            {
                                TotalAbanodoned = obj.TotalAbanodoned;
                            }
                            if (obj.AbandonedPer != "")
                            {
                                AbandonedPer = Math.Round(Convert.ToDouble(obj.AbandonedPer), 2).ToString();

                            }
                            if (obj.SLAPer != "")
                            {
                                SLAPer = Math.Round(Convert.ToDouble(obj.SLAPer), 2).ToString();

                            }
                            if (obj.AvgAvailableTime != "")
                            {
                                AvgAvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgAvailableTime) * 3600).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.LoggedInCount != "")
                            {
                                LoggedInCount = obj.LoggedInCount;
                            }
                            if (obj.AvgHold != "")
                            {
                                AvgHold = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgHold)).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.TransferACD != "")
                            {
                                TransferACD = obj.TransferACD;
                            }
                            if (obj.AvgWaitTime != "")
                            {
                                AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.LongestWaitAnswer != "")
                            {
                                LongestWaitAnswer = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAnswer)).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.LongestWaitAbandoned != "")
                            {
                                LongestWaitAbandoned = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAbandoned)).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.AvgWaitAbandonedTime != "")
                            {
                                AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.TotalInternalCall != "")
                            {
                                TotalInternalCall = obj.TotalInternalCall;
                            }
                            if (obj.TotalInternalTime != "")
                            {
                                TotalInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalInternalTime)).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.AVGInternalTime != "")
                            {
                                AVGInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AVGInternalTime)).ToString(@"hh\:mm\:ss");
                            }
                            if (obj.AvgCallsHour != "")
                            {
                                AvgCallsHour = Math.Round(Convert.ToDouble(obj.AvgCallsHour), 2).ToString();
                            }
                            if (obj.TotalTransfersIn != "")
                            {
                                TotalTransfersIn = obj.TotalTransfersIn;
                            }


                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Title));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalCalls));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalAnswered));
                               // Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalAbanodoned));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AbandonedPer));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(SLAPer));
                   //             Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgAvailableTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LoggedInCount));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgHold));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TransferACD));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalTransfersIn));
                               // Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgWaitTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LongestWaitAnswer));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LongestWaitAbandoned));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgWaitAbandonedTime));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalInternalCall));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalInternalTime));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AVGInternalTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgCallsHour));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalTransfersIn));


                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Title));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(TotalCalls));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(TotalAnswered));
                               // Datatable.AddCell(ReportsCommonMethods.RowCell(TotalAbanodoned));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AbandonedPer));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(SLAPer));
              //                  Datatable.AddCell(ReportsCommonMethods.RowCell(AvgAvailableTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(LoggedInCount));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgHold));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(TransferACD));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(TotalTransfersIn));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(AvgWaitTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(LongestWaitAnswer));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(LongestWaitAbandoned));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgWaitAbandonedTime));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(TotalInternalCall));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(TotalInternalTime));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(AVGInternalTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgCallsHour));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(TotalTransfersIn));
                            }
                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateQueueAnalysisReport(string ReportName, List<ReportQueueAnalysisEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                // ReportName = "Queue Analysis Report ";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                SubSectionHeadertable = new PdfPTable(1);
                SubSectionHeadertable.TotalWidth = 782f;
                SubSectionHeadertable.LockedWidth = true;
                SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                //phrase = new Phrase();
                ////     phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                ////     phrase.Add(new Chunk(ReportEntityLists[0].StartDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                //cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                //cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                //cell.PaddingTop = 10f;
                //cell.PaddingBottom = 0f;
                //SubSectionHeadertable.AddCell(cell);
                //document.Add(SubSectionHeadertable);

                Datatable = new PdfPTable(15);
                Datatable.TotalWidth = 782f;
                Datatable.LockedWidth = true;
                Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                Datatable.SetWidths(new float[] { 2.5f, 0.8f, 1.5f, 0.8f, 0.8f, 1.5f, 0.8f, 0.8f, 0.8f, 1.5f, 0.8f, 0.8f, 0.85f, 1.5f, 1f });
                Datatable.SpacingBefore = 16f;

                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queue Name"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls Answered"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Answer Call %"));

                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. ACD Time"));

                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. Calls"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ABND. %"));

                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. ABND. Time"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Wait Time"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed into Queue"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Overflowed out"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Speed Ans"));
                //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG Speed Ans."));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Service Level %"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Max Delay"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("ACD Time %"));



                int _ACDcalls = 0;
                int _Abandoncalls = 0;
                int _TotalCalls = 0;
                int _Flowin = 0;
                int _Flowout = 0;
                // decimal _TotalRingDurationAnswerCalls = 0;

                decimal _SLAPer = 0;
                decimal _PerACDTime = 0;
                decimal _PerAnswerCall1 = 0;
                decimal _PerAbandonCalls1 = 0;

                double _maxdelay = 0;
                decimal TotalServiceLevelCalls = 0;

                int ACDcalls1 = 0;
                decimal SLAPer1 = 0;



                TimeSpan _AverageACDTime = TimeSpan.Parse("00:00");
                TimeSpan _AvgWaitAbandonedTime = TimeSpan.Parse("00:00");
                TimeSpan _AvgWaitTime = TimeSpan.Parse("00:00");
                TimeSpan _TotalRingDurationAnswerCalls = TimeSpan.Parse("00:00");


                double _TotalACDTime = 0;
                double _TotalAgentTime = 0;


                if (ReportEntityList.Count > 0)
                {
                    //  List<ReportQueueAnalysisEntity> ReportEntityGroupedList = ReportEntityList.Select(y => y.Title).ToList();

                    int count = 0;
                    foreach (var obj in ReportEntityList)
                    {
                        TimeSpan avghold = TimeSpan.Parse("00:00");
                        TimeSpan avgwaittime = TimeSpan.Parse("00:00");
                        TimeSpan longestwaitanswer = TimeSpan.Parse("00:00");
                        TimeSpan longestwaitabandoned = TimeSpan.Parse("00:00");
                        TimeSpan avgwaitabandonedtime = TimeSpan.Parse("00:00");

                        TimeSpan totalinternaltime = TimeSpan.Parse("00:00");
                        TimeSpan avginternaltime = TimeSpan.Parse("00:00");


                        TimeSpan avgavailabletime = TimeSpan.Parse("00:00");

                        string ACDcalls = "0";
                        string AverageACDTime = "00:00:00";
                        string Abandoncalls = "0";
                        string TotalCalls = "0";
                        string Flowin = "0";
                        string Flowout = "0";
                        string PerAnswerCall = "0";
                        string PerAbandonCalls = "0";
                        string PerWithinServiceLevel = "0";

                        string MaxDelay = "00:00:00";
                        string PerACDTimel = "0";
                        string SLAPer = "0";
                        string AvgWaitTime = "00:00:00";
                        string AvgWaitAbandonedTime = "00:00:00";



                        string TotalRingDurationAnswerCalls = "00:00:00";

                        string TotalACDTime = "0";
                        string TotalAgentTime = "0";


                        //  ReportQueueAnalysisEntity obj = ReportEntityList[];
                        if (obj.TotalAnswered != "")
                        {
                            ACDcalls = obj.TotalAnswered;
                        }
                        if (obj.TotalAbanodoned != "")
                        {
                            Abandoncalls = obj.TotalAbanodoned;
                        }
                        if (obj.TotalCalls != "")
                        {
                            TotalCalls = obj.TotalCalls;
                        }

                        if (obj.Totaloverflowedcall != "")
                        {
                            Flowout = obj.Totaloverflowedcall;
                        }

                        if (obj.TotaloverflowedcallInQueues != "")
                        {
                            Flowin = obj.TotaloverflowedcallInQueues;
                        }


                        if (obj.TotalACDTime != "" && obj.TotalAnswered != "" && obj.TotalACDTime != "0" && obj.TotalAnswered != "0")
                        {
                            AverageACDTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalACDTime) / Convert.ToDouble(obj.TotalAnswered)).ToString(@"hh\:mm\:ss");
                        }

                        if (obj.AvgWaitAbandonedTime != "")
                        {
                            AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AvgWaitTime != "")
                        {
                            AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.TotalCalls != "" && obj.TotalAnswered != "" && obj.TotalCalls != "0" && obj.TotalAnswered != "0")
                        {
                            double _PerAnswerCall = Convert.ToDouble(obj.TotalAnswered) / Convert.ToDouble(obj.TotalCalls) * 100;
                            PerAnswerCall = Math.Round(_PerAnswerCall, 2).ToString();
                        }

                        if (obj.TotalCalls != "" && obj.TotalAbanodoned != "" && obj.TotalCalls != "0" && obj.TotalAbanodoned != "0")
                        {
                            double _PerAbandonCalls = Convert.ToDouble(obj.TotalAbanodoned) / Convert.ToDouble(obj.TotalCalls) * 100;
                            PerAbandonCalls = Math.Round(_PerAbandonCalls, 2).ToString();
                        }


                        if (obj.SLAPerl != "")
                        {
                            PerWithinServiceLevel = Math.Round(Convert.ToDouble(obj.SLAPerl), 2).ToString();
                        }




                        if (obj.LongestWait != "")
                        {
                            MaxDelay = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWait)).ToString(@"hh\:mm\:ss"); ;

                            if (_maxdelay < Convert.ToDouble(obj.LongestWait))
                            {
                                _maxdelay = Convert.ToDouble(obj.LongestWait);
                            }

                        }

                        if (obj.TotalAgentTime != "" && obj.TotalACDTime != "" && obj.TotalAgentTime != "0" && obj.TotalACDTime != "0")
                        {
                            double _PerACDTimel = Convert.ToDouble(obj.TotalACDTime) / Convert.ToDouble(obj.TotalAgentTime) * 100;
                            PerACDTimel = Math.Round(_PerACDTimel, 2).ToString();
                        }



                        if ((obj.TotalAgentTime != "" && obj.TotalAgentTime != "0") || (obj.TotalACDTime != "" && obj.TotalACDTime != "0"))
                        {

                            TotalACDTime = obj.TotalACDTime;

                            TotalAgentTime = obj.TotalAgentTime;
                        }





                        if (obj.TotalRingDurationAnswerCalls != "0" && obj.TotalRingDurationAnswerCalls != "" && obj.TotalAnswered != "" && obj.TotalAnswered != "0")
                        {

                            TotalRingDurationAnswerCalls = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalRingDurationAnswerCalls) / Convert.ToDouble(obj.TotalAnswered)).ToString(@"hh\:mm\:ss");

                        }

                        if (count == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Title));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ACDcalls));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(PerAnswerCall));

                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AverageACDTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Abandoncalls));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(PerAbandonCalls));


                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgWaitAbandonedTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalCalls));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgWaitTime));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Flowin));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Flowout));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalRingDurationAnswerCalls));
                         
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(PerWithinServiceLevel));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(MaxDelay));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(PerACDTimel));

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Title));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(ACDcalls));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(PerAnswerCall));

                            Datatable.AddCell(ReportsCommonMethods.RowCell(AverageACDTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Abandoncalls));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(PerAbandonCalls));


                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgWaitAbandonedTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalCalls));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(AvgWaitTime));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Flowin));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(Flowout));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(TotalRingDurationAnswerCalls));
                       
                            Datatable.AddCell(ReportsCommonMethods.RowCell(PerWithinServiceLevel));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(MaxDelay));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(PerACDTimel));

                        }

                        _ACDcalls += Convert.ToInt32(ACDcalls);
                        _Abandoncalls += Convert.ToInt32(Abandoncalls);
                        _TotalCalls += Convert.ToInt32(TotalCalls);
                        _Flowin += Convert.ToInt32(Flowin);
                        _Flowout += Convert.ToInt32(Flowout);


                        _AverageACDTime = _AverageACDTime.Add(TimeSpan.Parse(AverageACDTime));
                        _AvgWaitAbandonedTime = _AvgWaitAbandonedTime.Add(TimeSpan.Parse(AvgWaitAbandonedTime));
                        _AvgWaitTime = _AvgWaitTime.Add(TimeSpan.Parse(AvgWaitTime));
                        _TotalRingDurationAnswerCalls = _TotalRingDurationAnswerCalls.Add(TimeSpan.Parse(TotalRingDurationAnswerCalls));

                        _SLAPer += Convert.ToDecimal(PerWithinServiceLevel);
                        _PerACDTime += Convert.ToDecimal(PerACDTimel);
                        _PerAnswerCall1 += Convert.ToDecimal(PerAnswerCall);
                        _PerAbandonCalls1 += Convert.ToDecimal(PerAbandonCalls);

                        _TotalAgentTime += Convert.ToDouble(TotalAgentTime);
                        _TotalACDTime += Convert.ToDouble(TotalACDTime);


                        ACDcalls1 = Convert.ToInt32(ACDcalls);
                        SLAPer1 = Convert.ToDecimal(PerWithinServiceLevel);


                        TotalServiceLevelCalls += (SLAPer1 * ACDcalls1 / 100);

                        count++;

                    }

                    _AverageACDTime = TimeSpan.FromSeconds(_AverageACDTime.TotalSeconds / ReportEntityList.Count);
                    _AvgWaitAbandonedTime = TimeSpan.FromSeconds(_AvgWaitAbandonedTime.TotalSeconds / ReportEntityList.Count);
                    _AvgWaitTime = TimeSpan.FromSeconds(_AvgWaitTime.TotalSeconds / ReportEntityList.Count);
                    _TotalRingDurationAnswerCalls = TimeSpan.FromSeconds(_TotalRingDurationAnswerCalls.TotalSeconds / ReportEntityList.Count);

                    //  var strPerAnswerCall1 = Math.Round(_PerAnswerCall1 / ReportEntityList.Count,2).ToString();

                    var strPerAnswerCall1 = Math.Round((Convert.ToDecimal(_ACDcalls) / _TotalCalls) * 100, 2).ToString();

                    var strPerAbandonCalls1 = Math.Round((Convert.ToDecimal(_Abandoncalls) / _TotalCalls) * 100, 2).ToString();
                    // var strPerACDTime = Math.Round(_PerACDTime / ReportEntityList.Count,2).ToString();

                    var strPerACDTime = Math.Round((_TotalACDTime * 100 / _TotalAgentTime), 2).ToString();


                    var strSLAPer = Math.Round(TotalServiceLevelCalls / _ACDcalls * 100, 2).ToString();


                    var maxdelayTime = TimeSpan.FromSeconds(_maxdelay).ToString(@"hh\:mm\:ss"); ;

                    Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDcalls.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(strPerAnswerCall1.ToString()));

                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_AverageACDTime.ToString(@"hh\:mm\:ss")));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_Abandoncalls.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(strPerAbandonCalls1.ToString()));


                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_AvgWaitAbandonedTime.ToString(@"hh\:mm\:ss")));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_TotalCalls.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_AvgWaitTime.ToString(@"hh\:mm\:ss")));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_Flowin.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_Flowout.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_TotalRingDurationAnswerCalls.ToString(@"hh\:mm\:ss")));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(strSLAPer.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(maxdelayTime));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(strPerACDTime.ToString()));

                    document.Add(Datatable);
                }

                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string Generate_DEKRA_QueueAnalysisReport(string ReportName, List<ReportQueueAnalysisEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                // ReportName = "Queue Analysis Report ";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                SubSectionHeadertable = new PdfPTable(1);
                SubSectionHeadertable.TotalWidth = 782f;
                SubSectionHeadertable.LockedWidth = true;
                SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                //phrase = new Phrase();
                ////     phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                ////     phrase.Add(new Chunk(ReportEntityLists[0].StartDate, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                //cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                //cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                //cell.PaddingTop = 10f;
                //cell.PaddingBottom = 0f;
                //SubSectionHeadertable.AddCell(cell);
                //document.Add(SubSectionHeadertable);

                Datatable = new PdfPTable(7);
                Datatable.TotalWidth = 782f;
                Datatable.LockedWidth = true;
                Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                Datatable.SetWidths(new float[] { 1.5f, 2.5f, 1f, 1f, 1f, 1.5f, 1.5f });
                Datatable.SpacingBefore = 16f;

                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queue Number"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queue Name"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Total Calls"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Total Answered"));

                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("ABND. Calls"));
                if (ReportEntityList != null && ReportEntityList.Count > 0)
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("ABND. Over " + ReportEntityList[0].AbandonedThreshold + " Secs"));
                else
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("ABND. Over n Secs"));
                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Calls Not Accepted"));
               



                int _ACDcalls = 0;
                int _ACDnotaccepted = 0;
                int _Abandoncalls = 0;
                int _AbandoncallsAfter = 0;
                int _TotalCalls = 0;
               

                
              

                if (ReportEntityList.Count > 0)
                {
                    //  List<ReportQueueAnalysisEntity> ReportEntityGroupedList = ReportEntityList.Select(y => y.Title).ToList();

                    int count = 0;
                    foreach (var obj in ReportEntityList)
                    {

                        //  ReportQueueAnalysisEntity obj = ReportEntityList[];
                        if (obj.TotalAnswered != "")
                        {
                            _ACDcalls += Convert.ToInt32(obj.TotalAnswered);
                        }
                        if (obj.TotalCallsNotAccepted != "")
                        {
                            _ACDnotaccepted += Convert.ToInt32(obj.TotalCallsNotAccepted);
                        }
                        if (obj.TotalAbanodoned != "")
                        {
                            _Abandoncalls += Convert.ToInt32(obj.TotalAbanodoned);
                        }
                        if (obj.TotalAbanodonedAfter != "")
                        {
                            _AbandoncallsAfter += Convert.ToInt32(obj.TotalAbanodonedAfter);
                        }
                        if (obj.TotalCalls != "")
                        {
                            _TotalCalls += Convert.ToInt32(obj.TotalCalls);
                        }

                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.GroupNumber));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Title));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalCalls == null || obj.TotalCalls.Trim().Length == 0 ? "0" : obj.TotalCalls));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalAnswered == null || obj.TotalAnswered.Trim().Length == 0 ? "0" : obj.TotalAnswered));

                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalAbanodoned == null || obj.TotalAbanodoned.Trim().Length == 0 ? "0" : obj.TotalAbanodoned));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalAbanodonedAfter == null || obj.TotalAbanodonedAfter.Trim().Length == 0 ? "0" : obj.TotalAbanodonedAfter));
                        Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TotalCallsNotAccepted == null || obj.TotalCallsNotAccepted.Trim().Length == 0 ? "0" : obj.TotalCallsNotAccepted));


                        if (count == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(_TotalCalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(_ACDcalls + ""));

                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(_Abandoncalls + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(_AbandoncallsAfter + ""));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(_ACDnotaccepted + ""));
                        }
                        
                        
                        count++;

                    }

                    document.Add(Datatable);
                }

                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateYBVCallsReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {

                    Datatable = new PdfPTable(5);
                    Datatable.TotalWidth = 420;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 2f, 2f, 2f, 2f });
                    Datatable.SpacingBefore = 15f;
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(ReportEntityList[0].FirstCountHeader));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(ReportEntityList[0].SecondCountHeader));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(ReportEntityList[0].ThirdCountHeader));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                    int TransferCount = 0;
                    int FirstCount = 0;
                    int SecondCount = 0;
                    int ThirdCount = 0;
                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportYBVCallsEntity obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Date));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.FirstCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.SecondCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ThirdCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                            TransferCount += obj.TransferCount;
                            FirstCount += obj.FirstCount;
                            SecondCount += obj.SecondCount;
                            ThirdCount += obj.ThirdCount;

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Date));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.FirstCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.SecondCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ThirdCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                            TransferCount += obj.TransferCount;
                            FirstCount += obj.FirstCount;
                            SecondCount += obj.SecondCount;
                            ThirdCount += obj.ThirdCount;
                        }
                    }
                    Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(FirstCount.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(SecondCount.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ThirdCount.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(TransferCount.ToString()));
                    document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateYBVCallsByIntervalReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                                 .Select(y => new ReportYBVCallsEntity
                                 {
                                     Date = y.First().Date,
                                     TransferCount = y.Sum(d => d.TransferCount),
                                 }).ToList();

                    List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 420f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(2);
                        Datatable.TotalWidth = 420f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportYBVCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));

                                ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TransferCount.ToString()));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                            }

                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateYBVCutOffCallsReport(string ReportName, List<ReportYBVCutOffCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";

                Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;
                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                                                               //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportYBVCutOffCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title)
                  .Select(y => new ReportYBVCutOffCallsEntity
                  {
                      Title = y.First().Title,
                      Duration = Convert.ToInt32(y.Average(d => d.Duration)),
                      CallCount = y.Count()
                  }).ToList();


                    List<List<ReportYBVCutOffCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title).Select(y => y.ToList()).ToList();
                    foreach (List<ReportYBVCutOffCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths
                        SubSectionHeadertable.SpacingBefore = 0f;
                        SubSectionHeadertable.SpacingAfter = 0f;
                        phrase = new Phrase();
                        phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Title, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(5);
                        Datatable.TotalWidth = 535f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("StartTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Ring Duration"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Callers Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Called Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Group Number"));
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportYBVCutOffCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.StartTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.DDI));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.GroupNumber.ToString()));

                                ReportYBVCutOffCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Title == obj.Title);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total: " + obj1.CallCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.StartTime));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.CLI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.DDI));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.GroupNumber.ToString()));
                            }
                        }
                        document.Add(Datatable);
                    }

                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateExternalRoutingCallsReport(string ReportName, List<ReportExternalRoutingCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportExternalRoutingCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.DeviceID }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportExternalRoutingCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 535f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Company Name: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].DeviceID, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        cell.PaddingLeft = 55f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(5);
                        Datatable.TotalWidth = 420;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f });
                        Datatable.SpacingBefore = 15f;
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Midnight-9AM"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("9AM-5PM"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("5PM-Midnight"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(ReportEntityList[0].FirstCountHeader));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(ReportEntityList[0].SecondCountHeader));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell(ReportEntityList[0].ThirdCountHeader));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                        int TransferCount = 0;
                        int FirstCount = 0;
                        int SecondCount = 0;
                        int ThirdCount = 0;
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportExternalRoutingCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Date));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.FirstCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.SecondCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ThirdCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                                TransferCount += obj.TransferCount;
                                FirstCount += obj.FirstCount;
                                SecondCount += obj.SecondCount;
                                ThirdCount += obj.ThirdCount;

                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Date));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.FirstCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.SecondCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ThirdCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                                TransferCount += obj.TransferCount;
                                FirstCount += obj.FirstCount;
                                SecondCount += obj.SecondCount;
                                ThirdCount += obj.ThirdCount;
                            }
                        }
                        Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(FirstCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(SecondCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ThirdCount.ToString()));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(TransferCount.ToString()));
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateExternalRoutingCallsByIntervalReport(string ReportName, List<ReportExternalRoutingCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);
                if (ReportEntityList.Count > 0)
                {
                    List<ReportExternalRoutingCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.DeviceID })
                                 .Select(y => new ReportExternalRoutingCallsEntity
                                 {
                                     Date = y.First().Date,
                                     TransferCount = y.Sum(d => d.TransferCount),
                                 }).ToList();

                    List<List<ReportExternalRoutingCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.DeviceID }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportExternalRoutingCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 420f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        phrase.Add(new Chunk("     Company Name: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].DeviceID, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(2);
                        Datatable.TotalWidth = 420f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Oveflow Count"));

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportExternalRoutingCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));

                                ReportExternalRoutingCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TransferCount.ToString()));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                            }

                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }
                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentConsolidatedBaordReport(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {
                //  ReportName = "Consolidated Agent Report by Queue";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Document document = new Document(new Rectangle(288f, 144f), 10, 10, 10, 10);
                document.SetPageSize(PageSize.A4.Rotate());
                //Document  = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);


                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);
                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
                .Select(y => new ReportAgentConsolidatedEntity
                {
                    AgentName = y.First().AgentName,
                    GroupName = y.First().GroupName,
                    LogInTime = y.Min(c => c.LogInTime),
                    LogOutTime = y.Min(c => c.LogOutTime),
                    TotalLoggedInTime = y.Sum(c => c.TotalLoggedInTime),
                    ACDBusyTime = y.Sum(c => c.ACDBusyTime),
                    NonACDBusyTime = y.Sum(c => c.NonACDBusyTime),
                    ClerikalBusyTime = y.Sum(c => c.ClerikalBusyTime),
                    TempAbsTime = y.Sum(c => c.TempAbsTime),
                    UnHoldTime = y.Sum(c => c.UnHoldTime),
                    LongestUnHoldTime = y.Max(c => c.LongestUnHoldTime),
                    TotalIdleTime = y.Sum(c => c.TotalIdleTime),
                    ACDBusyCount = y.Sum(c => c.ACDBusyCount),
                    LoggedInCount = y.Sum(c => c.LoggedInCount),
                    LoggedOutCount = y.Sum(c => c.LoggedOutCount),
                    ClerikalBusyCount = y.Sum(c => c.ClerikalBusyCount),
                    TempAbsCount = y.Sum(c => c.TempAbsCount),
                    OutBoundCallCount = y.Sum(c => c.OutBoundCallCount),
                    TransferCount = y.Sum(c => c.TransferCount),
                    UnHoldCount = y.Sum(c => c.UnHoldCount),
                    HangUpCount = y.Sum(c => c.HangUpCount),
                    ACDCallnotaccept = y.Sum(c => c.ACDCallnotaccept),


                }).ToList();
                    List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();



                    foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 782f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 782 });//fixed widths

                        phrase = new Phrase();

                        phrase.Add(new Chunk("Agent: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].AgentName, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(15);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 2f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 0.5f, 1f, 1f, 1f, 0.5f, 1f });
                        Datatable.SpacingBefore = 15f;



                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellNotRotated("Queue Name"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Time Agent\nLogged In"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Time\nUnavailable"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Wrap-up\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg. Wrap-up\nTime"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Available\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nHandled"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Avg.\nTalk Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total\nTalk Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Transferred"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("AVG. Hold\nTime"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Longest Hold\nTime"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Hold\nTime"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Calls Out"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Occupancy %"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Idle Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Calls\nNot Accepted"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Logged Out\nTime"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCellRotated("Total Time\nLogged In"));

                        Double _TempAbsTime = 0;
                        Double _ClerikalBusyTime = 0;
                        Double _AvailableTime = 0;
                        Double _TotalLoggedInTime = 0;
                        Double _ACDBusyCount = 0;
                        Double _ACDBusyTime = 0;
                        Double _TransferCount = 0;
                        Double _UnHoldTime = 0;
                        Double _OutBoundCallCount = 0;

                        Double _TotalIdleTime = 0;
                        Double _HangUpCount = 0;
                        Double _Occupancy = 0;
                        Double _OccupancyCount = 0;
                        Double _AvgACDBusy = 0;
                        Double _AvgUnHold = 0;
                        Double _AvgClerikalBusy = 0;
                        TimeSpan _LogInTime = TimeSpan.MaxValue;
                        TimeSpan _LogOutTime = TimeSpan.MaxValue;
                        Double _LongestUnHoldTime = 0;
                        Double _ACDnotacceptCount = 0;

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {

                            ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                            string TotalLoggedInTime = "";//N/A
                            string AvailableTime = "";//N/A
                            string Occupancy = "";//N/A
                            string LogInTime = "";//N/A
                            string LogOutTime = "";
                            string AvgClerikalBusy = "00:00:00";
                            string AvgUnHold = "00:00:00";
                            string AvgACDBusy = "00:00:00";


                            if (obj.TotalLoggedInTime != 0)
                            {
                                //AvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime).ToString(@"hh\:mm\:ss");
                                AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                                Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                                //Occupancy = Math.Round((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / WorkingHours / 36, 2).ToString();
                                TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                                _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                                _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                                _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                                _OccupancyCount++;
                            }
                            if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                            {
                                LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                                //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                                if (_LogInTime > obj.LogInTime)
                                    _LogInTime = obj.LogInTime;
                            }

                            if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                            {
                                LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                                if (_LogOutTime > obj.LogOutTime)
                                    _LogOutTime = obj.LogOutTime;
                            }
                            if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                            {
                                _LongestUnHoldTime = obj.LongestUnHoldTime;
                            }
                            if (obj.ClerikalBusyCount != 0)
                            {
                                AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                                _AvgClerikalBusy = _AvgClerikalBusy + Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount);

                            }
                            if (obj.ACDBusyCount != 0)
                            {
                                AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                                _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                            }

                            if (obj.UnHoldCount != 0)
                            {
                                AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                                _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                            }
                            _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                            _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                            _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                            _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                            _TransferCount = _TransferCount + obj.TransferCount;
                            _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                            _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                            _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                            _HangUpCount = _HangUpCount + obj.HangUpCount;
                            _ACDnotacceptCount = _ACDnotacceptCount + obj.ACDCallnotaccept;
                            if (i == ReportEntityLists.Count - 1)
                            {
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.GroupName));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogInTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgClerikalBusy));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvailableTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDBusyCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgACDBusy));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(AvgUnHold));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.OutBoundCallCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(Occupancy));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ACDCallnotaccept.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(LogOutTime));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(TotalLoggedInTime));

                                //Combined Totals 
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));

                                if (_LogInTime == TimeSpan.MaxValue)
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                }
                                else
                                {
                                    //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss")));
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                }
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgClerikalBusy / ReportEntityLists.Count)));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDBusyCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_TransferCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count)));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime)));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime)));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OutBoundCallCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : ""));
                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(_ACDnotacceptCount.ToString()));
                                if (_LogOutTime == TimeSpan.MaxValue)
                                {
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                }
                                else
                                {
                                    //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss")));
                                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));
                                }

                                //Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(""));

                            }
                            else
                            {

                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.GroupName));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(LogInTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgClerikalBusy));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(AvailableTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDBusyCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgACDBusy));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(AvgUnHold));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime)));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime)));
                                //Datatable.AddCell(ReportsCommonMethods.RowCell(obj.OutBoundCallCount.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(Occupancy));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ACDCallnotaccept.ToString()));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(LogOutTime));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(TotalLoggedInTime));

                            }
                        }

                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAHTCallsReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {
                    Datatable = new PdfPTable(5);
                    Datatable.TotalWidth = 420;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f });
                    Datatable.SpacingBefore = 15f;
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Midnight-9AM"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("9AM-5PM"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("5PM-Midnight"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                    int TransferCount = 0;
                    int FirstCount = 0;
                    int SecondCount = 0;
                    int ThirdCount = 0;
                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        ReportYBVCallsEntity obj = ReportEntityList[i];

                        if (i == ReportEntityList.Count - 1)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.Date));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.FirstCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.SecondCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.ThirdCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));
                            TransferCount += obj.TransferCount;
                            FirstCount += obj.FirstCount;
                            SecondCount += obj.SecondCount;
                            ThirdCount += obj.ThirdCount;

                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.Date));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.FirstCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.SecondCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.ThirdCount.ToString()));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                            TransferCount += obj.TransferCount;
                            FirstCount += obj.FirstCount;
                            SecondCount += obj.SecondCount;
                            ThirdCount += obj.ThirdCount;
                        }
                    }
                    Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(FirstCount.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(SecondCount.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(ThirdCount.ToString()));
                    Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(TransferCount.ToString()));
                    document.Add(Datatable);
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAHTCallsByIntervalReport(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);


                if (ReportEntityList.Count > 0)
                {
                    List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                                 .Select(y => new ReportYBVCallsEntity
                                 {
                                     Date = y.First().Date,
                                     TransferCount = y.Sum(d => d.TransferCount),
                                 }).ToList();

                    List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date }).Select(y => y.ToList()).ToList();

                    //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                    foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        SubSectionHeadertable = new PdfPTable(1);
                        SubSectionHeadertable.TotalWidth = 420f;
                        SubSectionHeadertable.LockedWidth = true;
                        SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                        phrase = new Phrase();
                        phrase.Add(new Chunk("Date: ", FontFactory.GetFont("Arial", 14, Font.BOLD, Color.BLACK)));
                        phrase.Add(new Chunk(ReportEntityLists[0].Date, FontFactory.GetFont("Arial", 14, Font.NORMAL, Color.BLACK)));
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        cell.PaddingTop = 10f;
                        cell.PaddingBottom = 0f;
                        SubSectionHeadertable.AddCell(cell);
                        document.Add(SubSectionHeadertable);

                        Datatable = new PdfPTable(2);
                        Datatable.TotalWidth = 420f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 1f, 1f });
                        Datatable.SpacingBefore = 15f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Transfer Count"));

                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            ReportYBVCallsEntity obj = ReportEntityLists[i];

                            if (i == ReportEntityLists.Count - 1)
                            {

                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCell(obj.TransferCount.ToString()));

                                ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);
                                Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored("Total"));
                                Datatable.AddCell(ReportsCommonMethods.BottomRowCellBGColored(obj1.TransferCount.ToString()));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval)));
                                Datatable.AddCell(ReportsCommonMethods.RowCell(obj.TransferCount.ToString()));
                            }

                        }
                        document.Add(Datatable);
                    }
                }
                else
                {
                    document.Add(ReportsCommonMethods.EmptyDataTable());
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallsbyPrimaryReasonReport(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallsbyPrimaryReasonEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                // ReportName = "Total Calls by Reason";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;
                PdfPTable SubSectionHeadertable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 420f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 420 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                List<List<ReportCallsbyPrimaryReasonEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Board }).Select(y => y.ToList()).ToList();

                foreach (List<ReportCallsbyPrimaryReasonEntity> ReportEntityLists in ReportEntityGroupedList)
                {

                    SubSectionHeadertable = new PdfPTable(1);
                    SubSectionHeadertable.TotalWidth = 420f;
                    SubSectionHeadertable.LockedWidth = true;
                    SubSectionHeadertable.SetTotalWidth(new float[] { 420 });//fixed widths

                    phrase = new Phrase();
                    phrase.Add(new Chunk("Queue: ", FontFactory.GetFont("Arial", 16, Font.BOLD, Color.BLACK)));
                    phrase.Add(new Chunk(ReportEntityLists[0].Board, FontFactory.GetFont("Arial", 16, Font.NORMAL, Color.BLACK)));
                    cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                    cell.VerticalAlignment = PdfCell.ALIGN_CENTER;
                    cell.PaddingTop = 15f;
                    //cell.PaddingBottom = 0f;
                    SubSectionHeadertable.AddCell(cell);
                    document.Add(SubSectionHeadertable);

                    Datatable = new PdfPTable(3);
                    Datatable.TotalWidth = 420;
                    Datatable.LockedWidth = true;
                    Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                    Datatable.SetWidths(new float[] { 0.3f, 2f, 1f });
                    //Datatable.SpacingBefore = 5f;

                    Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Reason for call"));
                    Datatable.AddCell(ReportsCommonMethods.HeaderRowCell("Total"));

                    //List<List<ReportCallsbyPrimaryReasonEntity>> ReportPrimaryOutcomeGroupedList = ReportEntityLists.GroupBy(x => new { x.PrimaryOutcome }).Select(y => y.ToList()).ToList();

                    string PrimaryOutcome = "";
                    string SecondaryOutcome = "";

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {

                        if (PrimaryOutcome != ReportEntityLists[i].PrimaryOutcome)
                        {
                            SecondaryOutcome = string.Empty;
                            Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                            Datatable.AddCell(ReportsCommonMethods.RowCell(""));

                            Datatable.AddCell(ReportsCommonMethods.RowCell(""));
                            if (SecondaryOutcomeEnable)
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCellBold(ReportEntityLists[i].PrimaryOutcome));
                                Datatable.AddCell(ReportsCommonMethods.RowCellBold(ReportEntityLists[i].PrimaryCount.ToString()));
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCellBold(ReportEntityLists[i].PrimaryOutcome));
                                Datatable.AddCell(ReportsCommonMethods.RowCellBold(ReportEntityLists[i].PrimaryCount.ToString()));

                                List<ReportCallsbyPrimaryReasonEntity> ReportEntityGroupedList2 = ReportEntityList.Where(x => x.PrimaryOutcome == ReportEntityLists[i].PrimaryOutcome && x.Board == ReportEntityLists[i].Board).GroupBy(x => new { x.Board, x.AgentName })
                                .Select(y => new ReportCallsbyPrimaryReasonEntity
                                {
                                    SecondaryCount = y.Sum(d => d.SecondaryCount),
                                    AgentName = y.First().AgentName,

                                }).ToList();
                                foreach (ReportCallsbyPrimaryReasonEntity agententity in ReportEntityGroupedList2)
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell(agententity.AgentName));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(agententity.SecondaryCount + ""));
                                }
                            }

                        }

                        if (SecondaryOutcomeEnable)
                        {
                            if (SecondaryOutcome != ReportEntityLists[i].SecondaryOutcome)
                            {
                                SecondaryOutcome = ReportEntityLists[i].SecondaryOutcome;
                                List<ReportCallsbyPrimaryReasonEntity> ReportEntityGroupedList2 = ReportEntityList.Where(x => x.PrimaryOutcome == ReportEntityLists[i].PrimaryOutcome && x.SecondaryOutcome == ReportEntityLists[i].SecondaryOutcome && x.Board == ReportEntityLists[i].Board).GroupBy(x => new { x.Board, x.SecondaryOutcome })
                               .Select(y => new ReportCallsbyPrimaryReasonEntity
                               {
                                   SecondaryCount = y.Sum(d => d.SecondaryCount),
                                   SecondaryOutcome = y.First().SecondaryOutcome,

                               }).ToList();
                                if (!string.IsNullOrEmpty(ReportEntityLists[i].SecondaryOutcome))
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell2(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell2(ReportEntityLists[i].SecondaryOutcome + " (" + ReportEntityGroupedList2[0].SecondaryCount.ToString() + ")"));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(""));

                                    Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell(ReportEntityLists[i].AgentName));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportEntityLists[i].SecondaryCount.ToString()));
                                }
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell(""));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftPaddingCell(ReportEntityLists[i].AgentName));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell(ReportEntityLists[i].SecondaryCount.ToString()));
                            }
                        }
                        //else
                        //{
                        //    Datatable.AddCell(ReportsCommonMethods.RowLeftCell("N/A"));
                        //    Datatable.AddCell(ReportsCommonMethods.RowCell(ReportEntityLists[i].SecondaryCount.ToString()));
                        //}

                        PrimaryOutcome = ReportEntityLists[i].PrimaryOutcome;

                    }
                    document.Add(Datatable);
                }

                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallBreakdownbyPrimaryReasonReport(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallBreakdownbyPrimaryReasonEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, List<csPrimaryOutcomeData> ListPrimaryOutComes)
        {
            try
            {
                // ReportName = "Breakdown by Reason Codes";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                //Rectangle pageSize = new Rectangle(500f, 600f);
                Document document = new Document(PageSize.A4.Rotate(), 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 782f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 782 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);

                if (ReportEntityList.Count > 0)
                {

                    List<List<ReportCallBreakdownbyPrimaryReasonEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Board }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportCallBreakdownbyPrimaryReasonEntity> ReportBoardEntityList in ReportEntityGroupedList)
                    {                       
                        Datatable = new PdfPTable(6);
                        Datatable.TotalWidth = 782f;
                        Datatable.LockedWidth = true;
                        Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                        Datatable.SetWidths(new float[] { 3.5f, 1f, 1f, 1.5f, 1.5f, 1.5f });
                        Datatable.SpacingBefore = 30f;
                        Datatable.SpacingAfter = 0f;

                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellBOLD(ReportBoardEntityList[0].Board));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Code"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Instances"));
                        //Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Duration"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Date/Time"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Caller Number"));
                        Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Agent"));

                        List<List<ReportCallBreakdownbyPrimaryReasonEntity>> ReportPrimaryOutcomeGroupedList = ReportBoardEntityList.GroupBy(x => new { x.PrimaryOutcome }).Select(y => y.ToList()).ToList();

                        for (int i = 0; i < ReportPrimaryOutcomeGroupedList.Count; i++)//foreach (List<ReportCallBreakdownbyPrimaryReasonEntity> ReportPrimaryOutcomeEntityList in ReportPrimaryOutcomeGroupedList)
                        {
                            List<ReportCallBreakdownbyPrimaryReasonEntity> ReportPrimaryOutcomeEntityList = ReportPrimaryOutcomeGroupedList[i];
                            string primaryoutcome = ReportPrimaryOutcomeEntityList[0].PrimaryOutcome;
                            csPrimaryOutcomeData objData = null;
                            List<csPrimaryOutcomeData> listPrimaryOutcomeData = ListPrimaryOutComes.Where(x => x.Title == primaryoutcome).ToList();
                            if (listPrimaryOutcomeData != null && listPrimaryOutcomeData.Count > 0)
                                objData = listPrimaryOutcomeData[0];
                            //int TotalDuration = (int)(ReportPrimaryOutcomeEntityList.Sum(x => x.Duration));
                            int TotalInstances = ReportPrimaryOutcomeEntityList.Count;
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellBold2(primaryoutcome));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(objData == null ? "N/A" : objData.Code));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(TotalInstances + ""));
                           // Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(ReportsCommonMethods.GetTimeFromSeconds(TotalDuration)));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(""));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(""));
                            Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(""));
                            if (SecondaryOutcomeEnable)
                            {
                                List<List<ReportCallBreakdownbyPrimaryReasonEntity>> ReportSecondaryOutcomeGroupedList = ReportPrimaryOutcomeEntityList.GroupBy(x => new { x.SecondaryOutcome }).Select(y => y.ToList()).ToList();

                                for(int j=0;j< ReportSecondaryOutcomeGroupedList.Count;j++)// foreach (List<ReportCallBreakdownbyPrimaryReasonEntity> ReportSecondaryOutcomeEntityList in ReportSecondaryOutcomeGroupedList)
                                {
                                    List<ReportCallBreakdownbyPrimaryReasonEntity> ReportSecondaryOutcomeEntityList = ReportSecondaryOutcomeGroupedList[j];
                                   // TotalDuration = (int)(ReportSecondaryOutcomeEntityList.Sum(x => x.Duration));
                                    TotalInstances = ReportSecondaryOutcomeEntityList.Count;
                                    csSecondaryOutcomeData objDataSecondary = null;
                                    string secondaryoutcome = ReportSecondaryOutcomeEntityList[0].SecondaryOutcome;
                                    if (objData != null)
                                    {
                                        List<csSecondaryOutcomeData> listSecondaryOutcomeData = objData.SecondaryOutComes.Where(x => x.Title == secondaryoutcome).ToList();
                                        if (listSecondaryOutcomeData != null && listSecondaryOutcomeData.Count > 0)
                                            objDataSecondary = listSecondaryOutcomeData[0];
                                    }
                                  //  Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub(secondaryoutcome));
                                  //  Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(objDataSecondary == null ? "N/A" : objDataSecondary.Code));
                                  //  Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(TotalInstances + ""));
                                  ////  Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(ReportsCommonMethods.GetTimeFromSeconds(TotalDuration)));
                                  //  Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(""));
                                  //  Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(""));
                                  //  Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(""));

                                    for(int jj= 0;jj < ReportSecondaryOutcomeEntityList.Count;jj++)//  ReportCallBreakdownbyPrimaryReasonEntity obj in ReportSecondaryOutcomeEntityList)
                                    {
                                        ReportCallBreakdownbyPrimaryReasonEntity obj = ReportSecondaryOutcomeEntityList[jj];
                                        if (jj == 0)
                                        {
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub(secondaryoutcome));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(objDataSecondary == null ? "N/A" : objDataSecondary.Code));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(TotalInstances + ""));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.StartTime));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.CLI));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.Name));
                                        }
                                        else
                                        {
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub(""));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(""));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(""));
                                            // Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.StartTime));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.CLI));
                                            Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.Name));
                                        }
                                    }
                                }

                            }
                            else
                            {
                                for (int jj = 0; jj < ReportPrimaryOutcomeEntityList.Count; jj++)
                                //   foreach (ReportCallBreakdownbyPrimaryReasonEntity obj in ReportPrimaryOutcomeEntityList)
                                {
                                    ReportCallBreakdownbyPrimaryReasonEntity obj = ReportPrimaryOutcomeEntityList[jj];                                  
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(""));
                                    //  Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration)));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.StartTime));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.CLI));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(obj.Name));
                                }
                            }
                            document.Add(Datatable);                           
                        }

                    }
                }


                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string Generate_DEKRA_CallBreakdownbyPrimaryReasonReport(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, List<csPrimaryOutcomeData> ListPrimaryOutComes)
        {
            try
            {
                //SecondaryOutcomeEnable = false;
                // ReportName = "Breakdown by Reason Codes";
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".pdf";
                //Rectangle pageSize = new Rectangle(500f, 600f);
               // Document document = new Document(pageSize, 0f, 0f, 30f, 30f);
                 Document document = new Document(PageSize.A4, 0f, 0f, 30f, 30f);
                FileStream output = new FileStream(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), FileMode.Create);
                Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, Color.BLACK);
                PdfWriter writer = PdfWriter.GetInstance(document, output);
                Phrase phrase = null;
                PdfPCell cell = null;
                PdfPTable SubSectionHeadertable = null;
                PdfPTable Headertable = null;
                PdfPTable Datatable = null;

                document.Open();
                Headertable = new PdfPTable(1);
                Headertable.TotalWidth = 535f;
                Headertable.LockedWidth = true;
                Headertable.SetTotalWidth(new float[] { 535 });//fixed widths
                //Headertable.SetWidths(new float[] { 1f, 7f });//relative column widths
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                cell = ReportsCommonMethods.ImageCell("~/" + ReportsDALObj.GetCompanyLogo(), 50f, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_MIDDLE;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk(ReportName, FontFactory.GetFont("Arial", 18, Font.BOLD, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_TOP;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                phrase.Add(new Chunk("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern), FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Time Between: " + timeFrom + "  and: " + timeTo, FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                phrase = new Phrase();
                phrase.Add(new Chunk("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "", FontFactory.GetFont("Arial", 10, Font.NORMAL, Color.BLACK)));
                cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                Headertable.AddCell(cell);

                document.Add(Headertable);
                bool isHeaderCreated=false;
                if (ReportEntityList.Count > 0)
                {

                    List<List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentExtension }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportBoardEntityList in ReportEntityGroupedList)
                    {
                        isHeaderCreated = false;
                        int _TotalInstances = 0;
                        int _TotalPrimaryDuration = 0;

                        //SubSectionHeadertable = new PdfPTable(1);
                        //SubSectionHeadertable.TotalWidth = 535f;
                        //SubSectionHeadertable.LockedWidth = true;
                        ////SubSectionHeadertable.SpacingBefore = 10f;
                        ////SubSectionHeadertable.SpacingAfter = 0f;
                        //SubSectionHeadertable.SetTotalWidth(new float[] { 535 });//fixed widths

                        //phrase = new Phrase();
                        //phrase.Add(new Chunk(ReportBoardEntityList[0].AgentExtension + "  " + ReportBoardEntityList[0].AgentName, FontFactory.GetFont("Arial", 16, Font.BOLD, Color.BLACK)));

                        //cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        //cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        ////cell.Border = Rectangle.BOTTOM_BORDER;
                        //cell.PaddingTop = 30f;
                        //cell.PaddingBottom = 0f;
                        //cell = ReportsCommonMethods.PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
                        //cell.VerticalAlignment = PdfCell.ALIGN_BOTTOM;
                        //SubSectionHeadertable.AddCell(cell);
                        //document.Add(SubSectionHeadertable);

                        List<List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA>> ReportPrimaryOutcomeGroupedList = ReportBoardEntityList.GroupBy(x => new { x.PrimaryOutcome }).Select(y => y.ToList()).ToList();

                        for (int i = 0; i < ReportPrimaryOutcomeGroupedList.Count; i++)// List <ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportPrimaryOutcomeEntityList in ReportPrimaryOutcomeGroupedList)
                        {
                            List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportPrimaryOutcomeEntityList = ReportPrimaryOutcomeGroupedList[i];
                            if (!isHeaderCreated)
                            {
                                isHeaderCreated = true;
                                Datatable = new PdfPTable(5);
                                Datatable.TotalWidth = 535f;
                                Datatable.LockedWidth = true;
                                Datatable.HorizontalAlignment = Element.ALIGN_CENTER;
                                Datatable.SetWidths(new float[] { 3f, 1f, 1f, 1f, 1f });
                                Datatable.SpacingBefore = 30f;
                                Datatable.SpacingAfter = 0f;

                                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCellBOLD(ReportBoardEntityList[0].AgentExtension + "  " + ReportBoardEntityList[0].AgentName));
                                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Code"));
                                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Instances"));
                                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("Total Duration"));
                                Datatable.AddCell(ReportsCommonMethods.HeaderRowLeftCell("AVG. Duration"));
                            }
                            string primaryoutcome = ReportPrimaryOutcomeEntityList[0].PrimaryOutcome;
                            csPrimaryOutcomeData objData = null;
                            List<csPrimaryOutcomeData> listPrimaryOutcomeData = ListPrimaryOutComes.Where(x => x.Title == primaryoutcome).ToList();
                            if (listPrimaryOutcomeData != null && listPrimaryOutcomeData.Count > 0)
                                objData = listPrimaryOutcomeData[0];

                            _TotalInstances += ReportPrimaryOutcomeEntityList[0].PrimaryCount;
                            _TotalPrimaryDuration += ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration;

                            if (i == (ReportPrimaryOutcomeGroupedList.Count - 1) && !SecondaryOutcomeEnable)
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCellBoldBottom2(ReportPrimaryOutcomeEntityList[0].PrimaryOutcome));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCellBottom2(objData == null ? "N/A" : objData.Code));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCellBottom2(ReportPrimaryOutcomeEntityList[0].PrimaryCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCellBottom2(ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration)));
                                if (ReportPrimaryOutcomeEntityList[0].PrimaryCount > 0)
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellBottom2(ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration / ReportPrimaryOutcomeEntityList[0].PrimaryCount)));
                                }
                                else
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellBottom2(ReportsCommonMethods.GetTimeFromSeconds(0)));
                                }
                            }
                            else
                            {
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCellBold2(ReportPrimaryOutcomeEntityList[0].PrimaryOutcome));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(objData == null ? "N/A" : objData.Code));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(ReportPrimaryOutcomeEntityList[0].PrimaryCount + ""));
                                Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration)));
                                if (ReportPrimaryOutcomeEntityList[0].PrimaryCount > 0)
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration / ReportPrimaryOutcomeEntityList[0].PrimaryCount)));
                                }
                                else
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell2(ReportsCommonMethods.GetTimeFromSeconds(0)));
                                }
                            }

                            if (SecondaryOutcomeEnable)
                            {
                                 List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportSecondaryOutcomeGroupedList = ReportEntityList.Where(x => x.PrimaryOutcome == ReportPrimaryOutcomeEntityList[0].PrimaryOutcome && x.AgentExtension == ReportBoardEntityList[0].AgentExtension).ToList();
                                
                                foreach (ReportCallBreakdownbyPrimaryReasonEntity_DEKRA ReportSecondaryOutcomeEntityList in ReportSecondaryOutcomeGroupedList)
                                {
                                    csSecondaryOutcomeData objDataSecondary = null;
                                    string secondaryoutcome = ReportSecondaryOutcomeEntityList.SecondaryOutcome;
                                    if (objData != null)
                                    {
                                        List<csSecondaryOutcomeData> listSecondaryOutcomeData = objData.SecondaryOutComes.Where(x => x.Title == secondaryoutcome).ToList();
                                        if (listSecondaryOutcomeData != null && listSecondaryOutcomeData.Count > 0)
                                            objDataSecondary = listSecondaryOutcomeData[0];
                                    }
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub(ReportSecondaryOutcomeEntityList.SecondaryOutcome));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(objDataSecondary == null ? "N/A" : objDataSecondary.Code));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(ReportSecondaryOutcomeEntityList.SecondaryCount + ""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(ReportsCommonMethods.GetTimeFromSeconds(ReportSecondaryOutcomeEntityList.SecondaryCallDuration)));
                                    if (ReportSecondaryOutcomeEntityList.SecondaryCount > 0)
                                    {
                                        Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(ReportsCommonMethods.GetTimeFromSeconds(ReportSecondaryOutcomeEntityList.SecondaryCallDuration / ReportSecondaryOutcomeEntityList.SecondaryCount)));
                                    }
                                    else
                                    {
                                        Datatable.AddCell(ReportsCommonMethods.RowLeftCellSub2(ReportsCommonMethods.GetTimeFromSeconds(0)));
                                    }
                                }
                                if (ReportSecondaryOutcomeGroupedList.Count > 0 && i != (ReportPrimaryOutcomeGroupedList.Count - 1))
                                {
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                    Datatable.AddCell(ReportsCommonMethods.RowLeftCell(""));
                                }
                            }
                        }
                        Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored2("Total"));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(""));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(_TotalInstances+""));
                        Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalPrimaryDuration)));
                        if (_TotalInstances > 0)
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(_TotalPrimaryDuration / _TotalInstances)));
                        }
                        else
                        {
                            Datatable.AddCell(ReportsCommonMethods.BottomRowLeftCellBGColored(ReportsCommonMethods.GetTimeFromSeconds(0)));
                        }
                        document.Add(Datatable);
                    }
                }


                document.Close();
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        //****************************************************************************//
        public static string GenerateCallsSummaryReportCSV(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";


                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                Headercell = ws.Cell(Row, 1).SetValue("Queues");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("Answered Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("ABND. Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("ABND. Calls(%)");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 6).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 7).SetValue("Longest Waiting");
                Headercell.Style.Font.Bold = true;


                List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                 .Select(y => new ReportCallsSummaryEntity
                 {

                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                     TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                     AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                     AVGWaitTime = y.Average(d => d.AVGWaitTime),
                     LongestWaitingTime = y.Max(d => d.LongestWaitingTime),

                 }).ToList();

                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportCallsSummaryEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.BoardTitle);
                    BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalAnsweredCalls.ToString());
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.TotalAbandonedCalls.ToString());
                    BodyCell = ws.Cell(Row, 5).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                    BodyCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime));
                    BodyCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));

                    if (i == ReportEntityList.Count - 1)
                    {
                        Row++;
                        ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                        IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 3).SetValue(obj1.TotalAnsweredCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 4).SetValue(obj1.TotalAbandonedCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 5).SetValue(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        Row++;
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallsSummaryReportCSV2(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {
                    var image = ws.AddPicture(ImageLocation);
                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                Headercell = ws.Cell(Row, 1).SetValue("Queues");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;
                string IsYBV = "1";// ConfigurationManager.AppSettings["IsYBV"];
                int currentCol = 2;
                if (IsYBV != "0")
                {
                    Headercell = ws.Cell(Row, ++currentCol).SetValue("Overflowed Out");
                    Headercell.Style.Font.Bold = true;
                }
                Headercell = ws.Cell(Row, ++currentCol).SetValue("Answered Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("ABND. Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("ABND. Calls(%)");
                Headercell.Style.Font.Bold = true;

                Headercell = ws.Cell(Row, ++currentCol).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("Longest Waiting");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("Shortest Waiting");
                Headercell.Style.Font.Bold = true;
              //  Headercell = ws.Cell(Row, ++currentCol).SetValue("Calls Directed to Voicmail");
              //  Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("Avg Logged-In Agents");
                Headercell.Style.Font.Bold = true;

                List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                 .Select(y => new ReportCallsSummaryEntity
                 {
                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalTransferredIn = y.Sum(d => d.TotalTransferredIn),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                     TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                     AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                     AVGWaitTime = y.Average(d => d.AVGWaitTime),
                     LongestWaitingTime = y.Max(d => d.LongestWaitingTime),
                     OverFlowInAnsweredCalls = y.Sum(d => d.OverFlowInAnsweredCalls),
                     OverFlowInAbndCalls = y.Sum(d => d.OverFlowInAbndCalls),
                     OverFlowInAbandonedCallsPercentage = y.Average(d => d.OverFlowInAbandonedCallsPercentage),
                     OverFlowInAVGWaitTime = y.Average(d => d.OverFlowInAVGWaitTime),
                     OverFlowInLongestWaitingTime = y.Max(d => d.OverFlowInLongestWaitingTime),
                     TotalYBVTansferredOut = y.Sum(d => d.TotalYBVTansferredOut),
                     // ShortestWaitingTime = y.Max(d => d.ShortestWaitingTime),
                     ShortestWaitingTime = y.Min(d => d.ShortestWaitingTime),
               //      VoicemailCall = y.Sum(d => d.VoicemailCall),
                     CallDays = y.Sum(d => d.CallDays),
                     LoginAgent = y.Sum(d => d.LoginAgent),
                     LoginDate = y.Sum(d => d.LoginDate),
                 }).ToList();
                double TotalLoginAgents = 0;
                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportCallsSummaryEntity obj = ReportEntityList[i];
                    if (obj.CallDays > 0)
                        TotalLoginAgents += (double)obj.LoginAgent / (double)obj.CallDays;
                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.BoardTitle);

                    BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                    //  BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalTransferredIn.ToString());
                    int currentCol1 = 2;
                    if (IsYBV != "0")
                    {
                        BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.TotalYBVTansferredOut.ToString());
                    }
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.TotalAnsweredCalls.ToString());
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.TotalAbandonedCalls.ToString());
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime));
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ShortestWaitingTime));
                 //   BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.VoicemailCall.ToString());
                    if (obj.CallDays > 0)
                        BodyCell = ws.Cell(Row, ++currentCol1).SetValue(Math.Round((double)obj.LoginAgent / (double)obj.CallDays).ToString());
                    else
                        BodyCell = ws.Cell(Row, ++currentCol1).SetValue("0");
                    if (i == ReportEntityList.Count - 1)
                    {
                        Row++;
                        ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                        IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                        int currentCol2 = 2;
                        if (IsYBV != "0")
                        {
                            FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.TotalYBVTansferredOut.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        }

                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.TotalAnsweredCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.TotalAbandonedCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.ShortestWaitingTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                  //      FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.VoicemailCall.ToString());
                  //      FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        if (obj1.CallDays > 0)
                            FooterCell = ws.Cell(Row, ++currentCol2).SetValue(Math.Round(TotalLoginAgents).ToString());
                        //FooterCell = ws.Cell(Row, ++currentCol2).SetValue(Math.Round((double)obj1.LoginAgent / (double)obj1.CallDays).ToString());
                        else
                            FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.VoicemailCall.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        Row++;
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateCallsSummaryReportExcel(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            //String file = @"d:\Output.csv";
            String file = HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + "output.csv");
            string FileName = "";
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue", "Total Calls", "Total Transferred In", "Overflowed Out", "Answered Calls", "ABND. Calls", "ABND. Calls(%)", "Avg. Wait Time", "Longest Waiting", "Shortest Waiting", "Avg Logged-In Agents" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList)
                {
                    String[] newLine = { col.BoardTitle, col.TotalCalls.ToString(), col.TotalTransferredIn.ToString(),col.TotalYBVTansferredOut.ToString(), col.TotalAnsweredCalls.ToString(), col.TotalAbandonedCalls.ToString(), col.AbandonedCallsPercentage.ToString(), ReportsCommonMethods.GetTimeFromSeconds(col.AVGWaitTime), ReportsCommonMethods.GetTimeFromSeconds(col.LongestWaitingTime), ReportsCommonMethods.GetTimeFromSeconds(col.ShortestWaitingTime), col.CallDays > 0 ? Math.Round((double)col.LoginAgent / (double)col.CallDays).ToString() : "0" };
                    output.AppendLine(string.Join(separator, newLine));
                }
                FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());





                //return file;












            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                // return null;
            }
            finally
            {

            }

            //string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";
            return FileName;
        }


        public static string GenerateBasicCallsReportCSV(string ReportName, List<ReportCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {
                    var image = ws.AddPicture(ImageLocation);
                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                Headercell = ws.Cell(Row, 1).SetValue("Queues");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;
                //string IsYBV = ConfigurationManager.AppSettings["IsYBV"];
                int currentCol = 2;

                Headercell = ws.Cell(Row, ++currentCol).SetValue("Answered Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("ABND. Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("ABND. Calls(%)");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, ++currentCol).SetValue("Longest Waiting");
                Headercell.Style.Font.Bold = true;

                List<ReportCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => 1)
                 .Select(y => new ReportCallsSummaryEntity
                 {
                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                     TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                     AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                     AVGWaitTime = y.Average(d => d.AVGWaitTime),
                     LongestWaitingTime = y.Max(d => d.LongestWaitingTime),
                     TotalTransferredIn = y.Sum(d => d.TotalTransferredIn),
                     OverFlowInAnsweredCalls = y.Sum(d => d.OverFlowInAnsweredCalls),
                     OverFlowInAbndCalls = y.Sum(d => d.OverFlowInAbndCalls),
                     OverFlowInAbandonedCallsPercentage = y.Average(d => d.OverFlowInAbandonedCallsPercentage),
                     OverFlowInAVGWaitTime = y.Average(d => d.OverFlowInAVGWaitTime),
                     OverFlowInLongestWaitingTime = y.Max(d => d.OverFlowInLongestWaitingTime),
                     TotalYBVTansferredOut = y.Sum(d => d.TotalYBVTansferredOut),
                 }).ToList();

                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportCallsSummaryEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.BoardTitle);

                    BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                    int currentCol1 = 2;

                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.TotalAnsweredCalls.ToString());
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.TotalAbandonedCalls.ToString());
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AVGWaitTime));
                    BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));

                    if (i == ReportEntityList.Count - 1)
                    {
                        Row++;
                        ReportCallsSummaryEntity obj1 = TempReportEntityGroupedList[0];
                        IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        int currentCol2 = 2;

                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.TotalAnsweredCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.TotalAbandonedCalls.ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(Math.Round(float.Parse(obj1.AbandonedCallsPercentage.ToString())).ToString());
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.AVGWaitTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        Row++;
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAllCallsReportCSV(string ReportName, List<ReportAllCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString("dd-MM-yyyy") + "  To: " + ToDate.ToString("dd-MM-yyyy"));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString("dd-MM-yyyy") + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;



                List<ReportAllCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAllCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      TotalAgentDuration = y.Sum(d => d.TotalAgentDuration),
                      CallCount = y.Count()
                  }).ToList();

                List<List<ReportAllCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();


                foreach (List<ReportAllCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {

                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Board: " + ReportEntityLists[0].BoardTitle + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Date & Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Waited in Queue");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Duration at Agent(s)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Callers Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Queue Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Status");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAllCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.DateTime);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration));
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalAgentDuration));
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.CLI);
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.DDI);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.Status);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAllCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total: " + obj1.CallCount + "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.TotalAgentDuration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }



        public static string GenerateAllCallsReportExcel(string ReportName, List<ReportAllCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue", "Date & Time", "Waited in Queue", "Duration at Agent(s)", "Callers Number", "Queue Name", "Status" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.BoardTitle))
                {
                    String[] newLine = { col.BoardTitle, col.DateTime, ReportsCommonMethods.GetTimeFromSeconds(col.Duration), ReportsCommonMethods.GetTimeFromSeconds(col.TotalAgentDuration), col.CLI, col.DDI, col.Status };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }




        public static string GenerateOutboundDetailReportCSV(string ReportName, List<ReportOutboundSchedulerDetailEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string DialerType)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add("Outbound Schedule Report");
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;



                //List<ReportAllCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                //  .Select(y => new ReportAllCallsEntity
                //  {
                //      BoardTitle = y.First().BoardTitle,
                //      Duration = y.Sum(d => d.Duration),
                //      CallCount = y.Count()
                //  }).ToList();

                // List<List<ReportAllCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();


                //  foreach (List<ReportAllCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                //  {

                //    Row++;

                //   Headercell = ws.Cell(Row, 1).SetValue("Queue: " + ReportEntityLists[0].BoardTitle + " ");
                Headercell.RichText.Substring(0, 5).Bold = true;
                Headercell.Style.Font.FontSize = 13;
                Row++;

                Headercell = ws.Cell(Row, 1).SetValue("Date & Time");
                Headercell.Style.Font.Bold = true;
                if (DialerType == "Abandoned")
                {                    
                    Headercell = ws.Cell(Row, 2).SetValue("Abandoned Queue");
                    Headercell.Style.Font.Bold = true;
                }
                else if (DialerType == "Callback")
                {                    
                    Headercell = ws.Cell(Row, 2).SetValue("Origin");
                    Headercell.Style.Font.Bold = true;
                }
                else //(DialerType == "Contact")
                {               
                    Headercell = ws.Cell(Row, 2).SetValue("Schedule Name");
                    Headercell.Style.Font.Bold = true;
                }
                Headercell = ws.Cell(Row, 3).SetValue("Dialled Number");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("Agent Name");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("Agent Ext");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 6).SetValue("Outcome");
                Headercell.Style.Font.Bold = true;


                List<List<ReportOutboundSchedulerDetailEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.AttemptID).Select(y => y.ToList()).ToList();
                foreach (List<ReportOutboundSchedulerDetailEntity> list1 in ReportEntityGroupedList)
                {
                    if (list1.Count > 0)
                    {
                        var obj = list1[list1.Count - 1];
                        Row++;
                        // ReportAllCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.DateTime);
                        if (DialerType == "Abandoned")
                        {
                            BodyCell = ws.Cell(Row, 2).SetValue(obj.AbandonedQueue);
                        }
                        else if (DialerType == "Callback")
                        {
                            BodyCell = ws.Cell(Row, 2).SetValue(obj.ScheduleQueue);
                        }
                        else //(DialerType == "Contact")
                        {
                            BodyCell = ws.Cell(Row, 2).SetValue(obj.ScheduleName);
                        }
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.DialledNumber);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.AgentNumber);
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.Status);

                        // if (i == ReportEntityLists.Count - 1)
                        //{
                        //    Row++;
                        //    ReportAllCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);

                        //    IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total: " + obj1.CallCount + "");
                        //    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        //    FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration));
                        //    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        //    FooterCell = ws.Cell(Row, 3).SetValue("");
                        //    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        //    FooterCell = ws.Cell(Row, 4).SetValue("");
                        //    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        //    FooterCell = ws.Cell(Row, 5).SetValue("");
                        //    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        //    Row++;
                        //}
                    }
                }

                // }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateOutboundDetailReportExcel(string ReportName, List<ReportOutboundSchedulerDetailEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, string DialerType)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = new String[6];// { "Date & Time", "Dialled Number", "Agent Name", "Outcome" };
                headings[0] = "Date & Time";
                if (DialerType == "Abandoned")
                {
                    headings[1] = "Abandoned Queue";
                }
                else if (DialerType == "Callback")
                {
                    headings[1] = "Origin";
                }
                else //(DialerType == "Contact")
                {
                    headings[1] = "Schedule Name";
                }
               
                headings[2] = "Dialled Number";
                headings[3] = "Agent Name";
                headings[4] = "Agent Ext";
                headings[5] = "Outcome";

                output.AppendLine(string.Join(separator, headings));

                List<List<ReportOutboundSchedulerDetailEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.AttemptID).Select(y => y.ToList()).ToList();
                foreach (List<ReportOutboundSchedulerDetailEntity> list1 in ReportEntityGroupedList)
                {
                    if (list1.Count > 0)
                    {
                        var col = list1[list1.Count - 1];
                        String[] newLine = new String[6];// { col.DateTime, col.DialledNumber, col.AgentNumber, col.Status };
                        newLine[0] = col.DateTime;
                        if (DialerType == "Abandoned")
                        {
                            newLine[1] = col.AbandonedQueue;
                        }
                        else if (DialerType == "Callback")
                        {
                            newLine[1] = col.ScheduleQueue;
                        }
                        else //(DialerType == "Contact")
                        {
                            newLine[1] = col.ScheduleName;
                        }

                        newLine[2] = col.DialledNumber;
                        newLine[3] = col.AgentName;
                        newLine[4] = col.AgentNumber;
                        newLine[5] = col.Status;

                        output.AppendLine(string.Join(separator, newLine));
                    }
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;














            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAbandonedCallsReportCSV(string ReportName, List<ReportAbandonedCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                List<ReportAbandonedCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle)
                  .Select(y => new ReportAbandonedCallsEntity
                  {
                      BoardTitle = y.First().BoardTitle,
                      Duration = y.Sum(d => d.Duration),
                      CallCount = y.Count()

                  }).ToList();
                List<List<ReportAbandonedCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.BoardTitle).Select(y => y.ToList()).ToList();

                foreach (List<ReportAbandonedCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue: " + ReportEntityLists[0].BoardTitle + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date & Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Waited in Queue");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Callers Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Queue Name");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAbandonedCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.DateTime);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration));
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.CLI);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.DDI);


                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAbandonedCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total: " + obj1.CallCount + "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;

                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAbandonedCallsReportExcel(string ReportName, List<ReportAbandonedCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {


                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue", "Date & Time", "Waited in Queue", "Callers Number", "Queue Name" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.BoardTitle))
                {
                    String[] newLine = { col.BoardTitle, col.DateTime, ReportsCommonMethods.GetTimeFromSeconds(col.Duration), col.CLI, col.DDI };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;





            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }



        public static string GenerateCallBreakdownByHourReportCSV(string ReportName, List<ReportCallBreakdownByIntervalEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                List<ReportCallBreakdownByIntervalEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle })
                 .Select(y => new ReportCallBreakdownByIntervalEntity
                 {
                     Date = y.First().Date,
                     BoardTitle = y.First().BoardTitle,
                     TotalCalls = y.Sum(d => d.TotalCalls),
                     TotalAnsweredCalls = y.Sum(d => d.TotalAnsweredCalls),
                     TotalAbandonedCalls = y.Sum(d => d.TotalAbandonedCalls),
                     AbandonedCallsPercentage = y.Average(d => d.AbandonedCallsPercentage),
                     LongestWaitingTime = y.Max(d => d.LongestWaitingTime),


                 }).ToList();

                List<List<ReportCallBreakdownByIntervalEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.BoardTitle }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportCallBreakdownByIntervalEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].BoardTitle + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Total Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Answered Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("ABND. Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("ABND. Calls(%)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Longest Waiting");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportCallBreakdownByIntervalEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalAnsweredCalls.ToString());
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.TotalAbandonedCalls.ToString());
                        BodyCell = ws.Cell(Row, 5).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                        BodyCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));
                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportCallBreakdownByIntervalEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle && x.Date == obj.Date);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(obj1.TotalAnsweredCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(obj1.TotalAbandonedCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 5).SetValue(Math.Round(obj1.AbandonedCallsPercentage).ToString());
                            double AbandonedCallsPercentage = ((double)obj1.TotalAbandonedCalls / (double)obj1.TotalCalls * 100);
                            FooterCell = ws.Cell(Row, 5).SetValue(Math.Round(AbandonedCallsPercentage, 2).ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateCallBreakdownByHourReportExcel(string ReportName, List<ReportCallBreakdownByIntervalEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Date", "Queue", "Time", "Total Calls", "Answered Calls", "ABND. Calls", "ABND. Calls(%)", "Longest Waiting" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.Date))
                {
                    String[] newLine = { col.Date, col.BoardTitle, col.TimeKey, col.TotalCalls.ToString(), col.TotalAnsweredCalls.ToString(), col.TotalAbandonedCalls.ToString(), col.AbandonedCallsPercentage.ToString(), ReportsCommonMethods.GetTimeFromSeconds(col.LongestWaitingTime) };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentAvailabilityReportCSV(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                //IXLWorksheet ws = wb.Worksheets.Add(ReportName);
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
               .Select(y => new ReportAgentConsolidatedEntity
               {
                   AgentName = y.First().AgentName,
                   GroupName = y.First().GroupName,
                   TotalIdleTime = y.Sum(d => d.TotalIdleTime),
                   TotalLoggedInTime = y.Sum(d => d.TotalLoggedInTime),
                   TotalLoggedOutTime = y.Sum(d => d.TotalLoggedOutTime),
                   ACDBusyTime = y.Sum(d => d.ACDBusyTime),
                   NonACDBusyTime = y.Sum(d => d.NonACDBusyTime),
                   TempAbsTime = y.Sum(d => d.TempAbsTime),
                   LoggedInCount = y.Sum(d => d.LoggedInCount),
                   LoggedOutCount = y.Sum(d => d.LoggedOutCount),
                   TempAbsCount = y.Sum(d => d.TempAbsCount),

               }).ToList();


                    List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.GroupName }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        Row++;
                        Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupName + " ");
                        Headercell.RichText.Substring(0, 5).Bold = true;
                        Headercell.Style.Font.FontSize = 13;
                        Row++;
                        Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                        Headercell.Style.Font.Bold = true;
                        //Headercell = ws.Cell(Row, 2).SetValue("Logged in Time");
                        Headercell = ws.Cell(Row, 2).SetValue("Idle Time");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 3).SetValue("Time Agent Logged In");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 4).SetValue("Time Agent Logged out");
                        Headercell.Style.Font.Bold = true;
                       // string IsOXO = ConfigurationManager.AppSettings["IsOXO"];
                        int currentCol = 4;
                       
                            Headercell = ws.Cell(Row, ++currentCol).SetValue("ACD Busy Time");
                            Headercell.Style.Font.Bold = true;
                            Headercell = ws.Cell(Row, ++currentCol).SetValue("Non ACD Busy Time");
                            Headercell.Style.Font.Bold = true;
                     
                        Headercell = ws.Cell(Row, ++currentCol).SetValue("Temp Abs Time");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, ++currentCol).SetValue("No. of Logins");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, ++currentCol).SetValue("No. of Logouts");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, ++currentCol).SetValue("No of Absences");
                        Headercell.Style.Font.Bold = true;


                        double TotalIdleTime = 0;
                        double TotalLoggedInTime = 0;
                        double TotalLoggedOutTime = 0;
                        double ACDBusyTime = 0;
                        double NonACDBusyTime = 0;
                        double TempAbsTime = 0;
                        double LoggedInCount = 0;
                        double LoggedOutCount = 0;
                        double TempAbsCount = 0;


                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {
                            Row++;
                            ReportAgentConsolidatedEntity obj = ReportEntityLists[i];

                            TotalIdleTime += obj.TotalIdleTime;
                            TotalLoggedInTime += obj.TotalLoggedInTime;
                            TotalLoggedOutTime += obj.TotalLoggedOutTime;
                            ACDBusyTime += obj.ACDBusyTime;
                            NonACDBusyTime += obj.NonACDBusyTime;
                            TempAbsTime += obj.TempAbsTime;
                            LoggedInCount += obj.LoggedInCount;
                            LoggedOutCount += obj.LoggedOutCount;
                            TempAbsCount += obj.TempAbsCount;

                            IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                            BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime));
                            BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime));
                            BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedOutTime));
                            int currentCol1 = 4;
                            
                                BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                                BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime));
                           

                            BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime));
                            BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.LoggedInCount.ToString());
                            BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.LoggedOutCount.ToString());
                            BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.TempAbsCount.ToString());
                            if (i == ReportEntityLists.Count - 1)
                            {
                                Row++;
                               // ReportAgentAvailabilityEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                                IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(TotalIdleTime));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(TotalLoggedInTime));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(TotalLoggedOutTime));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                int currentCol2 = 4;
                               
                                    FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(ACDBusyTime));
                                    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                    FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(NonACDBusyTime));
                                    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                               
                                FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(TempAbsTime));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                FooterCell = ws.Cell(Row, ++currentCol2).SetValue(LoggedInCount.ToString());
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                FooterCell = ws.Cell(Row, ++currentCol2).SetValue(LoggedOutCount.ToString());
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                FooterCell = ws.Cell(Row, ++currentCol2).SetValue(TempAbsCount.ToString());
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                Row++;
                            }
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));

                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentAvailabilityReportExcel(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();


               
                    String[] headings = { "Queue", "Agent Name", "Idle Time", "Time Agent Logged In", "Time Agent Logged out", "ACD Call Duration Time", "Non-ACD Call Duration Busy Time", "Total Time Absent", "No. of Logins", "No. of Logouts", "No of Absences" };
                    output.AppendLine(string.Join(separator, headings));
                if (ReportEntityList.Count > 0)
                {
                    List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
               .Select(y => new ReportAgentConsolidatedEntity
               {
                   AgentName = y.First().AgentName,
                   GroupName = y.First().GroupName,
                   TotalIdleTime = y.Sum(d => d.TotalIdleTime),
                   TotalLoggedInTime = y.Sum(d => d.TotalLoggedInTime),
                   TotalLoggedOutTime = y.Sum(d => d.TotalLoggedOutTime),
                   ACDBusyTime = y.Sum(d => d.ACDBusyTime),
                   NonACDBusyTime = y.Sum(d => d.NonACDBusyTime),
                   TempAbsTime = y.Sum(d => d.TempAbsTime),
                   LoggedInCount = y.Sum(d => d.LoggedInCount),
                   LoggedOutCount = y.Sum(d => d.LoggedOutCount),
                   TempAbsCount = y.Sum(d => d.TempAbsCount),

               }).ToList();


                    List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.GroupName }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                    {
                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {                           
                            ReportAgentConsolidatedEntity col = ReportEntityLists[i];
                            String[] newLine = { col.GroupName, col.AgentName, ReportsCommonMethods.GetTimeFromSeconds(col.TotalIdleTime), ReportsCommonMethods.GetTimeFromSeconds(col.TotalLoggedInTime), ReportsCommonMethods.GetTimeFromSeconds(col.TotalLoggedOutTime), ReportsCommonMethods.GetTimeFromSeconds(col.ACDBusyTime), ReportsCommonMethods.GetTimeFromSeconds(col.NonACDBusyTime), ReportsCommonMethods.GetTimeFromSeconds(col.TempAbsTime), col.LoggedInCount.ToString(), col.LoggedOutCount.ToString(), col.TempAbsCount.ToString() };
                            output.AppendLine(string.Join(separator, newLine));
                        }
                    }
                }



                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAgentAvailabilityReportCSV_(string ReportName, List<ReportAgentAvailabilityEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue("Agent Report - Availability Summary");
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                List<ReportAgentAvailabilityEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                 .Select(y => new ReportAgentAvailabilityEntity
                 {
                     GroupName = y.First().GroupName,
                     LoggedInTime = y.Sum(d => d.LoggedInTime),
                     LoggedOutTime = y.Sum(d => d.LoggedOutTime),
                     ACDBusyTime = y.Sum(d => d.ACDBusyTime),
                     NonACDBusyTime = y.Sum(d => d.NonACDBusyTime),
                     TempAbsTime = y.Sum(d => d.TempAbsTime),
                     LoggedInCount = y.Sum(d => d.LoggedInCount),
                     LoggedOutCount = y.Sum(d => d.LoggedOutCount),
                     TempAbsCount = y.Sum(d => d.TempAbsCount),
                 }).ToList();

                List<List<ReportAgentAvailabilityEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportAgentAvailabilityEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 2).SetValue("Logged in Time");
                    Headercell = ws.Cell(Row, 2).SetValue("Idle Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Time Agent Logged out");
                    Headercell.Style.Font.Bold = true;
                    string IsOXO = ConfigurationManager.AppSettings["IsOXO"];
                    int currentCol = 3;
                    if (IsOXO == "0")
                    {
                        Headercell = ws.Cell(Row, ++currentCol).SetValue("CCD Busy Time");
                        Headercell.Style.Font.Bold = true;
                        //Headercell = ws.Cell(Row, 5).SetValue("Non ACD Busy Time");
                        //Headercell.Style.Font.Bold = true;
                    }
                    else
                    {
                        Headercell = ws.Cell(Row, ++currentCol).SetValue("ACD Busy Time");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, ++currentCol).SetValue("Non ACD Busy Time");
                        Headercell.Style.Font.Bold = true;
                    }

                    Headercell = ws.Cell(Row, ++currentCol).SetValue("Temp Abs Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, ++currentCol).SetValue("No. of Logins");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, ++currentCol).SetValue("No. of Logouts");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, ++currentCol).SetValue("No of Absences");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentAvailabilityEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedInTime));
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LoggedOutTime));
                        int currentCol1 = 3;
                        if (IsOXO == "0")
                        {
                            BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                            //BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime));
                        }
                        else
                        {
                            BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                            BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.NonACDBusyTime));
                        }

                        BodyCell = ws.Cell(Row, ++currentCol1).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime));
                        BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.LoggedInCount.ToString());
                        BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.LoggedOutCount.ToString());
                        BodyCell = ws.Cell(Row, ++currentCol1).SetValue(obj.TempAbsCount.ToString());
                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAgentAvailabilityEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedInTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LoggedOutTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            int currentCol2 = 3;
                            if (IsOXO == "0")
                            {
                                FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.ACDBusyTime));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                //FooterCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.NonACDBusyTime));
                                //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.ACDBusyTime));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                                FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.NonACDBusyTime));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }

                            FooterCell = ws.Cell(Row, ++currentCol2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.TempAbsTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.LoggedInCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.LoggedOutCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, ++currentCol2).SetValue(obj1.TempAbsCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentAvailabilityReportExcel_(string ReportName, List<ReportAgentAvailabilityEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();


                string IsOXO = ConfigurationManager.AppSettings["IsOXO"];

                if (IsOXO == "0")
                {


                    String[] headings = { "Queue", "Agent Name", "Idle Time", "Time Agent Logged out", "CCD Busy", "Total Time Absent", "No. of Logins", "No. of Logouts", "No of Absences" };
                    output.AppendLine(string.Join(separator, headings));

                    foreach (var col in ReportEntityList.OrderBy(x => x.GroupName))
                    {
                        String[] newLine = { col.GroupName, col.AgentName, ReportsCommonMethods.GetTimeFromSeconds(col.LoggedInTime), ReportsCommonMethods.GetTimeFromSeconds(col.LoggedOutTime), ReportsCommonMethods.GetTimeFromSeconds(col.ACDBusyTime), ReportsCommonMethods.GetTimeFromSeconds(col.TempAbsTime), col.LoggedInCount.ToString(), col.LoggedOutCount.ToString(), col.TempAbsCount.ToString() };
                        output.AppendLine(string.Join(separator, newLine));
                    }

                }

                else
                {
                    String[] headings = { "Queue", "Agent Name", "Idle Time", "Time Agent Logged out", "ACD Call Duration Time", "Non-ACD Call Duration Busy Time", "Total Time Absent", "No. of Logins", "No. of Logouts", "No of Absences" };
                    output.AppendLine(string.Join(separator, headings));

                    foreach (var col in ReportEntityList.OrderBy(x => x.GroupName))
                    {
                        String[] newLine = { col.GroupName, col.AgentName, ReportsCommonMethods.GetTimeFromSeconds(col.LoggedInTime), ReportsCommonMethods.GetTimeFromSeconds(col.LoggedOutTime), ReportsCommonMethods.GetTimeFromSeconds(col.ACDBusyTime), ReportsCommonMethods.GetTimeFromSeconds(col.NonACDBusyTime), ReportsCommonMethods.GetTimeFromSeconds(col.TempAbsTime), col.LoggedInCount.ToString(), col.LoggedOutCount.ToString(), col.TempAbsCount.ToString() };
                        output.AppendLine(string.Join(separator, newLine));
                    }
                }




                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateCallVolumeByAgentReportCSV(string ReportName, List<ReportAgentCallsCountEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportAgentCallsCountEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.GroupName }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportAgentCallsCountEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Hour");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Answered Calls");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentCallsCountEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetHourFormat(obj.Hour));
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalCalls);
                        Row++;
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }

        public static string GenerateCallVolumeByAgentReportExcel(string ReportName, List<ReportAgentCallsCountEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Date", "Queue", "Agent Name", "Hour", "Answered Calls" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.Date))
                {
                    String[] newLine = { col.Date, col.GroupName, col.AgentName, col.Hour, col.TotalCalls };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }


        public static string GenerateAgentPresenceReportCSV(string ReportName, List<ReportAgentPresenceEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {
                    var image = ws.AddPicture(ImageLocation);
                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                List<List<ReportAgentPresenceEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();
                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportAgentPresenceEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Agent: " + ReportEntityLists[0].AgentName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Status");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Date & Time");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentPresenceEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Action);
                        ws.Cell(Row, 2).SetValue(obj.StartTime);
                        //  int Hours = DateTime.ParseExact(obj.StartTime, "dd-MM-yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture).Hour;
                        // BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetHourFormat(Hours + ""));
                        Row++;
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAgentPresenceReportExcel(string ReportName, List<ReportAgentPresenceEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue", "Agent", "Status", "Date & Time" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.GroupName))
                {
                    String[] newLine = { col.GroupName, col.AgentName, col.Action, col.StartTime };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateTalkTimebyAgentReportCSV(string ReportName, List<ReportAgentCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportAgentCallsSummaryEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName)
                .Select(y => new ReportAgentCallsSummaryEntity
                {
                    GroupName = y.First().GroupName,
                    TotalCalls = y.Sum(d => d.TotalCalls),
                    TotalTalkTime = y.Sum(d => d.TotalTalkTime),
                    AvgTalkTime = y.Average(d => d.AvgTalkTime),
                }).ToList();

                List<List<ReportAgentCallsSummaryEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.GroupName).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportAgentCallsSummaryEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Answered Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Total Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Avg Talk Time");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentCallsSummaryEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalTalkTime));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.AvgTalkTime));

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportAgentCallsSummaryEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName);
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.TotalTalkTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.AvgTalkTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }

                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateTalkTimebyAgentReportExcel(string ReportName, List<ReportAgentCallsSummaryEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue", "Agent Name", "Answered Calls", "Total Talk Time", "Avg Talk Time" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.GroupName))
                {
                    String[] newLine = { col.GroupName, col.AgentName, col.TotalCalls.ToString(), ReportsCommonMethods.GetTimeFromSeconds(col.TotalTalkTime), ReportsCommonMethods.GetTimeFromSeconds(col.AvgTalkTime) };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;


            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateItemisedCallsByAgentReportCSV(string ReportName, List<ReportAgentCallsTakenEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportAgentCallsTakenEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
               .Select(y => new ReportAgentCallsTakenEntity
               {
                   GroupName = y.First().GroupName,
                   AgentName = y.First().AgentName,
                   Duration = y.Sum(d => d.Duration),

               }).ToList();

                List<List<ReportAgentCallsTakenEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportAgentCallsTakenEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Agent: " + ReportEntityLists[0].AgentName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                  //  Headercell = ws.Cell(Row, 1).SetValue("Call Type");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 1).SetValue("Extension");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Callers Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Waited in Queue");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Duration");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Date/Time");
                    Headercell.Style.Font.Bold = true;
                    double QueueDuration = 0;
                    double Duration = 0;
                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentCallsTakenEntity obj = ReportEntityLists[i];
                        QueueDuration += obj.QueueDuration;
                        Duration += obj.Duration;

                        //IXLCell BodyCell= ws.Cell(Row, 1).SetValue(obj.CallType);
                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Extension);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.CLI);
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.QueueDuration));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration));
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.StartTime);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            //ReportAgentCallsTakenEntity obj1 = TempReportEntityGroupedList.Find(x => x.GroupName == obj.GroupName && x.AgentName == obj.AgentName);
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(QueueDuration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Duration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;

                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateItemisedCallsByAgentReportExcel(string ReportName, List<ReportAgentCallsTakenEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue", "Agent", "Extension","Callers Number", "Waited in Queue","Call Duration", "Date/Time" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.GroupName))
                {
                    String[] newLine = { col.GroupName, col.AgentName, col.Extension, col.CLI, ReportsCommonMethods.GetTimeFromSeconds(col.QueueDuration), ReportsCommonMethods.GetTimeFromSeconds(col.Duration), col.StartTime };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;



            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAgentSummaryByGroupReportCSV(string ReportName, List<ReportGroupAgentCallVolumeEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                ///this is not currently in use
                ///
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportGroupAgentCallVolumeEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.DateOnly, x.Title }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportGroupAgentCallVolumeEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].DateOnly + " ");
                    Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].Title + " ");

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Hour");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Agents Logged in");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Call Count");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Avg Agents Logged in");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Avg Agents on ACD Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Avg Agents on Non-ACD Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Avg Agents Set as Busy");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportGroupAgentCallVolumeEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(ReportsCommonMethods.GetHourFormat(obj.HourOnly));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.AgentLoggedCount);
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.CallsCount);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.AVGLogIn);
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.AVGCallBusy);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.AVGNonCallBusy);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.AVGBusy);
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
        }
        public static string GenerateAgentConsolidatedReportCSV(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupName }).Select(y => y.ToList()).ToList();


                foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].EventDate + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Logged In Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Total Time Unavailable");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Wrap-up Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("AVG. Wrap-up Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Available Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Total Calls Handled");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("AVG. Call Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("Total Calls Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("Calls Transferred");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("AVG. Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("Longest Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("Total Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("Calls Out");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 15).SetValue("Occupancy %");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 16).SetValue("Idle Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 17).SetValue("Total Calls Not Accepted");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 18).SetValue("Logged Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 19).SetValue("Total Logged In Time");
                    Headercell.Style.Font.Bold = true;

                    Double _TempAbsTime = 0;
                    Double _ClerikalBusyTime = 0;
                    Double _AvailableTime = 0;
                    Double _TotalLoggedInTime = 0;
                    Double _ACDBusyCount = 0;
                    Double _ACDBusyTime = 0;
                    Double _TransferCount = 0;
                    Double _UnHoldTime = 0;
                    Double _OutBoundCallCount = 0;

                    Double _TotalIdleTime = 0;
                    Double _HangUpCount = 0;
                    Double _Occupancy = 0;
                    Double _OccupancyCount = 0;
                    Double _AvgACDBusy = 0;
                    Double _AvgUnHold = 0;
                    Double _ACDCallnotaccept = 0;
                    TimeSpan _LogInTime = TimeSpan.MaxValue;
                    TimeSpan _LogOutTime = TimeSpan.MaxValue;
                    Double _LongestUnHoldTime = 0;
                    Double _AvgClerikalBusy = 0;
                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentConsolidatedEntity obj = ReportEntityLists[i];

                        string TotalLoggedInTime = "";//N/A
                        string AvailableTime = "";//N/A
                        string Occupancy = "";//N/A
                        string LogInTime = "";//N/A
                        string LogOutTime = "";
                        string AvgClerikalBusy = "00:00:00";
                        string AvgUnHold = "00:00:00";
                        string AvgACDBusy = "00:00:00";

                        if (obj.TotalLoggedInTime != 0)
                        {
                            AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                            TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                            _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                            _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                            _OccupancyCount++;
                        }
                        if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                        {
                            LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                            //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                            if (_LogInTime > obj.LogInTime)
                                _LogInTime = obj.LogInTime;
                        }

                        if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                        {
                            LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                            if (_LogOutTime > obj.LogOutTime)
                                _LogOutTime = obj.LogOutTime;
                        }

                        if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                        {
                            _LongestUnHoldTime = obj.LongestUnHoldTime;
                        }
                        if (obj.ClerikalBusyCount != 0)
                        {
                            AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                            _AvgClerikalBusy = _AvgClerikalBusy + Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount);
                        }
                        if (obj.ACDBusyCount != 0)
                        {
                            AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                            _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                        }

                        if (obj.UnHoldCount != 0)
                        {
                            AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                            _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                        }
                        _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                        _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                        _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                        _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                        _TransferCount = _TransferCount + obj.TransferCount;
                        _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                        _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                        _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                        _HangUpCount = _HangUpCount + obj.HangUpCount;
                        _ACDCallnotaccept = _ACDCallnotaccept + obj.ACDCallnotaccept;

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(LogInTime);
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime));
                        BodyCell = ws.Cell(Row, 5).SetValue(AvgClerikalBusy);
                        BodyCell = ws.Cell(Row, 6).SetValue(AvailableTime);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.ACDBusyCount.ToString());
                        BodyCell = ws.Cell(Row, 8).SetValue(AvgACDBusy);
                        BodyCell = ws.Cell(Row, 9).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                        BodyCell = ws.Cell(Row, 10).SetValue(obj.TransferCount.ToString());
                        BodyCell = ws.Cell(Row, 11).SetValue(AvgUnHold);
                        BodyCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime));
                        BodyCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime));
                        BodyCell = ws.Cell(Row, 14).SetValue(obj.OutBoundCallCount.ToString());
                        BodyCell = ws.Cell(Row, 15).SetValue(Occupancy);
                        BodyCell = ws.Cell(Row, 16).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime));
                        BodyCell = ws.Cell(Row, 17).SetValue(obj.ACDCallnotaccept.ToString());
                        BodyCell = ws.Cell(Row, 18).SetValue(LogOutTime);
                        BodyCell = ws.Cell(Row, 19).SetValue(TotalLoggedInTime);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            if (_LogInTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 2).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                FooterCell = ws.Cell(Row, 2).SetValue(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgClerikalBusy / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(_ACDBusyCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 10).SetValue(_TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 14).SetValue(_OutBoundCallCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 15).SetValue(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 16).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 17).SetValue(_ACDCallnotaccept.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            if (_LogOutTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 18).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                FooterCell = ws.Cell(Row, 18).SetValue(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            FooterCell = ws.Cell(Row, 19).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentConsolidatedReportExcel(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();









                String[] headings = {
                    "Date",
                    "Queue",
                    "Agent Name",
                    "Logged In Time",
                    "Total Time Unavailable",
                    "Wrap-up Time",
                    "AVG. Wrap-up Time",
                    "Available Time",
                    "Total Calls Handled",
                    "AVG. Call Talk Time",
                    "Total Calls Talk Time",
                    "Calls Transferred",
                    "AVG. Hold Time",
                    "Longest Hold Time",
                    "Total Hold Time",
                    "Calls Out",
                    "Occupancy %",
                    "Idle Time",
                    "Total Calls Not Accepted",
                    "Logged Out Time",
                    "Total Logged In Time" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.EventDate))
                {


                    string TotalLoggedInTime = "";//N/A
                    string AvailableTime = "";//N/A
                    string Occupancy = "";//N/A
                    string LogInTime = "";//N/A
                    string LogOutTime = "";
                    string AvgClerikalBusy = "00:00:00";
                    string AvgUnHold = "00:00:00";
                    string AvgACDBusy = "00:00:00";

                    if (col.TotalLoggedInTime != 0)
                    {
                        AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(col.TotalLoggedInTime) - col.TempAbsTime - col.ClerikalBusyTime);
                        Occupancy = Math.Round(((Convert.ToDouble(col.TotalLoggedInTime) - col.TempAbsTime) / Convert.ToDouble(col.TotalLoggedInTime)) * 100, 2).ToString();
                        TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(col.TotalLoggedInTime));


                    }
                    if (col.LogInTime != null && col.LogInTime != TimeSpan.MaxValue)
                    {
                        LogInTime = new DateTime(col.LogInTime.Ticks).ToString("HH:mm:ss");
                        //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");

                    }

                    if (col.LogOutTime != null && col.LogOutTime != TimeSpan.MaxValue)
                    {
                        LogOutTime = new DateTime(col.LogOutTime.Ticks).ToString("HH:mm:ss");

                    }


                    if (col.ClerikalBusyCount != 0)
                    {
                        AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(col.ClerikalBusyTime) / Convert.ToDouble(col.ClerikalBusyCount));

                    }
                    if (col.ACDBusyCount != 0)
                    {
                        AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(col.ACDBusyTime) / Convert.ToDouble(col.ACDBusyCount));

                    }

                    if (col.UnHoldCount != 0)
                    {
                        AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(col.UnHoldTime) / Convert.ToDouble(col.UnHoldCount));

                    }









                    String[] newLine = {
                        col.EventDate,
                        col.GroupName,
                        col.AgentName,
                        LogInTime,
                        ReportsCommonMethods.GetTimeFromSeconds(col.TempAbsTime),
                        ReportsCommonMethods.GetTimeFromSeconds(col.ClerikalBusyTime),
                        AvgClerikalBusy,
                        AvailableTime,
                        col.ACDBusyCount.ToString(),
                        AvgACDBusy,
                        ReportsCommonMethods.GetTimeFromSeconds(col.ACDBusyTime),
                        col.TransferCount.ToString(),
                        AvgUnHold,
                        ReportsCommonMethods.GetTimeFromSeconds(col.LongestUnHoldTime),
                        ReportsCommonMethods.GetTimeFromSeconds(col.UnHoldTime),
                        col.OutBoundCallCount.ToString(),
                        Occupancy,
                        ReportsCommonMethods.GetTimeFromSeconds(col.TotalIdleTime),
                        col.ACDCallnotaccept.ToString(),
                        LogOutTime,
                        TotalLoggedInTime };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAgentOverviewReportCSV(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportAgentOverviewEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupTitle }).Select(y => y.ToList()).ToList();


                foreach (List<ReportAgentOverviewEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].EventDate + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupTitle + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("ACD Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Avg ACD Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Avg ACW Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Avg Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Ext In Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Ext Out Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("Ext Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("External Ext Out Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("External Ext Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("AUX 2(Outbound)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("AUX 3(Assist on Call");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("AUX 1(Toilet)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("AUX 4(Break)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 15).SetValue("AUXOUT Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 16).SetValue("Total Calls Not Accepted");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 17).SetValue("Agent Ring Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 18).SetValue("Staffed Time");
                    Headercell.Style.Font.Bold = true;

                    int _ACDCalls = 0;

                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";
                    int _ACW = 0;
                    Double _ACWTime = 0;
                    string ACWTime = "00:00:00";

                    Double _HoldTime = 0;
                    string HoldTime = "00:00:00";

                    int _ExtinCalls = 0;
                    Double _EXTInTime = 0;
                    string EXTInTime = "00:00:00";

                    Double _EXTInHoldTime = 0;
                    int _ExtOutCalls = 0;
                    Double _ExtOutTime = 0;
                    string ExtoutTime = "00:00:00";
                    Double _ExtOutHoldTime = 0;
                    int _ExternalExtCalls = 0;
                    Double _ExternalExtTime = 0;
                    string ExternalExtoutTime = "00:00:00";
                    Double _ExternalExtHoldTime = 0;
                    Double _Aux1 = 0;
                    string AUX1 = "00:00:00";
                    Double _Aux2 = 0;
                    string AUX2 = "00:00:00";
                    Double _Aux3 = 0;
                    string AUX3 = "00:00:00";
                    Double _Aux4 = 0;
                    string AUX4 = "00:00:00";
                    int _CallsNotAccepted = 0;
                    Double _AgentRingTime = 0;
                    string AgentRingTime = "00:00:00";
                    Double _StaffedTime = 0;
                    string StaffedTime = "00:00:00";

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportAgentOverviewEntity obj = ReportEntityLists[i];

                        _ACDCalls += obj.ACDBusyCount;
                        _ACDTime += obj.ACDBusyTime;//
                        if (obj.ACDBusyCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                        else
                            ACDTime = "00:00:00";

                        _ACW += obj.ACWCount;
                        _ACWTime += obj.ACWTime;
                        if (obj.ACWCount > 0)
                            ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACWTime) / obj.ACWCount);
                        else
                            ACWTime = "00:00:00";

                        _HoldTime += obj.UnHoldTime;
                        if (obj.ACDBusyCount > 0)
                            HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                        else
                            HoldTime = "00:00:00";

                        _ExtinCalls += obj.ExtInCalls;
                        _EXTInTime += obj.ExtInCallsTime;
                        EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                        _EXTInHoldTime += obj.ExtInCallsHoldTime;

                        _ExtOutCalls = obj.ExtOutCalls;
                        _ExtOutTime += obj.ExternalExtOutCallsTime;
                        ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                        _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                        _ExternalExtCalls += obj.ExternalExtOutCalls;
                        _ExternalExtTime += obj.ExternalExtOutCallsTime;
                        ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                        _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                        _Aux1 += obj.AUX1Time;
                        AUX1 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX1Time);
                        _Aux2 += obj.AUX2Time;
                        AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                        _Aux3 += obj.AUX3Time;
                        AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                        _Aux4 += obj.AUX4Time;
                        AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                        _CallsNotAccepted += obj.ACDnotacceptCount;
                        _AgentRingTime += obj.ACDRingTime;
                        AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                        _StaffedTime += obj.TotalLoggedInTime;
                        StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.ACDBusyCount);
                        BodyCell = ws.Cell(Row, 3).SetValue(ACDTime);
                        BodyCell = ws.Cell(Row, 4).SetValue(ACWTime);
                        BodyCell = ws.Cell(Row, 5).SetValue(HoldTime);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.ExtInCalls);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.ExtOutCalls);
                        BodyCell = ws.Cell(Row, 8).SetValue(ExtoutTime);
                        BodyCell = ws.Cell(Row, 9).SetValue(obj.ExternalExtOutCalls);
                        BodyCell = ws.Cell(Row, 10).SetValue(ExternalExtoutTime);
                        BodyCell = ws.Cell(Row, 11).SetValue(AUX2);
                        BodyCell = ws.Cell(Row, 12).SetValue(AUX3);
                        BodyCell = ws.Cell(Row, 13).SetValue(AUX1);
                        BodyCell = ws.Cell(Row, 14).SetValue(AUX4);
                        BodyCell = ws.Cell(Row, 15).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime));
                        BodyCell = ws.Cell(Row, 16).SetValue(obj.ACDnotacceptCount);
                        BodyCell = ws.Cell(Row, 17).SetValue(AgentRingTime);
                        BodyCell = ws.Cell(Row, 18).SetValue(StaffedTime);


                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDCalls));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            string avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime / _ACDCalls);
                            FooterCell = ws.Cell(Row, 3).SetValue(avg);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACWTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_HoldTime / _ACDCalls);
                            FooterCell = ws.Cell(Row, 5).SetValue(avg);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(_ExtinCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(_ExtOutCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExtOutTime + _ExtOutHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(_ExternalExtCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 10).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime + _ExternalExtHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux2));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux3));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux1));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 14).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux4));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 15).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 16).SetValue(_CallsNotAccepted);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 17).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AgentRingTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            FooterCell = ws.Cell(Row, 19).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_StaffedTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }



        public static string GenerateAgentOverviewReportExcel(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {

            String separator = ",";
            StringBuilder output = new StringBuilder();

            try
            {

                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentOverviewEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupTitle }).Select(y => y.ToList()).ToList();
                    String[] headings = { "Date", "Queue", "Agent Name", "ACD Calls", "Avg ACD Time", "Avg ACW Time", "Avg Hold Time", "Ext In Calls", "Ext Out Calls", "Ext Out Time", "External Ext Out Calls", "External Ext Out Time", "AUX 2 (Outbound)", "AUX 3 (Assist on Call)", "AUX 1 (Toilet)", "AUX 4 (Break)", "AUXOUT Time", "Total Calls Not Accepted", "Agent Ring Time", "Staffed Time" };
                    output.AppendLine(string.Join(separator, headings));



                    foreach (List<ReportAgentOverviewEntity> ReportEntityLists in ReportEntityGroupedList)
                    {





                        int _ACDCalls = 0;
                        Double _ACDTime = 0;
                        string ACDTime = "00:00:00";
                        int _ACW = 0;
                        Double _ACWTime = 0;
                        string ACWTime = "00:00:00";

                        Double _HoldTime = 0;
                        string HoldTime = "00:00:00";

                        int _ExtinCalls = 0;
                        Double _EXTInTime = 0;
                        string EXTInTime = "00:00:00";

                        Double _EXTInHoldTime = 0;
                        int _ExtOutCalls = 0;
                        Double _ExtOutTime = 0;
                        string ExtoutTime = "00:00:00";
                        Double _ExtOutHoldTime = 0;
                        int _ExternalExtCalls = 0;
                        Double _ExternalExtTime = 0;
                        string ExternalExtoutTime = "00:00:00";
                        Double _ExternalExtHoldTime = 0;
                        Double _Aux1 = 0;
                        string AUX1 = "00:00:00";
                        Double _Aux2 = 0;
                        string AUX2 = "00:00:00";
                        Double _Aux3 = 0;
                        string AUX3 = "00:00:00";
                        Double _Aux4 = 0;
                        string AUX4 = "00:00:00";
                        int _CallsNotAccepted = 0;
                        Double _AgentRingTime = 0;
                        string AgentRingTime = "00:00:00";
                        Double _StaffedTime = 0;
                        string StaffedTime = "00:00:00";


                        for (int i = 0; i < ReportEntityLists.Count; i++)
                        {

                            ReportAgentOverviewEntity obj = ReportEntityLists[i];
                            _ACDCalls += obj.ACDBusyCount;
                            _ACDTime += obj.ACDBusyTime;//
                            if (obj.ACDBusyCount > 0)
                                ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                            else
                                ACDTime = "00:00:00";

                            _ACW += obj.ACWCount;
                            _ACWTime += obj.ACWTime;
                            if (obj.ACWCount > 0)
                                ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACWTime) / obj.ACWCount);
                            else
                                ACWTime = "00:00:00";

                            _HoldTime += obj.UnHoldTime;
                            if (obj.ACDBusyCount > 0)
                                HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                            else
                                HoldTime = "00:00:00";

                            _ExtinCalls += obj.ExtInCalls;
                            _EXTInTime += obj.ExtInCallsTime;
                            EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                            _EXTInHoldTime += obj.ExtInCallsHoldTime;

                            _ExtOutCalls = obj.ExtOutCalls;
                            _ExtOutTime += obj.ExternalExtOutCallsTime;
                            ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                            _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                            _ExternalExtCalls += obj.ExternalExtOutCalls;
                            _ExternalExtTime += obj.ExternalExtOutCallsTime;
                            ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                            _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                            _Aux1 += obj.AUX1Time;
                            AUX1 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX1Time);
                            _Aux2 += obj.AUX2Time;
                            AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                            _Aux3 += obj.AUX3Time;
                            AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                            _Aux4 += obj.AUX4Time;
                            AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                            _CallsNotAccepted += obj.ACDnotacceptCount;
                            _AgentRingTime += obj.ACDRingTime;
                            AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                            _StaffedTime += obj.TotalLoggedInTime;
                            StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);



                            String[] newLine = { obj.EventDate, obj.GroupTitle, obj.AgentName, obj.ACDBusyCount.ToString(), ACDTime, ACWTime, HoldTime, obj.ExtInCalls + "", obj.ExtOutCalls + "", ExtoutTime, obj.ExternalExtOutCalls + "", ExternalExtoutTime, AUX2, AUX3, AUX1, AUX4, ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime), obj.ACDnotacceptCount + "", AgentRingTime, StaffedTime };
                            output.AppendLine(string.Join(separator, newLine));



                        }



                    }

                }

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
            string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

            File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());

            return FileName;

        }



        public static string GenerateAgentOverviewSummaryReportCSV(string ReportName, List<ReportAgentOverviewEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                //  List<List<ReportAgentOverviewEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.EventDate, x.GroupTitle }).Select(y => y.ToList()).ToList();


                // foreach (List<ReportAgentOverviewEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    //Row++;
                    //Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].EventDate + " ");
                    //Headercell.RichText.Substring(0, 5).Bold = true;
                    //Headercell.Style.Font.FontSize = 13;
                    //Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].GroupTitle + " ");
                    //Headercell.RichText.Substring(0, 5).Bold = true;
                    //Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("ACD Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Avg ACD Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Avg ACW Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Avg Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Ext In Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Ext Out Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("Ext Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("External Ext Out Calls");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("External Ext Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("AUX 2(Outbound)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("AUX 3(Assist on Call");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("AUX 1(Toilet)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("AUX 4(Break)");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 15).SetValue("AUXOUT Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 16).SetValue("Total Calls Not Accepted");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 17).SetValue("Agent Ring Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 18).SetValue("Staffed Time");
                    Headercell.Style.Font.Bold = true;

                    int _ACDCalls = 0;

                    Double _ACDTime = 0;
                    string ACDTime = "00:00:00";
                    int _ACW = 0;
                    Double _ACWTime = 0;
                    string ACWTime = "00:00:00";

                    Double _HoldTime = 0;
                    string HoldTime = "00:00:00";

                    int _ExtinCalls = 0;
                    Double _EXTInTime = 0;
                    string EXTInTime = "00:00:00";

                    Double _EXTInHoldTime = 0;
                    int _ExtOutCalls = 0;
                    Double _ExtOutTime = 0;
                    string ExtoutTime = "00:00:00";
                    Double _ExtOutHoldTime = 0;
                    int _ExternalExtCalls = 0;
                    Double _ExternalExtTime = 0;
                    string ExternalExtoutTime = "00:00:00";
                    Double _ExternalExtHoldTime = 0;
                    Double _Aux1 = 0;
                    string AUX1 = "00:00:00";
                    Double _Aux2 = 0;
                    string AUX2 = "00:00:00";
                    Double _Aux3 = 0;
                    string AUX3 = "00:00:00";
                    Double _Aux4 = 0;
                    string AUX4 = "00:00:00";
                    int _CallsNotAccepted = 0;
                    Double _AgentRingTime = 0;
                    string AgentRingTime = "00:00:00";
                    Double _StaffedTime = 0;
                    string StaffedTime = "00:00:00";

                    for (int i = 0; i < ReportEntityList.Count; i++)
                    {
                        Row++;
                        ReportAgentOverviewEntity obj = ReportEntityList[i];

                        _ACDCalls += obj.ACDBusyCount;
                        _ACDTime += obj.ACDBusyTime;//
                        if (obj.ACDBusyCount > 0)
                            ACDTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / obj.ACDBusyCount);
                        else
                            ACDTime = "00:00:00";

                        _ACW += obj.ACWCount;
                        _ACWTime += obj.ACWTime;
                        if (obj.ACWCount > 0)
                            ACWTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACWTime) / obj.ACWCount);
                        else
                            ACWTime = "00:00:00";

                        _HoldTime += obj.UnHoldTime;
                        if (obj.ACDBusyCount > 0)
                            HoldTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / obj.ACDBusyCount);
                        else
                            HoldTime = "00:00:00";

                        _ExtinCalls += obj.ExtInCalls;
                        _EXTInTime += obj.ExtInCallsTime;
                        EXTInTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtInCallsTime + obj.ExtInCallsHoldTime);
                        _EXTInHoldTime += obj.ExtInCallsHoldTime;

                        _ExtOutCalls = obj.ExtOutCalls;
                        _ExtOutTime += obj.ExternalExtOutCallsTime;
                        ExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExtOutCallsTime + obj.ExtOutCallsHoldTime); ;
                        _ExtOutHoldTime += obj.ExtOutCallsHoldTime;

                        _ExternalExtCalls += obj.ExternalExtOutCalls;
                        _ExternalExtTime += obj.ExternalExtOutCallsTime;
                        ExternalExtoutTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime + obj.ExternalExtOutCallsHoldTime);
                        _ExternalExtHoldTime += obj.ExternalExtOutCallsHoldTime;

                        _Aux1 += obj.AUX1Time;
                        AUX1 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX1Time);
                        _Aux2 += obj.AUX2Time;
                        AUX2 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX2Time);
                        _Aux3 += obj.AUX3Time;
                        AUX3 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX3Time);
                        _Aux4 += obj.AUX4Time;
                        AUX4 = ReportsCommonMethods.GetTimeFromSeconds(obj.AUX4Time);

                        _CallsNotAccepted += obj.ACDnotacceptCount;
                        _AgentRingTime += obj.ACDRingTime;
                        AgentRingTime = ReportsCommonMethods.GetTimeFromSeconds(obj.ACDRingTime);

                        _StaffedTime += obj.TotalLoggedInTime;
                        StaffedTime = ReportsCommonMethods.GetTimeFromSeconds(obj.TotalLoggedInTime);

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.AgentName);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.ACDBusyCount);
                        BodyCell = ws.Cell(Row, 3).SetValue(ACDTime);
                        BodyCell = ws.Cell(Row, 4).SetValue(ACWTime);
                        BodyCell = ws.Cell(Row, 5).SetValue(HoldTime);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.ExtInCalls);
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.ExtOutCalls);
                        BodyCell = ws.Cell(Row, 8).SetValue(ExtoutTime);
                        BodyCell = ws.Cell(Row, 9).SetValue(obj.ExternalExtOutCalls);
                        BodyCell = ws.Cell(Row, 10).SetValue(ExternalExtoutTime);
                        BodyCell = ws.Cell(Row, 11).SetValue(AUX2);
                        BodyCell = ws.Cell(Row, 12).SetValue(AUX3);
                        BodyCell = ws.Cell(Row, 13).SetValue(AUX1);
                        BodyCell = ws.Cell(Row, 14).SetValue(AUX4);
                        BodyCell = ws.Cell(Row, 15).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ExternalExtOutCallsTime));
                        BodyCell = ws.Cell(Row, 16).SetValue(obj.ACDnotacceptCount);
                        BodyCell = ws.Cell(Row, 17).SetValue(AgentRingTime);
                        BodyCell = ws.Cell(Row, 18).SetValue(StaffedTime);


                        if (i == ReportEntityList.Count - 1)
                        {
                            Row++;
                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDCalls));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            string avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_ACDTime / _ACDCalls);
                            FooterCell = ws.Cell(Row, 3).SetValue(avg);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACWTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            avg = "00:00:00";
                            if (_ACDCalls > 0)
                                avg = ReportsCommonMethods.GetTimeFromSeconds(_HoldTime / _ACDCalls);
                            FooterCell = ws.Cell(Row, 5).SetValue(avg);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(_ExtinCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(_ExtOutCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExtOutTime + _ExtOutHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(_ExternalExtCalls);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 10).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime + _ExternalExtHoldTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux2));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux3));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux1));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 14).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_Aux4));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 15).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ExternalExtTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 16).SetValue(_CallsNotAccepted);
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 17).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AgentRingTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            FooterCell = ws.Cell(Row, 19).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_StaffedTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        // mazhar
        public static string GenerateAgentScoringReportCSV(string ReportName, List<ReportAgentScoringEntity> ReportEntityList, AgentScoringReportSettingParms reportSettingParms, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                ws.Column(2).Width = 18;
                ws.Column(3).Width = 18;
                ws.Column(4).Width = 18;
                ws.Column(5).Width = 18;
                ws.Column(6).Width = 18;
                ws.Column(7).Width = 18;


                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 2).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("B1:G3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 2).SetValue("Agent Report - League Table");
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 2).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 2).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 2).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;

                List<List<ReportAgentScoringEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Title, x.AgentName }).Select(y => y.ToList()).ToList();

                foreach (List<ReportAgentScoringEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                {

                    Row += 2;
                    Headercell = ws.Cell(Row, 2).SetValue("Agent: " + ReportEntityAgentScoreEntity[0].AgentName);
                    Headercell.Style.Font.FontSize = 18;
                    Headercell.RichText.Substring(0, 5).Bold = true;



                    Headercell = ws.Cell(Row, 4).SetValue("Queue: " + ReportEntityAgentScoreEntity[0].Title);
                    Headercell.Style.Font.FontSize = 18;
                    Headercell.RichText.Substring(0, 5).Bold = true;

                    int Days_worked = ReportEntityAgentScoreEntity.Count;
                    int AgentAvaliblity_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AgentAvailabilityPercent) / Days_worked);
                    int AgentAvaliblityScore_overAll = (int)((AgentAvaliblity_overAll) * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                    int CallAnswerWithInNSec_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AnsweredWithInPercent) / Days_worked);
                    int CallAnswerWithInNSecScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                    int CallAccepted_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallAcceptedPercent) / Days_worked);
                    int CallAcceptedScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));


                    int total_score = AgentAvaliblityScore_overAll + CallAnswerWithInNSecScore_overAll + CallAcceptedScore_overAll;

                    Headercell = ws.Cell(Row, 6).SetValue("Score: " + total_score);
                    Headercell.Style.Font.FontSize = 18;
                    Headercell.RichText.Substring(0, 5).Bold = true;

                    Row += 2;
                    Headercell = ws.Cell(Row, 2).SetValue("Summary ");
                    Headercell.Style.Font.FontSize = 15;
                    Headercell.Style.Font.Bold = true;

                    Row++;

                    Headercell = ws.Cell(Row, 2).SetValue("Days\n Worked");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 3).SetValue("Agent \nAvalibility \n(Score)");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 4).SetValue("Answered by Agent within \n" + reportSettingParms.AgentCallAnsweredInNSec + " Seconds \n(Score)");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 5).SetValue("Calls Answered \n by Agent \n (Score)");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 6).SetValue("Avg. Calls \n Answered \nDaily");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 7).SetValue("Total Calls \n Answered");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

                    Row++;

                    Headercell = ws.Cell(Row, 2).SetValue((Days_worked));
                    Headercell.Style.Font.FontSize = 14;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                    Headercell = ws.Cell(Row, 3).SetValue((AgentAvaliblity_overAll) + "%(" + ((AgentAvaliblityScore_overAll.ToString())).ToString() + ")");
                    int startIndex = Headercell.Value.ToString().IndexOf('(');
                    int lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                    Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                    Headercell.Style.Font.FontSize = 14;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;


                    Headercell = ws.Cell(Row, 4).SetValue((CallAnswerWithInNSec_overAll) + "%(" + ((CallAnswerWithInNSecScore_overAll.ToString())).ToString() + ")");
                    startIndex = Headercell.Value.ToString().IndexOf('(');
                    lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                    Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                    Headercell.Style.Font.FontSize = 14;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;



                    Headercell = ws.Cell(Row, 5).SetValue((CallAccepted_overAll) + "%(" + ((CallAcceptedScore_overAll.ToString())).ToString() + ")");
                    startIndex = Headercell.Value.ToString().IndexOf('(');
                    lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                    Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                    Headercell.Style.Font.FontSize = 14;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;


                    int AverageCalls = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsHandled) / Days_worked);
                    Headercell = ws.Cell(Row, 6).SetValue(AverageCalls);
                    Headercell.Style.Font.FontSize = 14;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                    int total_calls_received = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsServed));
                    Headercell = ws.Cell(Row, 7).SetValue(total_calls_received);
                    Headercell.Style.Font.FontSize = 14;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Row += 2;



                    // Details
                    Headercell = ws.Cell(Row, 2).SetValue("BreakDown");
                    Headercell.Style.Font.FontSize = 15;
                    Headercell.Style.Font.Bold = true;

                    Row++;
                    Headercell = ws.Cell(Row, 2).SetValue("Date");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Alignment.SetWrapText();


                    Headercell = ws.Cell(Row, 3).SetValue("Daily Score");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();



                    Headercell = ws.Cell(Row, 4).SetValue("Agent \nAvalibility \n(Score)");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 5).SetValue("Answer within \n" + reportSettingParms.AgentCallAnsweredInNSec + " Seconds \n(Score)");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 6).SetValue("Calls Answered \n by Agent \n (Score)");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.SetWrapText();

               
                    Headercell = ws.Cell(Row, 7).SetValue("Calls Answered");
                    Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;


                    foreach (var Record in ReportEntityAgentScoreEntity)
                    {
                        Row++;

                        Headercell = ws.Cell(Row, 2).SetValue(Record.StartTime.Substring(0, 10).Replace('-', '/'));
                        Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                        Headercell.Style.Font.Bold = true;

                        int daily_score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0) + Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0) + Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                        Headercell = ws.Cell(Row, 3).SetValue(daily_score);
                        Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                        Headercell.Style.Font.Bold = true;


                        int agent_avaliblity_Score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                        Headercell = ws.Cell(Row, 4).SetValue((int)Record.AgentAvailabilityPercent + "%(" + ((agent_avaliblity_Score.ToString())).ToString() + ")");
                        startIndex = Headercell.Value.ToString().IndexOf('(');
                        lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                        int Called_answered_score = (int)(Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                        Headercell = ws.Cell(Row, 5).SetValue(((int)Record.AnsweredWithInPercent + "%(" + (((Called_answered_score.ToString())).ToString() + ")")));
                        startIndex = Headercell.Value.ToString().IndexOf('(');
                        lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                        int Accepted_Call_score = (int)(Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                        Headercell = ws.Cell(Row, 6).SetValue(((int)Record.CallAcceptedPercent + "%(" + (((Accepted_Call_score.ToString())).ToString() + ")")));
                        startIndex = Headercell.Value.ToString().IndexOf('(');
                        lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

              
                        Headercell = ws.Cell(Row, 7).SetValue(Record.CallsServed.ToString());
                        Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                        Headercell.Style.Font.Bold = true;
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentScoringReportExcel(string ReportName, List<ReportAgentScoringEntity> ReportEntityList, AgentScoringReportSettingParms reportSettingParms, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = {
                    "Agent",
                    "Queue",
                    "Score",
                    "Days Worked",
                    "Agent Avalibility (Score)-Summary",
                    "Answered by Agent within" + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)-Summary",
                    "Calls Answered  by Agent  (Score)-Summary",
                    "Avg. Calls Answered Daily",
                    "Total Calls Answered",
                    "Date",
                             "Daily Score",
                    "Agent Availability (Score)",
                    "Answer within" + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)",
                    "Calls Answered  by Agent  (Score)",
           
                    "Calls Answered" };
                output.AppendLine(string.Join(separator, headings));



                int Days_worked = ReportEntityList.Count;
                int AgentAvaliblity_overAll = (int)(ReportEntityList.Sum(x => x.AgentAvailabilityPercent) / Days_worked);
                int AgentAvaliblityScore_overAll = (int)((AgentAvaliblity_overAll) * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                int CallAnswerWithInNSec_overAll = (int)(ReportEntityList.Sum(x => x.AnsweredWithInPercent) / Days_worked);
                int CallAnswerWithInNSecScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                int CallAccepted_overAll = (int)(ReportEntityList.Sum(x => x.CallAcceptedPercent) / Days_worked);
                int CallAcceptedScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));


                int total_score = AgentAvaliblityScore_overAll + CallAnswerWithInNSecScore_overAll + CallAcceptedScore_overAll;



                int AverageCalls = (int)(ReportEntityList.Sum(x => x.CallsHandled) / Days_worked);


                int total_calls_received = (int)(ReportEntityList.Sum(x => x.CallsServed));


                foreach (var col in ReportEntityList.OrderBy(x => x.AgentName))

                {

                    int Called_answered_score = (int)(col.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                    int Accepted_Call_score = (int)(col.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                    int daily_score = (int)(col.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0) + col.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0) + col.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                    int agent_avaliblity_Score = (int)(col.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0));


                    String[] newLine = {
                        col.AgentName,
                        col.Title,
                        total_score.ToString(),
                        Days_worked.ToString(),
                        (AgentAvaliblity_overAll) + "%(" + ((AgentAvaliblityScore_overAll.ToString())).ToString() + ")",
                        (CallAnswerWithInNSec_overAll) + "%(" + ((CallAnswerWithInNSecScore_overAll.ToString())).ToString() + ")",
                        (CallAccepted_overAll) + "%(" + ((CallAcceptedScore_overAll.ToString())).ToString() + ")",
                        AverageCalls.ToString(),
                        total_calls_received.ToString(),
                        col.StartTime.Substring(0, 10).Replace('-', '/'),
                        (int)col.AgentAvailabilityPercent + "%(" + ((agent_avaliblity_Score.ToString())).ToString() + ")",
                        ((int)col.AnsweredWithInPercent + "%(" + (((Called_answered_score.ToString())).ToString() + ")")),
                        ((int)col.CallAcceptedPercent + "%(" + (((Accepted_Call_score.ToString())).ToString() + ")")),
                        daily_score.ToString(),
                        col.CallsServed.ToString() };
                    output.AppendLine(string.Join(separator, newLine));
                }




                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;


            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentLeadReportCSV(string ReportName, List<ReportAgentLeadEntity> ReportEntityList, AgentScoringReportSettingParms reportSettingParms, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {

            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                ws.Column(2).Width = 18;
                ws.Column(3).Width = 18;
                ws.Column(4).Width = 18;
                ws.Column(5).Width = 18;
                ws.Column(6).Width = 18;
                ws.Column(7).Width = 18;


                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 2).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("B1:G3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 2).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 2).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 2).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 2).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentLeadEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();

                    Row += 2;
                    Headercell = ws.Cell(Row, 2).SetValue("League Table");
                    Headercell.Style.Font.FontSize = 15;
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                   // Headercell.Style.Alignment.SetWrapText();

                    Row++;

                    Headercell = ws.Cell(Row, 2).SetValue("Agent Name");
                    Headercell.Style.Font.Bold = true;
                   // Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                   // Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 3).SetValue("Overall Score");
                    Headercell.Style.Font.Bold = true;
                   // Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    //Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 4).SetValue("Days Worked");
                    Headercell.Style.Font.Bold = true;
                   // Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                   // Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 5).SetValue("Agent Avalibility (Score)");
                   // Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                    //Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 6).SetValue("Answered by Agent within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)");
                    //Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                   // Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 7).SetValue("Calls Answered by Agent (Score)");
                   // Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                  //  Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 8).SetValue("Avg. Calls Answered Daily");
                   // Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                   // Headercell.Style.Alignment.SetWrapText();

                    Headercell = ws.Cell(Row, 9).SetValue("Total Calls Answered");
                    //Headercell.Style.Alignment.WrapText = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    Headercell.Style.Font.Bold = true;
                   // Headercell.Style.Alignment.SetWrapText();

                    foreach (List<ReportAgentLeadEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                    {

                        int Days_worked = ReportEntityAgentScoreEntity.Count;
                        int AgentAvaliblity_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AgentAvailabilityPercent) / Days_worked);
                        int AgentAvaliblityScore_overAll = (int)((AgentAvaliblity_overAll) * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                        int CallAnswerWithInNSec_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AnsweredWithInPercent) / Days_worked);
                        int CallAnswerWithInNSecScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                        int CallAccepted_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallAcceptedPercent) / Days_worked);
                        int CallAcceptedScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));


                        int total_score = AgentAvaliblityScore_overAll + CallAnswerWithInNSecScore_overAll + CallAcceptedScore_overAll;

                        Row++;

                        Headercell = ws.Cell(Row, 2).SetValue((ReportEntityAgentScoreEntity[0].AgentName));
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 3).SetValue((total_score));
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 4).SetValue((Days_worked));
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 5).SetValue((AgentAvaliblity_overAll) + "%(" + ((AgentAvaliblityScore_overAll.ToString())).ToString() + ")");
                        int startIndex = Headercell.Value.ToString().IndexOf('(');
                        int lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;


                        Headercell = ws.Cell(Row, 6).SetValue((CallAnswerWithInNSec_overAll) + "%(" + ((CallAnswerWithInNSecScore_overAll.ToString())).ToString() + ")");
                        startIndex = Headercell.Value.ToString().IndexOf('(');
                        lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;



                        Headercell = ws.Cell(Row, 7).SetValue((CallAccepted_overAll) + "%(" + ((CallAcceptedScore_overAll.ToString())).ToString() + ")");
                        startIndex = Headercell.Value.ToString().IndexOf('(');
                        lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;


                        int AverageCalls = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsHandled) / Days_worked);
                        Headercell = ws.Cell(Row, 8).SetValue(AverageCalls);
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        int total_calls_received = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsServed));
                        Headercell = ws.Cell(Row, 9).SetValue(total_calls_received);
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    }
                    foreach (List<ReportAgentLeadEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                    {
                        Row += 2;

                        // Details
                        Headercell = ws.Cell(Row, 2).SetValue("Daily BreakDown");
                        Headercell.Style.Font.FontSize = 15;
                        Headercell.Style.Font.Bold = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                        //Headercell.Style.Alignment.SetWrapText();
                        Row++;
                        Headercell = ws.Cell(Row, 2).SetValue("Agent: " + ReportEntityAgentScoreEntity[0].AgentName);
                        Headercell.Style.Font.FontSize = 15;
                        Headercell.Style.Font.Bold = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                       // Headercell.Style.Alignment.SetWrapText();

                        Row++;
                        Headercell = ws.Cell(Row, 2).SetValue("Date");
                        Headercell.Style.Font.Bold = true;
                       // Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                        //Headercell.Style.Alignment.SetWrapText();


                        Headercell = ws.Cell(Row, 3).SetValue("Daily Score");
                       // Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                        Headercell.Style.Font.Bold = true;
                       // Headercell.Style.Alignment.SetWrapText();



                        Headercell = ws.Cell(Row, 4).SetValue("Agent Avalibility (Score)");
                       // Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                        Headercell.Style.Font.Bold = true;
                      //  Headercell.Style.Alignment.SetWrapText();

                        Headercell = ws.Cell(Row, 5).SetValue("Answer within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)");
                       // Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                        Headercell.Style.Font.Bold = true;
                      //  Headercell.Style.Alignment.SetWrapText();

                        Headercell = ws.Cell(Row, 6).SetValue("Calls Answered by Agent (Score)");
                      //  Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                        Headercell.Style.Font.Bold = true;
                        //Headercell.Style.Alignment.SetWrapText();


                        Headercell = ws.Cell(Row, 7).SetValue("Calls Answered");
                       // Headercell.Style.Alignment.WrapText = true;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                        Headercell.Style.Font.Bold = true;


                        foreach (var Record in ReportEntityAgentScoreEntity)
                        {
                            Row++;

                            Headercell = ws.Cell(Row, 2).SetValue(Record.StartTime.Substring(0, 10).Replace('-', '/'));
                            //Headercell.Style.Alignment.WrapText = true;
                            Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                            Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                            Headercell.Style.Font.Bold = false;

                            int daily_score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0) + Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0) + Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                            Headercell = ws.Cell(Row, 3).SetValue(daily_score);
                            //Headercell.Style.Alignment.WrapText = true;
                            Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                            Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                            Headercell.Style.Font.Bold = false;


                            int agent_avaliblity_Score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                            Headercell = ws.Cell(Row, 4).SetValue((int)Record.AgentAvailabilityPercent + "%(" + ((agent_avaliblity_Score.ToString())).ToString() + ")");
                            int startIndex = Headercell.Value.ToString().IndexOf('(');
                            int lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                            Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                            Headercell.Style.Font.FontSize = 14;
                            Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                            Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                            Headercell.Style.Font.Bold = false;

                            int Called_answered_score = (int)(Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                            Headercell = ws.Cell(Row, 5).SetValue(((int)Record.AnsweredWithInPercent + "%(" + (((Called_answered_score.ToString())).ToString() + ")")));
                            startIndex = Headercell.Value.ToString().IndexOf('(');
                            lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                            Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                            Headercell.Style.Font.FontSize = 14;
                            Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                            Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                            Headercell.Style.Font.Bold = false;

                            int Accepted_Call_score = (int)(Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                            Headercell = ws.Cell(Row, 6).SetValue(((int)Record.CallAcceptedPercent + "%(" + (((Accepted_Call_score.ToString())).ToString() + ")")));
                            startIndex = Headercell.Value.ToString().IndexOf('(');
                            lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                            Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                            Headercell.Style.Font.FontSize = 14;
                            Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                            Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                            Headercell.Style.Font.Bold = false;


                            Headercell = ws.Cell(Row, 7).SetValue(Record.CallsServed.ToString());
                            //Headercell.Style.Alignment.WrapText = true;
                            Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                            Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                            Headercell.Style.Font.Bold = false;
                        }

                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateAgentLeadReportExcel(string ReportName, List<ReportAgentLeadEntity> ReportEntityList, AgentScoringReportSettingParms reportSettingParms, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();
                String[] headings = new String[] {
                        "Agent Name",
                    "Overall Score",
                    "Days Worked",
                    "Agent Avalibility (Score)-Summary",
                    "Answered by Agent within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)",
                    "Calls Answered by Agent (Score)",
                    "Avg. Calls Answered Daily",
                    "Total Calls Answered" ,
                     "Date",
                    "Daily Score",
                    "Agent Avalibility (Score)",
                    "Answer within " + reportSettingParms.AgentCallAnsweredInNSec + " Seconds (Score)",
                    "Calls Answered by Agent (Score)",
                    "Calls Answered"};
                output.AppendLine(string.Join(separator, headings));


                int Days_worked = 0;
                int AgentAvaliblity_overAll = 0;
                int AgentAvaliblityScore_overAll = 0;
                int CallAnswerWithInNSec_overAll = 0;
                int CallAnswerWithInNSecScore_overAll = 0;
                int CallAccepted_overAll = 0;
                int CallAcceptedScore_overAll = 0;

                int AverageCalls = 0;

                int total_calls_received = 0;
                int total_score = 0;








                if (ReportEntityList.Count > 0)
                {
                    List<List<ReportAgentLeadEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();
                   


                   
                    foreach (List<ReportAgentLeadEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                    {

                         Days_worked = ReportEntityAgentScoreEntity.Count;
                        AgentAvaliblity_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AgentAvailabilityPercent) / Days_worked);
                         AgentAvaliblityScore_overAll = (int)((AgentAvaliblity_overAll) * (reportSettingParms.AgentAvaiabilityScore / 100.0));
                         CallAnswerWithInNSec_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.AnsweredWithInPercent) / Days_worked);
                         CallAnswerWithInNSecScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                         CallAccepted_overAll = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallAcceptedPercent) / Days_worked);
                         CallAcceptedScore_overAll = (int)((CallAnswerWithInNSec_overAll) * (reportSettingParms.AgentCallsAnsweredScore / 100.0));
                        AverageCalls = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsHandled) / Days_worked);

                         total_calls_received = (int)(ReportEntityAgentScoreEntity.Sum(x => x.CallsServed));
                        
                        total_score = AgentAvaliblityScore_overAll + CallAnswerWithInNSecScore_overAll + CallAcceptedScore_overAll;


                    }

                    
                    foreach (List<ReportAgentLeadEntity> ReportEntityAgentScoreEntity in ReportEntityGroupedList)
                    {
                    
                        

                        foreach (var Record in ReportEntityAgentScoreEntity)
                        {
                            string date = Record.StartTime.Substring(0, 10).Replace('-', '/');
                            int daily_score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0) + Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0) + Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));

                            int agent_avaliblity_Score = (int)(Record.AgentAvailabilityPercent * (reportSettingParms.AgentAvaiabilityScore / 100.0));

                            int Called_answered_score = (int)(Record.AnsweredWithInPercent * (reportSettingParms.AgentCallAnsweredInNSecScore / 100.0));
                            int Accepted_Call_score = (int)(Record.CallAcceptedPercent * (reportSettingParms.AgentCallsAnsweredScore / 100.0));



                            String[] newLine = {
                                ReportEntityAgentScoreEntity[0].AgentName,

                                total_score.ToString(),
                                Days_worked.ToString(),
                                (AgentAvaliblity_overAll) + "%(" + ((AgentAvaliblityScore_overAll.ToString())).ToString() + ")"
                                ,(CallAnswerWithInNSec_overAll) + "%(" + ((CallAnswerWithInNSecScore_overAll.ToString())).ToString() + ")"
                                ,(CallAccepted_overAll) + "%(" + ((CallAcceptedScore_overAll.ToString())).ToString() + ")"
                                ,AverageCalls.ToString(),
                                total_calls_received.ToString()
                                ,Record.StartTime.Substring(0, 10).Replace('-', '/')
                             ,daily_score.ToString()
                                ,(int)Record.AgentAvailabilityPercent + "%(" + ((agent_avaliblity_Score.ToString())).ToString() + ")"
                                ,((int)Record.AnsweredWithInPercent + "%(" + (((Called_answered_score.ToString())).ToString() + ")"))
                                ,((int)Record.CallAcceptedPercent + "%(" + (((Accepted_Call_score.ToString())).ToString() + ")"))
                                ,Record.CallsServed.ToString()
                                };
                            output.AppendLine(string.Join(separator, newLine));



                        }


                    }

                    string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                    File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());

                    return FileName;

                }
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }
            return null;
        }

        // mazhar --44
        public static string GenerateSupervisorScoringReportCSV(string ReportName, List<ReportSupervisorScoringEntity> ReportEntityList, SupervisorScoringReportSettingParms ReportParm, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                ws.Column(2).Width = 18;
                ws.Column(3).Width = 18;
                ws.Column(4).Width = 18;
                ws.Column(5).Width = 18;
                ws.Column(6).Width = 18;



                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 2).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:F3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 2).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 2).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 2).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 2).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;




                var Graphimage1 = ws.AddPicture(GraphSupervisorScoringReport(ReportEntityList, ReportParm));
                Graphimage1.MoveTo(ws.Cell(Row, 1).Address);
                Graphimage1.Scale(.3);
                Row = 23;







                if (ReportEntityList.Count > 0)
                {
                    Row += 2;
                    Headercell = ws.Cell(Row, 2).SetValue("League Table");
                    Headercell.Style.Font.FontSize = 18;
                    Headercell.RichText.Substring(0, 5).Bold = true;

                    Row += 2;
                    Headercell = ws.Cell(Row, 2).SetValue("Queue Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    
                    Headercell = ws.Cell(Row, 3).SetValue("Overall Score");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                    Headercell = ws.Cell(Row, 4).SetValue("Total Calls Received");
                    Headercell.Style.Font.Bold = true;                   
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                    Headercell = ws.Cell(Row, 5).SetValue("Calls Answered (Score)");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                                        
                    Headercell = ws.Cell(Row, 6).SetValue("Answer within " + ReportParm.QCallAnsweredInNSec + " Seconds (Score)");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                    Headercell = ws.Cell(Row, 7).SetValue("Waited less than " + ReportsCommonMethods.GetMinutesFromSeconds2(ReportParm.QWaitingTimeInNSec) + " Seconds (Score)");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                    Headercell = ws.Cell(Row, 8).SetValue("Avg. Calls Abandoned Daily.");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                    foreach (ReportSupervisorScoringEntity ReportEntity in ReportEntityList)
                    {
                        var score = (int)(ReportEntity.AnsweredPercent * (ReportParm.QCallsAnsweredScore / 100.0) + ReportEntity.AnsweredWithInPercent * (ReportParm.QCallAnsweredInNSecScore / 100.0) + ReportEntity.WaitingWithInPercent * (ReportParm.QWaitingTimeScore / 100.0));
                       
                        Row++;
                        Headercell = ws.Cell(Row, 2).SetValue(ReportEntity.BoardTitle);
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 3).SetValue(score);
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 4).SetValue(ReportEntity.TotalCalls);
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 5).SetValue(((int)ReportEntity.AnsweredPercent) + "% (" + ((int)(ReportEntity.AnsweredPercent * (ReportParm.QCallsAnsweredScore / 100.0))).ToString() + ")");
                        int startIndex = Headercell.Value.ToString().IndexOf('(');
                        int lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                        Headercell = ws.Cell(Row, 6).SetValue(((int)ReportEntity.AnsweredWithInPercent) + "% (" + ((int)(ReportEntity.AnsweredWithInPercent * (ReportParm.QCallAnsweredInNSecScore / 100.0))).ToString() + ")");
                        startIndex = Headercell.Value.ToString().IndexOf('(');
                        lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 7).SetValue(((int)ReportEntity.WaitingWithInPercent) + "% (" + ((int)(ReportEntity.WaitingWithInPercent * (ReportParm.QWaitingTimeScore / 100.0))).ToString() + ")");
                        startIndex = Headercell.Value.ToString().IndexOf('(');
                        lenght = Headercell.Value.ToString().IndexOf(')') - startIndex;
                        Headercell.RichText.Substring(startIndex, lenght).Bold = true;
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;

                        Headercell = ws.Cell(Row, 8).SetValue(((int)ReportEntity.AvgAbandoned));
                        Headercell.Style.Font.FontSize = 14;
                        Headercell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                        Headercell.Style.Alignment.Vertical = XLAlignmentVerticalValues.Bottom;
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

       
        public static string GenerateOverFlowedCallsReportCSV(string ReportName, List<ReportOverflowedCalls> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                List<List<ReportOverflowedCalls>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                foreach (List<ReportOverflowedCalls> ReportEntityLists in ReportEntityGroupedList)
                {

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].StartDate + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Calls Overflowed");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Overflowed Due to Max Wait Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Overflowed Due to Max Callers");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Overflowed Outside of Service Hours");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Overflowed Due to No Agents Logged In");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Trasnsferred In by Agents");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("Transferred out by Caller");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("Overflowed to Other Queues");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("Longest Wait before Being Overflowed");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("Avg. Wait before Being Overflowed");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;



                        ReportOverflowedCalls obj = ReportEntityLists[i];



                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Title.ToString());
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.Totaloverflowedcall.ToString());
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.Totaloverflowedcallwaittime.ToString());
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.Totaloverflowedcallerwaiting.ToString());
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.TotaloverflowedcallOUTOFHOUR.ToString());
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.TotaloverflowedcallNOAgent.ToString());
                        BodyCell = ws.Cell(Row, 7).SetValue(obj.TotalTransfersIn.ToString());
                        BodyCell = ws.Cell(Row, 8).SetValue(obj.TotaloverflowedcallDTMF.ToString());
                        BodyCell = ws.Cell(Row, 9).SetValue(obj.TotaloverflowedcallInQueues.ToString());
                        BodyCell = ws.Cell(Row, 10).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.OverFlowInWaitTime)));
                        BodyCell = ws.Cell(Row, 11).SetValue(ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.OverFlowInAVGWaitTime)));

                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateSupervisorScoringReportExcel(string ReportName, List<ReportSupervisorScoringEntity> ReportEntityList, SupervisorScoringReportSettingParms ReportParm, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {




                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue", "Score", "Total Calls Received", "Calls  Answered (Score)", "Answer within " + ReportParm.QCallAnsweredInNSec + " Seconds (Score)", "Waited less than" + ReportsCommonMethods.GetMinutesFromSeconds2(ReportParm.QWaitingTimeInNSec) + " Seconds  (Score)", "Avg. Calls Abandoned  Per Day" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.BoardTitle))
                {

                    var score = (int)(col.AnsweredPercent * (ReportParm.QCallsAnsweredScore / 100.0) + col.AnsweredWithInPercent * (ReportParm.QCallAnsweredInNSecScore / 100.0) + col.WaitingWithInPercent * (ReportParm.QWaitingTimeScore / 100.0));

                    String[] newLine = { col.BoardTitle, score.ToString(), col.TotalCalls.ToString(), ((int)col.AnsweredPercent) + "% (" + ((int)(col.AnsweredPercent * (ReportParm.QCallsAnsweredScore / 100.0))).ToString() + ")", ((int)col.AnsweredWithInPercent) + "% (" + ((int)(col.AnsweredWithInPercent * (ReportParm.QCallAnsweredInNSecScore / 100.0))).ToString() + ")", ((int)col.WaitingWithInPercent) + "% (" + ((int)(col.WaitingWithInPercent * (ReportParm.QWaitingTimeScore / 100.0))).ToString() + ")", ((int)col.AvgAbandoned).ToString() };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateOverFlowedCallsReportExcel(string ReportName, List<ReportOverflowedCalls> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {





                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = {
                    "Date:",
                    "Queue Name",
                    "Calls Overflowed",
                    "Overflowed Due to Max Wait Time",
                    "Overflowed Due to Max Callers",
                    "Overflowed Outside of Service Hours",
                    "Overflowed Due to No Agents Logged In",
                    "Trasnsferred In by Agents",
                    "Transferred out by Caller",
                    "Overflowed to Other Queues",
                    "Longest Wait before Being Overflowed",
                    "Avg. Wait before Being Overflowed" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.StartDate))
                {



                    String[] newLine = {
                        col.StartDate,
                        col.Title,
                        col.Totaloverflowedcall.ToString(),
                        col.Totaloverflowedcallwaittime.ToString(),
                        col.Totaloverflowedcallerwaiting.ToString(),
                        col.TotaloverflowedcallOUTOFHOUR.ToString(),
                        col.TotaloverflowedcallNOAgent.ToString(),
                        col.TotalTransfersIn.ToString(),
                        col.TotaloverflowedcallDTMF.ToString(),
                        col.TotaloverflowedcallInQueues.ToString() ,
                        ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(col.OverFlowInWaitTime)),
                        ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(col.OverFlowInAVGWaitTime)) };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;


            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateGroupConsolidatedReportCSV(string ReportName, List<ReportGroupConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                List<List<ReportGroupConsolidatedEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                foreach (List<ReportGroupConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].StartDate + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Total calls offered");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Total calls answered");
                    Headercell.Style.Font.Bold = true;                  
                    Headercell = ws.Cell(Row, 4).SetValue("Total ABND.%");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Service Level %");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Logged in Staff");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Avg. Hold Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("Trasnsferred by ACD Agents");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("Transferred to Queue by ACD Agents");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("Longest Wait Time before Answered");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("Longest Wait Time before Abandoning");
                    Headercell.Style.Font.Bold = true;                   
                    Headercell = ws.Cell(Row, 12).SetValue("AVG. Wait ABND.");
                    Headercell.Style.Font.Bold = true;                  
                    Headercell = ws.Cell(Row, 13).SetValue("AVG. Calls Per Hour");
                    Headercell.Style.Font.Bold = true;
                 

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;

                        string TotalCalls = "";
                        string TotalAnswered = "0";
                        string TotalAbanodoned = "0";
                        string AbandonedPer = "0";
                        string SLAPer = "0";
                        string AvgAvailableTime = "00:00:00";
                        string LoggedInCount = "0";
                        string AvgHold = "00:00:00";
                        string TransferACD = "0";
                        string AvgWaitTime = "00:00:00";
                        string LongestWaitAnswer = "00:00:00";
                        string LongestWaitAbandoned = "00:00:00";
                        string AvgWaitAbandonedTime = "00:00:00";
                        string TotalInternalCall = "0";
                        string TotalInternalTime = "00:00:00";
                        string AVGInternalTime = "00:00:00";
                        string AvgCallsHour = "0";
                        string TotalTransfersIn = "0";

                        ReportGroupConsolidatedEntity obj = ReportEntityLists[i];


                        if (obj.TotalCalls != "")
                        {
                            TotalCalls = obj.TotalCalls;
                        }
                        if (obj.TotalAnswered != "")
                        {
                            TotalAnswered = obj.TotalAnswered;
                        }
                        if (obj.TotalAbanodoned != "")
                        {
                            TotalAbanodoned = obj.TotalAbanodoned;
                        }
                        if (obj.AbandonedPer != "")
                        {
                            AbandonedPer = Math.Round(Convert.ToDouble(obj.AbandonedPer), 2).ToString();

                        }
                        if (obj.SLAPer != "")
                        {
                            SLAPer = Math.Round(Convert.ToDouble(obj.SLAPer), 2).ToString();

                        }
                        if (obj.AvgAvailableTime != "")
                        {
                            AvgAvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgAvailableTime) * 3600).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LoggedInCount != "")
                        {
                            LoggedInCount = obj.LoggedInCount;
                        }
                        if (obj.AvgHold != "")
                        {
                            AvgHold = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgHold)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.TransferACD != "")
                        {
                            TransferACD = obj.TransferACD;
                        }
                        if (obj.AvgWaitTime != "")
                        {
                            AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LongestWaitAnswer != "")
                        {
                            LongestWaitAnswer = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAnswer)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.LongestWaitAbandoned != "")
                        {
                            LongestWaitAbandoned = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWaitAbandoned)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AvgWaitAbandonedTime != "")
                        {
                            AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.TotalInternalCall != "")
                        {
                            TotalInternalCall = obj.TotalInternalCall;
                        }
                        if (obj.TotalInternalTime != "")
                        {
                            TotalInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalInternalTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AVGInternalTime != "")
                        {
                            AVGInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AVGInternalTime)).ToString(@"hh\:mm\:ss");
                        }
                        if (obj.AvgCallsHour != "")
                        {
                            AvgCallsHour = Math.Round(Convert.ToDouble(obj.AvgCallsHour), 2).ToString();
                        }
                        if (obj.TotalTransfersIn != "")
                        {
                            TotalTransfersIn = obj.TotalTransfersIn;
                        }


                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Title);
                        BodyCell = ws.Cell(Row, 2).SetValue(TotalCalls);
                        BodyCell = ws.Cell(Row, 3).SetValue(TotalAnswered);
                       // BodyCell = ws.Cell(Row, 4).SetValue(TotalAbanodoned);
                        BodyCell = ws.Cell(Row, 4).SetValue(AbandonedPer);
                        BodyCell = ws.Cell(Row, 5).SetValue(SLAPer);
              //          BodyCell = ws.Cell(Row, 7).SetValue(AvgAvailableTime);

                        BodyCell = ws.Cell(Row, 6).SetValue(LoggedInCount);
                        BodyCell = ws.Cell(Row, 7).SetValue(AvgHold);
                        BodyCell = ws.Cell(Row, 8).SetValue(TransferACD);
                        BodyCell = ws.Cell(Row, 9).SetValue(TotalTransfersIn);

                        //BodyCell = ws.Cell(Row, 11).SetValue(AvgWaitTime);
                        BodyCell = ws.Cell(Row, 10).SetValue(LongestWaitAnswer);
                        BodyCell = ws.Cell(Row, 11).SetValue(LongestWaitAbandoned);

                        BodyCell = ws.Cell(Row, 12).SetValue(AvgWaitAbandonedTime);
                        //BodyCell = ws.Cell(Row, 16).SetValue(TotalInternalCall);
                        //BodyCell = ws.Cell(Row, 17).SetValue(TotalInternalTime);
                        //BodyCell = ws.Cell(Row, 18).SetValue(AVGInternalTime);
                        BodyCell = ws.Cell(Row, 13).SetValue(AvgCallsHour);
                        //BodyCell = ws.Cell(Row, 19).SetValue(TotalTransfersIn);


                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateGroupConsolidatedReportExcel(string ReportName, List<ReportGroupConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();







                String[] headings = {
                    "Date",
                    "Queue Name",
                    "Total calls offered",
                    "Total calls answered",
                    //"Total ABND.",
                    "Total ABND. %",
                    "Service Level %",
                    //"Average FTE Available",
                    "Logged in Agents",
                    "Avg. Hold Time",
                    "Trasnsferred by ACD Agents",
                     "Transferred to Queue by ACD Agents",
                   // "AVG. Wait Time",
                    "Longest Wait Time before Answered",
                    "Longest Wait Time before Abandoning",
                    "AVG. Wait Time ABND.",
                    //"Internal Calls",
                    //"Internal Call Handling Time",
                    //"AVG. Internal Call Time",
                    "Avg. Calls Per Hour" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.StartDate))
                {

                    string TotalCalls = "";
                    string TotalAnswered = "0";
                    string TotalAbanodoned = "0";
                    string AbandonedPer = "0";
                    string SLAPer = "0";
                    string AvgAvailableTime = "00:00:00";
                    string LoggedInCount = "0";
                    string AvgHold = "00:00:00";
                    string TransferACD = "0";
                    string AvgWaitTime = "00:00:00";
                    string LongestWaitAnswer = "00:00:00";
                    string LongestWaitAbandoned = "00:00:00";
                    string AvgWaitAbandonedTime = "00:00:00";
                    string TotalInternalCall = "0";
                    string TotalInternalTime = "00:00:00";
                    string AVGInternalTime = "00:00:00";
                    string AvgCallsHour = "0";
                    string TotalTransfersIn = "0";




                    if (col.TotalCalls != "")
                    {
                        TotalCalls = col.TotalCalls;
                    }
                    if (col.TotalAnswered != "")
                    {
                        TotalAnswered = col.TotalAnswered;
                    }
                    if (col.TotalAbanodoned != "")
                    {
                        TotalAbanodoned = col.TotalAbanodoned;
                    }
                    if (col.AbandonedPer != "")
                    {
                        AbandonedPer = Math.Round(Convert.ToDouble(col.AbandonedPer), 2).ToString();

                    }
                    if (col.SLAPer != "")
                    {
                        SLAPer = Math.Round(Convert.ToDouble(col.SLAPer), 2).ToString();

                    }
                    if (col.AvgAvailableTime != "")
                    {
                        AvgAvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(col.AvgAvailableTime) * 3600).ToString(@"hh\:mm\:ss");
                    }
                    if (col.LoggedInCount != "")
                    {
                        LoggedInCount = col.LoggedInCount;
                    }
                    if (col.AvgHold != "")
                    {
                        AvgHold = TimeSpan.FromSeconds(Convert.ToDouble(col.AvgHold)).ToString(@"hh\:mm\:ss");
                    }
                    if (col.TransferACD != "")
                    {
                        TransferACD = col.TransferACD;
                    }
                    if (col.AvgWaitTime != "")
                    {
                        AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(col.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (col.LongestWaitAnswer != "")
                    {
                        LongestWaitAnswer = TimeSpan.FromSeconds(Convert.ToDouble(col.LongestWaitAnswer)).ToString(@"hh\:mm\:ss");
                    }
                    if (col.LongestWaitAbandoned != "")
                    {
                        LongestWaitAbandoned = TimeSpan.FromSeconds(Convert.ToDouble(col.LongestWaitAbandoned)).ToString(@"hh\:mm\:ss");
                    }
                    if (col.AvgWaitAbandonedTime != "")
                    {
                        AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(col.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (col.TotalInternalCall != "")
                    {
                        TotalInternalCall = col.TotalInternalCall;
                    }
                    if (col.TotalInternalTime != "")
                    {
                        TotalInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(col.TotalInternalTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (col.AVGInternalTime != "")
                    {
                        AVGInternalTime = TimeSpan.FromSeconds(Convert.ToDouble(col.AVGInternalTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (col.AvgCallsHour != "")
                    {
                        AvgCallsHour = Math.Round(Convert.ToDouble(col.AvgCallsHour), 2).ToString();
                    }
                    if (col.TotalTransfersIn != "")
                    {
                        TotalTransfersIn = col.TotalTransfersIn;
                    }





                    String[] newLine = {
                        col.StartDate,
                        col.Title,
                        TotalCalls,
                        TotalAnswered,
                        //TotalAbanodoned,
                        AbandonedPer,
                        SLAPer,
                        //AvgAvailableTime,
                        LoggedInCount,
                        AvgHold,
                        TransferACD,
                        TotalTransfersIn,
                        //AvgWaitTime,
                        LongestWaitAnswer,
                        LongestWaitAbandoned,
                        AvgWaitAbandonedTime,
                        //TotalInternalCall,
                        //TotalInternalTime,
                        //AVGInternalTime,
                        AvgCallsHour };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateQueueAnalysisReportCSV(string ReportName, List<ReportQueueAnalysisEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                //  List<List<ReportQueueAnalysisEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();




                Row++;
                //  Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].StartDate + " ");
                Headercell.RichText.Substring(0, 4).Bold = true;
                Headercell.Style.Font.FontSize = 13;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Queue Name");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Total Calls Answered");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("Answer Call %");
                Headercell.Style.Font.Bold = true;

                Headercell = ws.Cell(Row, 4).SetValue("Avg. ACD Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("ABND. Calls.");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 6).SetValue("ABND. %");
                Headercell.Style.Font.Bold = true;

                Headercell = ws.Cell(Row, 7).SetValue("Avg. ABND. Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 8).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 9).SetValue("Avg. Wait Time");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 10).SetValue("Overflowed into Queue");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 11).SetValue("Overflowed out");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 12).SetValue("Avg. Time to Answer");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 13).SetValue("Service Level %");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 14).SetValue("Max Delay");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 15).SetValue("ACD Time %");
                Headercell.Style.Font.Bold = true;





                int _ACDcalls = 0;
                int _Abandoncalls = 0;
                int _TotalCalls = 0;
                int _Flowin = 0;
                int _Flowout = 0;

                decimal _AverageSpeedAns = 0;
                decimal _SLAPer = 0;
                decimal _PerACDTime = 0;
                decimal _PerAnswerCall1 = 0;
                decimal _PerAbandonCalls1 = 0;
                double _maxdelay = 0;
                double _TotalACDTime = 0;
                double _TotalAgentTime = 0;

                int ACDcalls1 = 0;
                decimal SLAPer1 = 0;

                decimal TotalServiceLevelCalls = 0;


                TimeSpan _AverageACDTime = TimeSpan.Parse("00:00");
                TimeSpan _AvgWaitAbandonedTime = TimeSpan.Parse("00:00");
                TimeSpan _AvgWaitTime = TimeSpan.Parse("00:00");
                TimeSpan _TotalRingDurationAnswerCalls = TimeSpan.Parse("00:00");

                foreach (var obj in ReportEntityList)
                {
                    Row++;

                    string ACDcalls = "0";
                    string AverageACDTime = "00:00:00";
                    string Abandoncalls = "0";
                    string TotalCalls = "0";
                    string Flowin = "0";
                    string Flowout = "0";
                    string PerAnswerCall = "0";
                    string PerAbandonCalls = "0";
                    string PerWithinServiceLevel = "0";
                    string MaxDelay = "00:00:00";
                    string PerACDTimel = "0";
                    string SLAPer = "0";
                    string AvgWaitTime = "00:00:00";
                    string AvgWaitAbandonedTime = "00:00:00";

                    string TotalACDTime = "0";
                    string TotalAgentTime = "0";


                    string TotalRingDurationAnswerCalls = "00:00:00";


                    if (obj.TotalAnswered != "")
                    {
                        ACDcalls = obj.TotalAnswered;
                    }
                    if (obj.TotalAbanodoned != "")
                    {
                        Abandoncalls = obj.TotalAbanodoned;
                    }
                    if (obj.TotalCalls != "")
                    {
                        TotalCalls = obj.TotalCalls;
                    }

                    if (obj.Totaloverflowedcall != "")
                    {
                        Flowout = obj.Totaloverflowedcall;
                    }

                    if (obj.TotaloverflowedcallInQueues != "")
                    {
                        Flowin = obj.TotaloverflowedcallInQueues;
                    }


                    if (obj.TotalACDTime != "" && obj.TotalAnswered != "" && obj.TotalACDTime != "0" && obj.TotalAnswered != "0")
                    {
                        AverageACDTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalACDTime) / Convert.ToDouble(obj.TotalAnswered)).ToString(@"hh\:mm\:ss");
                    }

                    if (obj.AvgWaitAbandonedTime != "")
                    {
                        AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (obj.AvgWaitTime != "")
                    {
                        AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (obj.TotalCalls != "" && obj.TotalAnswered != "" && obj.TotalCalls != "0" && obj.TotalAnswered != "0")
                    {
                        double _PerAnswerCall = Convert.ToDouble(obj.TotalAnswered) / Convert.ToDouble(obj.TotalCalls) * 100;
                        PerAnswerCall = Math.Round(_PerAnswerCall, 2).ToString();
                    }

                    if (obj.TotalCalls != "" && obj.TotalAbanodoned != "" && obj.TotalCalls != "0" && obj.TotalAbanodoned != "0")
                    {
                        double _PerAbandonCalls = Convert.ToDouble(obj.TotalAbanodoned) / Convert.ToDouble(obj.TotalCalls) * 100;
                        PerAbandonCalls = Math.Round(_PerAbandonCalls, 2).ToString();
                    }


                    if (obj.SLAPerl != "")
                    {
                        PerWithinServiceLevel = Math.Round(Convert.ToDouble(obj.SLAPerl), 2).ToString();
                    }
                    if (obj.LongestWait != "")
                    {
                        MaxDelay = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWait)).ToString(@"hh\:mm\:ss"); ;

                        if (_maxdelay < Convert.ToDouble(obj.LongestWait))
                        {
                            _maxdelay = Convert.ToDouble(obj.LongestWait);
                        }

                    }

                    if (obj.TotalAgentTime != "" && obj.TotalACDTime != "" && obj.TotalAgentTime != "0" && obj.TotalACDTime != "0")
                    {
                        double _PerACDTimel = Convert.ToDouble(obj.TotalACDTime) / Convert.ToDouble(obj.TotalAgentTime) * 100;
                        PerACDTimel = Math.Round(_PerACDTimel, 2).ToString();
                    }

                    if (obj.TotalRingDurationAnswerCalls != "0" && obj.TotalRingDurationAnswerCalls != "" && obj.TotalAnswered != "" && obj.TotalAnswered != "0")
                    {

                        TotalRingDurationAnswerCalls = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalRingDurationAnswerCalls) / Convert.ToDouble(obj.TotalAnswered)).ToString(@"hh\:mm\:ss");

                    }

                    if ((obj.TotalAgentTime != "" && obj.TotalAgentTime != "0") || (obj.TotalACDTime != "" && obj.TotalACDTime != "0"))
                    {

                        TotalACDTime = obj.TotalACDTime;

                        TotalAgentTime = obj.TotalAgentTime;
                    }





                    ws.Cell(Row, 1).SetValue(obj.Title);

                    ws.Cell(Row, 2).SetValue(ACDcalls);
                    ws.Cell(Row, 3).SetValue(PerAnswerCall);


                    ws.Cell(Row, 4).SetValue(AverageACDTime);

                    ws.Cell(Row, 5).SetValue(Abandoncalls);
                    ws.Cell(Row, 6).SetValue(PerAbandonCalls);


                    ws.Cell(Row, 7).SetValue(AvgWaitAbandonedTime);

                    ws.Cell(Row, 8).SetValue(TotalCalls);

                    ws.Cell(Row, 9).SetValue(AvgWaitTime);

                    ws.Cell(Row, 10).SetValue(Flowin);

                    ws.Cell(Row, 11).SetValue(Flowout);

                    ws.Cell(Row, 12).SetValue(TotalRingDurationAnswerCalls);


      
           
                    ws.Cell(Row, 13).SetValue(PerWithinServiceLevel);

                    ws.Cell(Row, 14).SetValue(MaxDelay);

                    ws.Cell(Row, 15).SetValue(AvgWaitTime);




                    _ACDcalls += Convert.ToInt32(ACDcalls);
                    _Abandoncalls += Convert.ToInt32(Abandoncalls);
                    _TotalCalls += Convert.ToInt32(TotalCalls);
                    _Flowin += Convert.ToInt32(Flowin);
                    _Flowout += Convert.ToInt32(Flowout);
                    _TotalRingDurationAnswerCalls = _TotalRingDurationAnswerCalls.Add(TimeSpan.Parse(TotalRingDurationAnswerCalls));

                    _AverageACDTime = _AverageACDTime.Add(TimeSpan.Parse(AverageACDTime));
                    _AvgWaitAbandonedTime = _AvgWaitAbandonedTime.Add(TimeSpan.Parse(AvgWaitAbandonedTime));
                    _AvgWaitTime = _AvgWaitTime.Add(TimeSpan.Parse(AvgWaitTime));

                    _SLAPer += Convert.ToDecimal(PerWithinServiceLevel);
                    _PerACDTime += Convert.ToDecimal(PerACDTimel);
                    _PerAnswerCall1 += Convert.ToDecimal(PerAnswerCall);
                    _PerAbandonCalls1 += Convert.ToDecimal(PerAbandonCalls);

                    _TotalAgentTime += Convert.ToDouble(TotalAgentTime);
                    _TotalACDTime += Convert.ToDouble(TotalACDTime);


                    ACDcalls1 = Convert.ToInt32(ACDcalls);
                    SLAPer1 = Convert.ToDecimal(PerWithinServiceLevel);

                    TotalServiceLevelCalls += (SLAPer1 * ACDcalls1 / 100);

                }

                _AverageACDTime = TimeSpan.FromSeconds(_AverageACDTime.TotalSeconds / ReportEntityList.Count);
                _AvgWaitAbandonedTime = TimeSpan.FromSeconds(_AvgWaitAbandonedTime.TotalSeconds / ReportEntityList.Count);
                _AvgWaitTime = TimeSpan.FromSeconds(_AvgWaitTime.TotalSeconds / ReportEntityList.Count);
                _TotalRingDurationAnswerCalls = TimeSpan.FromSeconds(_TotalRingDurationAnswerCalls.TotalSeconds / ReportEntityList.Count);

                //var strPerAnswerCall1 = Math.Round(_PerAnswerCall1 / ReportEntityList.Count, 2).ToString();
                //var strPerAbandonCalls1 = Math.Round(_PerAbandonCalls1 / ReportEntityList.Count, 2).ToString();
                var strPerAnswerCall1 = Math.Round((Convert.ToDecimal(_ACDcalls) / _TotalCalls) * 100, 2).ToString();

                var strPerAbandonCalls1 = Math.Round((Convert.ToDecimal(_Abandoncalls) / _TotalCalls) * 100, 2).ToString();
                //  var strPerACDTime = Math.Round(_PerACDTime / ReportEntityList.Count, 2).ToString();
                var strPerACDTime = Math.Round((_TotalACDTime * 100 / _TotalAgentTime), 2).ToString();

                var strSLAPer = Math.Round(TotalServiceLevelCalls / _ACDcalls * 100, 2).ToString();


                var maxdelayTime = TimeSpan.FromSeconds(_maxdelay).ToString(@"hh\:mm\:ss");

                Row++; Row++;

                IXLCell TotalCell = ws.Cell(Row, 1).SetValue("Total");
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 2).SetValue(_ACDcalls);
                TotalCell.Style.Font.SetBold(true);

                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 3).SetValue(strPerAnswerCall1);
                TotalCell.Style.Font.SetBold(true);

                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 4).SetValue(_AverageACDTime.ToString(@"hh\:mm\:ss"));
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 5).SetValue(_Abandoncalls);
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 6).SetValue(strPerAbandonCalls1);
                TotalCell.Style.Font.SetBold(true);

                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 7).SetValue(_AvgWaitAbandonedTime.ToString(@"hh\:mm\:ss"));
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 8).SetValue(_TotalCalls);
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 9).SetValue(_AvgWaitTime.ToString(@"hh\:mm\:ss"));
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 10).SetValue(_Flowin);
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 11).SetValue(_Flowout);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 12).SetValue(_TotalRingDurationAnswerCalls);
                TotalCell.Style.Font.SetBold(true);
       
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 13).SetValue(strSLAPer);
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 14).SetValue(maxdelayTime);
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                TotalCell = ws.Cell(Row, 15).SetValue(strPerACDTime);
                TotalCell.Style.Font.SetBold(true);
                TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;



                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateQueueAnalysisReportExcel(string ReportName, List<ReportQueueAnalysisEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue Name", "Total Calls Answered", "Answer Call %", "Avg. ACD Time", "ABND. Calls", "ABND. %", "Avg. ABND. Time", "Total Calls", "Avg. Wait Time", "Overflowed into Queue", "Overflowed out", "Avg. Time to Answer",   "Service Level %", "Max Delay", "ACD Time %" };
                output.AppendLine(string.Join(separator, headings));
                int _ACDcalls = 0;
                int _Abandoncalls = 0;
                int _TotalCalls = 0;
                int _Flowin = 0;
                int _Flowout = 0;

                decimal _AverageSpeedAns = 0;
                decimal _SLAPer = 0;
                decimal _PerACDTime = 0;
                decimal _PerAnswerCall1 = 0;
                decimal _PerAbandonCalls1 = 0;
                double _maxdelay = 0;
                double _TotalACDTime = 0;
                double _TotalAgentTime = 0;

                int ACDcalls1 = 0;
                decimal SLAPer1 = 0;

                decimal TotalServiceLevelCalls = 0;


                TimeSpan _AverageACDTime = TimeSpan.Parse("00:00");
                TimeSpan _AvgWaitAbandonedTime = TimeSpan.Parse("00:00");
                TimeSpan _AvgWaitTime = TimeSpan.Parse("00:00");
                TimeSpan _TotalRingDurationAnswerCalls = TimeSpan.Parse("00:00");

                foreach (var obj in ReportEntityList)
                {

                    string ACDcalls = "0";
                    string AverageACDTime = "00:00:00";
                    string Abandoncalls = "0";
                    string TotalCalls = "0";
                    string Flowin = "0";
                    string Flowout = "0";
                    string PerAnswerCall = "0";
                    string PerAbandonCalls = "0";
                    string PerWithinServiceLevel = "0";
                    string MaxDelay = "00:00:00";
                    string PerACDTimel = "0";
                    string SLAPer = "0";
                    string AvgWaitTime = "00:00:00";
                    string AvgWaitAbandonedTime = "00:00:00";

                    string TotalACDTime = "0";
                    string TotalAgentTime = "0";


                    string TotalRingDurationAnswerCalls = "00:00:00";


                    if (obj.TotalAnswered != "")
                    {
                        ACDcalls = obj.TotalAnswered;
                    }
                    if (obj.TotalAbanodoned != "")
                    {
                        Abandoncalls = obj.TotalAbanodoned;
                    }
                    if (obj.TotalCalls != "")
                    {
                        TotalCalls = obj.TotalCalls;
                    }

                    if (obj.Totaloverflowedcall != "")
                    {
                        Flowout = obj.Totaloverflowedcall;
                    }

                    if (obj.TotaloverflowedcallInQueues != "")
                    {
                        Flowin = obj.TotaloverflowedcallInQueues;
                    }


                    if (obj.TotalACDTime != "" && obj.TotalAnswered != "" && obj.TotalACDTime != "0" && obj.TotalAnswered != "0")
                    {
                        AverageACDTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalACDTime) / Convert.ToDouble(obj.TotalAnswered)).ToString(@"hh\:mm\:ss");
                    }

                    if (obj.AvgWaitAbandonedTime != "")
                    {
                        AvgWaitAbandonedTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitAbandonedTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (obj.AvgWaitTime != "")
                    {
                        AvgWaitTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.AvgWaitTime)).ToString(@"hh\:mm\:ss");
                    }
                    if (obj.TotalCalls != "" && obj.TotalAnswered != "" && obj.TotalCalls != "0" && obj.TotalAnswered != "0")
                    {
                        double _PerAnswerCall = Convert.ToDouble(obj.TotalAnswered) / Convert.ToDouble(obj.TotalCalls) * 100;
                        PerAnswerCall = Math.Round(_PerAnswerCall, 2).ToString();
                    }

                    if (obj.TotalCalls != "" && obj.TotalAbanodoned != "" && obj.TotalCalls != "0" && obj.TotalAbanodoned != "0")
                    {
                        double _PerAbandonCalls = Convert.ToDouble(obj.TotalAbanodoned) / Convert.ToDouble(obj.TotalCalls) * 100;
                        PerAbandonCalls = Math.Round(_PerAbandonCalls, 2).ToString();
                    }


                    if (obj.SLAPerl != "")
                    {
                        PerWithinServiceLevel = Math.Round(Convert.ToDouble(obj.SLAPerl), 2).ToString();
                    }
                    if (obj.LongestWait != "")
                    {
                        MaxDelay = TimeSpan.FromSeconds(Convert.ToDouble(obj.LongestWait)).ToString(@"hh\:mm\:ss"); ;

                        if (_maxdelay < Convert.ToDouble(obj.LongestWait))
                        {
                            _maxdelay = Convert.ToDouble(obj.LongestWait);
                        }

                    }

                    if (obj.TotalAgentTime != "" && obj.TotalACDTime != "" && obj.TotalAgentTime != "0" && obj.TotalACDTime != "0")
                    {
                        double _PerACDTimel = Convert.ToDouble(obj.TotalACDTime) / Convert.ToDouble(obj.TotalAgentTime) * 100;
                        PerACDTimel = Math.Round(_PerACDTimel, 2).ToString();
                    }

                    if (obj.TotalRingDurationAnswerCalls != "0" && obj.TotalRingDurationAnswerCalls != "" && obj.TotalAnswered != "" && obj.TotalAnswered != "0")
                    {

                        TotalRingDurationAnswerCalls = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalRingDurationAnswerCalls) / Convert.ToDouble(obj.TotalAnswered)).ToString(@"hh\:mm\:ss");

                    }

                    if ((obj.TotalAgentTime != "" && obj.TotalAgentTime != "0") || (obj.TotalACDTime != "" && obj.TotalACDTime != "0"))
                    {

                        TotalACDTime = obj.TotalACDTime;

                        TotalAgentTime = obj.TotalAgentTime;
                    }





                    String[] newLine = { obj.Title, ACDcalls, PerAnswerCall, AverageACDTime, Abandoncalls, PerAbandonCalls, AvgWaitAbandonedTime, TotalCalls, AvgWaitTime, Flowin, Flowout, TotalRingDurationAnswerCalls,  PerWithinServiceLevel, MaxDelay, AvgWaitTime };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;


            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string Generate_DEKRA_QueueAnalysisReportCSV(string ReportName, List<ReportQueueAnalysisEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                //  List<List<ReportQueueAnalysisEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                Row++;
                //  Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].StartDate + " ");
                Headercell.RichText.Substring(0, 4).Bold = true;
                Headercell.Style.Font.FontSize = 13;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Queue Number");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Queue Name");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("Total Calls");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("Total Answered");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("ABND. Calls");
                Headercell.Style.Font.Bold = true;
                if (ReportEntityList != null && ReportEntityList.Count > 0)
                    Headercell = ws.Cell(Row, 6).SetValue("ABND. Over "+ReportEntityList[0].AbandonedThreshold+" Secs");
                else
                    Headercell = ws.Cell(Row, 6).SetValue("ABND. Over n Secs");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 7).SetValue("Calls Not Accepted");
                Headercell.Style.Font.Bold = true;

                int _ACDcalls = 0;
                int _ACDnotaccepted = 0;
                int _Abandoncalls = 0;
                int _AbandoncallsAfter = 0;
                int _TotalCalls = 0;





                if (ReportEntityList.Count > 0)
                {

                    foreach (var obj in ReportEntityList)
                    {
                        Row++;
                        //  ReportQueueAnalysisEntity obj = ReportEntityList[];
                        if (obj.TotalAnswered != "")
                        {
                            _ACDcalls += Convert.ToInt32(obj.TotalAnswered);
                        }
                        if (obj.TotalCallsNotAccepted != "")
                        {
                            _ACDnotaccepted += Convert.ToInt32(obj.TotalCallsNotAccepted);
                        }
                        if (obj.TotalAbanodoned != "")
                        {
                            _Abandoncalls += Convert.ToInt32(obj.TotalAbanodoned);
                        }
                        if (obj.TotalAbanodonedAfter != "")
                        {
                            _AbandoncallsAfter += Convert.ToInt32(obj.TotalAbanodonedAfter);
                        }
                        if (obj.TotalCalls != "")
                        {
                            _TotalCalls += Convert.ToInt32(obj.TotalCalls);
                        }


                        ws.Cell(Row, 1).SetValue(obj.GroupNumber);

                        ws.Cell(Row, 2).SetValue(obj.Title);

                        ws.Cell(Row, 3).SetValue(Convert.ToInt32(obj.TotalCalls==null || obj.TotalCalls.Trim().Length == 0 ? "0" : obj.TotalCalls));

                        ws.Cell(Row, 4).SetValue(Convert.ToInt32(obj.TotalAnswered == null || obj.TotalAnswered.Trim().Length == 0 ? "0" : obj.TotalAnswered));

                        ws.Cell(Row, 5).SetValue(Convert.ToInt32(obj.TotalAbanodoned == null || obj.TotalAbanodoned.Trim().Length == 0 ? "0" : obj.TotalAbanodoned));

                        ws.Cell(Row, 6).SetValue(Convert.ToInt32(obj.TotalAbanodonedAfter == null || obj.TotalAbanodonedAfter.Trim().Length == 0 ? "0" : obj.TotalAbanodonedAfter));

                        ws.Cell(Row, 7).SetValue(Convert.ToInt32(obj.TotalCallsNotAccepted == null || obj.TotalCallsNotAccepted.Trim().Length == 0 ? "0" : obj.TotalCallsNotAccepted));

                    }


                    Row++; Row++;

                    IXLCell TotalCell = ws.Cell(Row, 1).SetValue("");
                    TotalCell.Style.Font.SetBold(true);
                    TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                    TotalCell = ws.Cell(Row, 2).SetValue("Total");
                    TotalCell.Style.Font.SetBold(true);
                    TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                    TotalCell = ws.Cell(Row, 3).SetValue(_TotalCalls);
                    TotalCell.Style.Font.SetBold(true);
                    TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                    TotalCell = ws.Cell(Row, 4).SetValue(_ACDcalls);
                    TotalCell.Style.Font.SetBold(true);
                    TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                    TotalCell = ws.Cell(Row, 5).SetValue(_Abandoncalls);
                    TotalCell.Style.Font.SetBold(true);
                    TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                    TotalCell = ws.Cell(Row, 6).SetValue(_AbandoncallsAfter);
                    TotalCell.Style.Font.SetBold(true);
                    TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                    TotalCell = ws.Cell(Row, 7).SetValue(_ACDnotaccepted);
                    TotalCell.Style.Font.SetBold(true);
                    TotalCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                }

                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string Generate_DEKRA_QueueAnalysisReportExcel(string ReportName, List<ReportQueueAnalysisEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();
                
                String[] headings = { "Queue Number", "Queue Name", "Total Calls", "Total Answered", "ABND. Calls", ReportEntityList != null && ReportEntityList.Count > 0 ? "ABND. Over " + ReportEntityList[0].AbandonedThreshold + " Secs" : "ABND. Over n Secs", "Calls Not Accepted" };
                output.AppendLine(string.Join(separator, headings));
                int _ACDcalls = 0;
                int _ACDnotaccepted = 0;
                int _Abandoncalls = 0;
                int _AbandoncallsAfter = 0;
                int _TotalCalls = 0;
                if (ReportEntityList.Count > 0)
                {

                    foreach (var obj in ReportEntityList)
                    {
                        //  ReportQueueAnalysisEntity obj = ReportEntityList[];
                        if (obj.TotalAnswered != "")
                        {
                            _ACDcalls += Convert.ToInt32(obj.TotalAnswered);
                        }
                        if (obj.TotalCallsNotAccepted != "")
                        {
                            _ACDnotaccepted += Convert.ToInt32(obj.TotalCallsNotAccepted);
                        }
                        if (obj.TotalAbanodoned != "")
                        {
                            _Abandoncalls += Convert.ToInt32(obj.TotalAbanodoned);
                        }
                        if (obj.TotalAbanodonedAfter != "")
                        {
                            _AbandoncallsAfter += Convert.ToInt32(obj.TotalAbanodonedAfter);
                        }
                        if (obj.TotalCalls != "")
                        {
                            _TotalCalls += Convert.ToInt32(obj.TotalCalls);
                        }

                        String[] newLine = { obj.GroupNumber, obj.Title, 
                            obj.TotalCalls == null || obj.TotalCalls.Trim().Length==0?"0":obj.TotalCalls,
                            obj.TotalAnswered == null || obj.TotalAnswered.Trim().Length==0?"0":obj.TotalAnswered,
                            obj.TotalAbanodoned == null || obj.TotalAbanodoned.Trim().Length==0?"0":obj.TotalAbanodoned,
                            obj.TotalAbanodonedAfter == null || obj.TotalAbanodonedAfter.Trim().Length==0?"0":obj.TotalAbanodonedAfter,
                            obj.TotalCallsNotAccepted == null || obj.TotalCallsNotAccepted.Trim().Length==0?"0":obj.TotalCallsNotAccepted };
                        output.AppendLine(string.Join(separator, newLine));
                    }
                    String[] newLineTotal = { "", "Total", _TotalCalls + "", _ACDcalls + "", _Abandoncalls + "", _AbandoncallsAfter + "", _ACDnotaccepted + "" };
                    output.AppendLine(string.Join(separator, newLineTotal));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;


            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateYBVCallsReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                Headercell = ws.Cell(Row, 1).SetValue("Date");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue(ReportEntityList[0].FirstCountHeader);
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue(ReportEntityList[0].SecondCountHeader);
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue(ReportEntityList[0].ThirdCountHeader);
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("Transfer Count");
                Headercell.Style.Font.Bold = true;

                int TransferCount = 0;
                int FirstCount = 0;
                int SecondCount = 0;
                int ThirdCount = 0;
                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportYBVCallsEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Date);
                    BodyCell = ws.Cell(Row, 2).SetValue(obj.FirstCount);
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.SecondCount);
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.ThirdCount);
                    BodyCell = ws.Cell(Row, 5).SetValue(obj.TransferCount);

                    TransferCount += obj.TransferCount;
                    FirstCount += obj.FirstCount;
                    SecondCount += obj.SecondCount;
                    ThirdCount += obj.ThirdCount;

                }
                Row++;
                IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 2).SetValue(FirstCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 3).SetValue(SecondCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 4).SetValue(ThirdCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 5).SetValue(TransferCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");


                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateExternalRoutingCallsReportCSV(string ReportName, List<ReportExternalRoutingCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportExternalRoutingCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.DeviceID }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportExternalRoutingCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Company Name: " + ReportEntityLists[0].DeviceID + " ");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Font.FontSize = 14;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue(ReportEntityList[0].FirstCountHeader);
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue(ReportEntityList[0].SecondCountHeader);
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue(ReportEntityList[0].ThirdCountHeader);
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Transfer Count");
                    Headercell.Style.Font.Bold = true;

                    int TransferCount = 0;
                    int FirstCount = 0;
                    int SecondCount = 0;
                    int ThirdCount = 0;
                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportExternalRoutingCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Date);
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.FirstCount);
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.SecondCount);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.ThirdCount);
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.TransferCount);

                        TransferCount += obj.TransferCount;
                        FirstCount += obj.FirstCount;
                        SecondCount += obj.SecondCount;
                        ThirdCount += obj.ThirdCount;

                    }


                    Row++;
                    IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    FooterCell = ws.Cell(Row, 2).SetValue(FirstCount.ToString());
                    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    FooterCell = ws.Cell(Row, 3).SetValue(SecondCount.ToString());
                    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    FooterCell = ws.Cell(Row, 4).SetValue(ThirdCount.ToString());
                    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    FooterCell = ws.Cell(Row, 5).SetValue(TransferCount.ToString());
                    FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateYBVCallsByIntervalReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                .Select(y => new ReportYBVCallsEntity
                {
                    Date = y.First().Date,
                    TransferCount = y.Sum(d => d.TransferCount),
                }).ToList();

                List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("TransferCount");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportYBVCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TransferCount.ToString());

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }



        public static string GenerateYBVCutOffCallsReportCSV(string ReportName, List<ReportYBVCutOffCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportYBVCutOffCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title)
                  .Select(y => new ReportYBVCutOffCallsEntity
                  {
                      Title = y.First().Title,
                      Duration = Convert.ToInt32(y.Average(d => d.Duration)),
                      CallCount = y.Count()
                  }).ToList();

                List<List<ReportYBVCutOffCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => x.Title).Select(y => y.ToList()).ToList();


                foreach (List<ReportYBVCutOffCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {

                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("Queue: " + ReportEntityLists[0].Title + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;

                    Headercell = ws.Cell(Row, 1).SetValue("StartTime");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Ring Duration");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Callers Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Called Number");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Group Number");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportYBVCutOffCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.StartTime);
                        BodyCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.Duration));
                        BodyCell = ws.Cell(Row, 3).SetValue(obj.CLI);
                        BodyCell = ws.Cell(Row, 4).SetValue(obj.DDI);
                        BodyCell = ws.Cell(Row, 5).SetValue(obj.GroupNumber);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportYBVCutOffCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Title == obj.Title);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total: " + obj1.CallCount + "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.Duration));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 3).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateExternalRoutingCallsByIntervalReportCSV(string ReportName, List<ReportExternalRoutingCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportExternalRoutingCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.DeviceID })
                .Select(y => new ReportExternalRoutingCallsEntity
                {
                    Date = y.First().Date,
                    TransferCount = y.Sum(d => d.TransferCount),
                }).ToList();

                List<List<ReportExternalRoutingCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date, x.DeviceID }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportExternalRoutingCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + "     " + "Company Name: " + ReportEntityLists[0].DeviceID + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Oveflow Count");
                    Headercell.Style.Font.Bold = true;

                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportExternalRoutingCallsEntity obj = ReportEntityLists[i];

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TransferCount.ToString());

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportExternalRoutingCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateExternalRoutingCallsByIntervalReportExcel(string ReportName, List<ReportExternalRoutingCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Date", "Company Name", "Time", "Oveflow Count" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.Date))
                {
                    String[] newLine = { col.Date, col.DeviceID, col.TimeKey + "-" + ReportsCommonMethods.GetNextTime(col.TimeKey, TimeInterval), col.TransferCount.ToString() };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }



        public static string GenerateAHTCallsReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;


                Headercell = ws.Cell(Row, 1).SetValue("Date");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 2).SetValue("Midnight-9AM");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 3).SetValue("9AM-5PM");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 4).SetValue("5PM-Midnight");
                Headercell.Style.Font.Bold = true;
                Headercell = ws.Cell(Row, 5).SetValue("Transfer Count");
                Headercell.Style.Font.Bold = true;

                int TransferCount = 0;
                int FirstCount = 0;
                int SecondCount = 0;
                int ThirdCount = 0;
                for (int i = 0; i < ReportEntityList.Count; i++)
                {
                    Row++;
                    ReportYBVCallsEntity obj = ReportEntityList[i];

                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Date);
                    BodyCell = ws.Cell(Row, 2).SetValue(obj.FirstCount);
                    BodyCell = ws.Cell(Row, 3).SetValue(obj.SecondCount);
                    BodyCell = ws.Cell(Row, 4).SetValue(obj.ThirdCount);
                    BodyCell = ws.Cell(Row, 5).SetValue(obj.TransferCount);

                    TransferCount += obj.TransferCount;
                    FirstCount += obj.FirstCount;
                    SecondCount += obj.SecondCount;
                    ThirdCount += obj.ThirdCount;

                }
                Row++;
                IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 2).SetValue(FirstCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 3).SetValue(SecondCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 4).SetValue(ThirdCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                FooterCell = ws.Cell(Row, 5).SetValue(TransferCount.ToString());
                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");


                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAHTCallsByIntervalReportCSV(string ReportName, List<ReportYBVCallsEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, int TimeInterval)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportYBVCallsEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date })
                .Select(y => new ReportYBVCallsEntity
                {
                    Date = y.First().Date,
                    TransferCount = y.Sum(d => d.TransferCount),
                }).ToList();

                List<List<ReportYBVCallsEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Date }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportYBVCallsEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].Date + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("TransferCount");
                    Headercell.Style.Font.Bold = true;



                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;
                        ReportYBVCallsEntity obj = ReportEntityLists[i];


                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                        BodyCell = ws.Cell(Row, 2).SetValue(obj.TransferCount.ToString());

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;
                            ReportYBVCallsEntity obj1 = TempReportEntityGroupedList.Find(x => x.Date == obj.Date);

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 2).SetValue(obj1.TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            Row++;
                        }
                    }
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateAgentConsolidatedBaordReportCSV(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {


                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//("Consolidated Queue Report");
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
                .Select(y => new ReportAgentConsolidatedEntity
                {
                    AgentName = y.First().AgentName,
                    GroupName = y.First().GroupName,
                    LogInTime = y.Min(c => c.LogInTime),
                    LogOutTime = y.Min(c => c.LogOutTime),
                    TotalLoggedInTime = y.Sum(c => c.TotalLoggedInTime),
                    ACDBusyTime = y.Sum(c => c.ACDBusyTime),
                    NonACDBusyTime = y.Sum(c => c.NonACDBusyTime),
                    ClerikalBusyTime = y.Sum(c => c.ClerikalBusyTime),
                    TempAbsTime = y.Sum(c => c.TempAbsTime),
                    UnHoldTime = y.Sum(c => c.UnHoldTime),
                    LongestUnHoldTime = y.Max(c => c.LongestUnHoldTime),
                    TotalIdleTime = y.Sum(c => c.TotalIdleTime),
                    ACDBusyCount = y.Sum(c => c.ACDBusyCount),
                    LoggedInCount = y.Sum(c => c.LoggedInCount),
                    LoggedOutCount = y.Sum(c => c.LoggedOutCount),
                    ClerikalBusyCount = y.Sum(c => c.ClerikalBusyCount),
                    TempAbsCount = y.Sum(c => c.TempAbsCount),
                    OutBoundCallCount = y.Sum(c => c.OutBoundCallCount),
                    TransferCount = y.Sum(c => c.TransferCount),
                    UnHoldCount = y.Sum(c => c.UnHoldCount),
                    HangUpCount = y.Sum(c => c.HangUpCount),
                    ACDCallnotaccept = y.Sum(c => c.ACDCallnotaccept),


                }).ToList();
                List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();



                foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Agent: " + ReportEntityLists[0].AgentName + " ");
                    Headercell.RichText.Substring(0, 5).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Time Agent Logged In");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Total Time Unavailable");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Wrap-up Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Avg. Wrap-up Time");
                    Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 6).SetValue("Available Time");
                    //Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 6).SetValue("Total Calls Handled");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 7).SetValue("Avg. Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 8).SetValue("Total Talk Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 9).SetValue("Calls Transferred");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 10).SetValue("AVG. Hold Time");
                    Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 12).SetValue("Longest Hold Time");
                    //Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 13).SetValue("Total Hold Time");
                    //Headercell.Style.Font.Bold = true;
                    //Headercell = ws.Cell(Row, 14).SetValue("Calls Out");
                    //Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 11).SetValue("Occupancy %");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 12).SetValue("Idle Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 13).SetValue("Total Calls Not Accepted");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 14).SetValue("Logged Out Time");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 15).SetValue("Total Time Logged In");
                    Headercell.Style.Font.Bold = true;

                    Double _TempAbsTime = 0;
                    Double _ClerikalBusyTime = 0;
                    Double _AvailableTime = 0;
                    Double _TotalLoggedInTime = 0;
                    Double _ACDBusyCount = 0;
                    Double _ACDBusyTime = 0;
                    Double _TransferCount = 0;
                    Double _UnHoldTime = 0;
                    Double _OutBoundCallCount = 0;

                    Double _TotalIdleTime = 0;
                    Double _HangUpCount = 0;
                    Double _Occupancy = 0;
                    Double _OccupancyCount = 0;
                    Double _AvgACDBusy = 0;
                    Double _AvgUnHold = 0;
                    Double _AvgClerikalBusy = 0;
                    TimeSpan _LogInTime = TimeSpan.MaxValue;
                    TimeSpan _LogOutTime = TimeSpan.MaxValue;
                    Double _LongestUnHoldTime = 0;
                    Double _ACDnotacceptCount = 0;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;

                        ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                        string TotalLoggedInTime = "";//N/A
                        string AvailableTime = "";//N/A
                        string Occupancy = "";//N/A
                        string LogInTime = "";//N/A
                        string LogOutTime = "";
                        string AvgClerikalBusy = "00:00:00";
                        string AvgUnHold = "00:00:00";
                        string AvgACDBusy = "00:00:00";


                        if (obj.TotalLoggedInTime != 0)
                        {
                            //AvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime).ToString(@"hh\:mm\:ss");
                            AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                            //Occupancy = Math.Round((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / WorkingHours / 36, 2).ToString();
                            TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                            _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                            _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                            _OccupancyCount++;
                        }
                        if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                        {
                            LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                            //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                            if (_LogInTime > obj.LogInTime)
                                _LogInTime = obj.LogInTime;
                        }

                        if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                        {
                            LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                            if (_LogOutTime > obj.LogOutTime)
                                _LogOutTime = obj.LogOutTime;
                        }
                        if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                        {
                            _LongestUnHoldTime = obj.LongestUnHoldTime;
                        }
                        if (obj.ClerikalBusyCount != 0)
                        {
                            AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                            _AvgClerikalBusy = _AvgClerikalBusy + Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount);

                        }
                        if (obj.ACDBusyCount != 0)
                        {
                            AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                            _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                        }

                        if (obj.UnHoldCount != 0)
                        {
                            AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                            _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                        }
                        _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                        _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                        _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                        _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                        _TransferCount = _TransferCount + obj.TransferCount;
                        _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                        _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                        _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                        _HangUpCount = _HangUpCount + obj.HangUpCount;
                        _ACDnotacceptCount = _ACDnotacceptCount + obj.ACDCallnotaccept;

                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.GroupName);
                        BodyCell = ws.Cell(Row, 2).SetValue(LogInTime);
                        BodyCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime));
                        BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime));
                        BodyCell = ws.Cell(Row, 5).SetValue(AvgClerikalBusy);
               //         BodyCell = ws.Cell(Row, 6).SetValue(AvailableTime);
                        BodyCell = ws.Cell(Row, 6).SetValue(obj.ACDBusyCount.ToString());

                        BodyCell = ws.Cell(Row, 7).SetValue(AvgACDBusy);
                        BodyCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime));
                        BodyCell = ws.Cell(Row, 9).SetValue(obj.TransferCount.ToString());
                        BodyCell = ws.Cell(Row, 10).SetValue(AvgUnHold);
                        //BodyCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestUnHoldTime));
                        //BodyCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.UnHoldTime));

                        //BodyCell = ws.Cell(Row, 14).SetValue(obj.OutBoundCallCount.ToString());
                        BodyCell = ws.Cell(Row, 11).SetValue(Occupancy);
                        BodyCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime));
                        BodyCell = ws.Cell(Row, 13).SetValue(obj.ACDCallnotaccept.ToString());
                        BodyCell = ws.Cell(Row, 14).SetValue(LogOutTime);
                        BodyCell = ws.Cell(Row, 15).SetValue(TotalLoggedInTime);

                        if (i == ReportEntityLists.Count - 1)
                        {
                            Row++;

                            IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");

                            if (_LogInTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 2).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                //FooterCell = ws.Cell(Row, 2).SetValue(new DateTime(_LogInTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell = ws.Cell(Row, 2).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }

                            FooterCell = ws.Cell(Row, 3).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TempAbsTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ClerikalBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgClerikalBusy / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvailableTime));
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 6).SetValue(_ACDBusyCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 7).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgACDBusy / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 8).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_ACDBusyTime));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 9).SetValue(_TransferCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 10).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_AvgUnHold / ReportEntityLists.Count));
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 12).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_LongestUnHoldTime));
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 13).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_UnHoldTime));
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 14).SetValue(_OutBoundCallCount.ToString());
                            //FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 11).SetValue(_OccupancyCount > 0 ? Math.Round(_Occupancy / _OccupancyCount, 2).ToString() : "");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            //FooterCell = ws.Cell(Row, 16).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalIdleTime));
                            FooterCell = ws.Cell(Row, 12).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            FooterCell = ws.Cell(Row, 13).SetValue(_ACDnotacceptCount.ToString());
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            if (_LogOutTime == TimeSpan.MaxValue)
                            {
                                FooterCell = ws.Cell(Row, 14).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            else
                            {
                                //FooterCell = ws.Cell(Row, 18).SetValue(new DateTime(_LogOutTime.Ticks).ToString("HH:mm:ss"));
                                FooterCell = ws.Cell(Row, 14).SetValue("");
                                FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            }
                            //FooterCell = ws.Cell(Row, 19).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalLoggedInTime));
                            FooterCell = ws.Cell(Row, 15).SetValue("");
                            FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                            Row++;
                        }
                    }


                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateAgentConsolidatedBaordReportExcel(string ReportName, List<ReportAgentConsolidatedEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, int WorkingHours, string timeFrom, string timeTo)
        {
            try
            {


        

               

                List<ReportAgentConsolidatedEntity> TempReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.GroupName, x.AgentName })
                .Select(y => new ReportAgentConsolidatedEntity
                {
                    AgentName = y.First().AgentName,
                    GroupName = y.First().GroupName,
                    LogInTime = y.Min(c => c.LogInTime),
                    LogOutTime = y.Min(c => c.LogOutTime),
                    TotalLoggedInTime = y.Sum(c => c.TotalLoggedInTime),
                    ACDBusyTime = y.Sum(c => c.ACDBusyTime),
                    NonACDBusyTime = y.Sum(c => c.NonACDBusyTime),
                    ClerikalBusyTime = y.Sum(c => c.ClerikalBusyTime),
                    TempAbsTime = y.Sum(c => c.TempAbsTime),
                    UnHoldTime = y.Sum(c => c.UnHoldTime),
                    LongestUnHoldTime = y.Max(c => c.LongestUnHoldTime),
                    TotalIdleTime = y.Sum(c => c.TotalIdleTime),
                    ACDBusyCount = y.Sum(c => c.ACDBusyCount),
                    LoggedInCount = y.Sum(c => c.LoggedInCount),
                    LoggedOutCount = y.Sum(c => c.LoggedOutCount),
                    ClerikalBusyCount = y.Sum(c => c.ClerikalBusyCount),
                    TempAbsCount = y.Sum(c => c.TempAbsCount),
                    OutBoundCallCount = y.Sum(c => c.OutBoundCallCount),
                    TransferCount = y.Sum(c => c.TransferCount),
                    UnHoldCount = y.Sum(c => c.UnHoldCount),
                    HangUpCount = y.Sum(c => c.HangUpCount),
                    ACDCallnotaccept = y.Sum(c => c.ACDCallnotaccept),


                }).ToList();
                List<List<ReportAgentConsolidatedEntity>> ReportEntityGroupedList = TempReportEntityGroupedList.GroupBy(x => new { x.AgentName }).Select(y => y.ToList()).ToList();

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Agent", "Queue Name", "Time Agent Logged In", "Total Time Unavailable", "Wrap-up Time", "Avg. Wrap-up Time"
                ,"Total Calls Handled","Avg. Talk Time","Total Talk Time","Calls Transferred","AVG. Hold Time","Occupancy %","Idle Time","Total Calls Not Accepted"
                ,"Logged Out Time","Total Time Logged In"

                };
                output.AppendLine(string.Join(separator, headings));



                foreach (List<ReportAgentConsolidatedEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    
               
                    Double _TempAbsTime = 0;
                    Double _ClerikalBusyTime = 0;
                    Double _AvailableTime = 0;
                    Double _TotalLoggedInTime = 0;
                    Double _ACDBusyCount = 0;
                    Double _ACDBusyTime = 0;
                    Double _TransferCount = 0;
                    Double _UnHoldTime = 0;
                    Double _OutBoundCallCount = 0;

                    Double _TotalIdleTime = 0;
                    Double _HangUpCount = 0;
                    Double _Occupancy = 0;
                    Double _OccupancyCount = 0;
                    Double _AvgACDBusy = 0;
                    Double _AvgUnHold = 0;
                    Double _AvgClerikalBusy = 0;
                    TimeSpan _LogInTime = TimeSpan.MaxValue;
                    TimeSpan _LogOutTime = TimeSpan.MaxValue;
                    Double _LongestUnHoldTime = 0;
                    Double _ACDnotacceptCount = 0;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        

                        ReportAgentConsolidatedEntity obj = ReportEntityLists[i];
                        string TotalLoggedInTime = "";//N/A
                        string AvailableTime = "";//N/A
                        string Occupancy = "";//N/A
                        string LogInTime = "";//N/A
                        string LogOutTime = "";
                        string AvgClerikalBusy = "00:00:00";
                        string AvgUnHold = "00:00:00";
                        string AvgACDBusy = "00:00:00";


                        if (obj.TotalLoggedInTime != 0)
                        {
                            //AvailableTime = TimeSpan.FromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime).ToString(@"hh\:mm\:ss");
                            AvailableTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            Occupancy = Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2).ToString();
                            //Occupancy = Math.Round((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / WorkingHours / 36, 2).ToString();
                            TotalLoggedInTime = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.TotalLoggedInTime));

                            _AvailableTime = _AvailableTime + (Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime - obj.ClerikalBusyTime);
                            _TotalLoggedInTime = _TotalLoggedInTime + Convert.ToDouble(obj.TotalLoggedInTime);

                            _Occupancy = _Occupancy + Math.Round(((Convert.ToDouble(obj.TotalLoggedInTime) - obj.TempAbsTime) / Convert.ToDouble(obj.TotalLoggedInTime)) * 100, 2);
                            _OccupancyCount++;
                        }
                        if (obj.LogInTime != null && obj.LogInTime != TimeSpan.MaxValue)
                        {
                            LogInTime = new DateTime(obj.LogInTime.Ticks).ToString("HH:mm:ss");
                            //LogInTime = Convert.ToDateTime(obj.LogInTime).ToString("HH:mm:ss");
                            if (_LogInTime > obj.LogInTime)
                                _LogInTime = obj.LogInTime;
                        }

                        if (obj.LogOutTime != null && obj.LogOutTime != TimeSpan.MaxValue)
                        {
                            LogOutTime = new DateTime(obj.LogOutTime.Ticks).ToString("HH:mm:ss");
                            if (_LogOutTime > obj.LogOutTime)
                                _LogOutTime = obj.LogOutTime;
                        }
                        if (obj.LongestUnHoldTime > _LongestUnHoldTime)
                        {
                            _LongestUnHoldTime = obj.LongestUnHoldTime;
                        }
                        if (obj.ClerikalBusyCount != 0)
                        {
                            AvgClerikalBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount));
                            _AvgClerikalBusy = _AvgClerikalBusy + Convert.ToDouble(obj.ClerikalBusyTime) / Convert.ToDouble(obj.ClerikalBusyCount);

                        }
                        if (obj.ACDBusyCount != 0)
                        {
                            AvgACDBusy = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount));
                            _AvgACDBusy = _AvgACDBusy + Convert.ToDouble(obj.ACDBusyTime) / Convert.ToDouble(obj.ACDBusyCount);
                        }

                        if (obj.UnHoldCount != 0)
                        {
                            AvgUnHold = ReportsCommonMethods.GetTimeFromSeconds(Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount));
                            _AvgUnHold = _AvgUnHold + Convert.ToDouble(obj.UnHoldTime) / Convert.ToDouble(obj.UnHoldCount);
                        }
                        _TempAbsTime = _TempAbsTime + obj.TempAbsTime;
                        _ClerikalBusyTime = _ClerikalBusyTime + obj.ClerikalBusyTime;
                        _ACDBusyCount = _ACDBusyCount + obj.ACDBusyCount;
                        _ACDBusyTime = _ACDBusyTime + obj.ACDBusyTime;
                        _TransferCount = _TransferCount + obj.TransferCount;
                        _UnHoldTime = _UnHoldTime + obj.UnHoldTime;
                        _OutBoundCallCount = _OutBoundCallCount + obj.OutBoundCallCount;
                        _TotalIdleTime = _TotalIdleTime + obj.TotalIdleTime;
                        _HangUpCount = _HangUpCount + obj.HangUpCount;
                        _ACDnotacceptCount = _ACDnotacceptCount + obj.ACDCallnotaccept;


                       

                        
                            String[] newLine = { obj.AgentName,obj.GroupName, LogInTime, ReportsCommonMethods.GetTimeFromSeconds(obj.TempAbsTime),
                            ReportsCommonMethods.GetTimeFromSeconds(obj.ClerikalBusyTime),AvgClerikalBusy,obj.ACDBusyCount.ToString()
                            ,AvgACDBusy,ReportsCommonMethods.GetTimeFromSeconds(obj.ACDBusyTime),obj.TransferCount.ToString(),AvgUnHold,Occupancy
                            ,ReportsCommonMethods.GetTimeFromSeconds(obj.TotalIdleTime),obj.ACDCallnotaccept.ToString(),LogOutTime,LogOutTime

                        };
                            output.AppendLine(string.Join(separator, newLine));
                        




                    }


                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }






        public static string GenerateCallsbyPrimaryReasonReportCSV(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallsbyPrimaryReasonEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;

                List<List<ReportCallsbyPrimaryReasonEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Board }).Select(y => y.ToList()).ToList();

                //IEnumerable<IGrouping<string,ReportHourlyDataEntity>> jj= ReportEntityList.GroupBy(x => x.Date);

                foreach (List<ReportCallsbyPrimaryReasonEntity> ReportEntityLists in ReportEntityGroupedList)
                {
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue: " + ReportEntityLists[0].Board + " ");
                    Headercell.Style.Font.Bold = true;
                    Headercell.Style.Font.FontSize = 14;
                    //Headercell = ws.Cell(Row, 2).SetValue("Queue: " + ReportEntityLists[0].BoardTitle + " ");
                    //Headercell.RichText.Substring(0, 5).Bold = true;
                    //Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("");
                    Headercell = ws.Cell(Row, 2).SetValue("Reason For Call");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 5).SetValue("Total");
                    Headercell.Style.Font.Bold = true;

                    List<List<ReportCallsbyPrimaryReasonEntity>> ReportPrimaryOutcomeGroupedList = ReportEntityLists.GroupBy(x => new { x.PrimaryOutcome }).Select(y => y.ToList()).ToList();

                    string PrimaryOutcome = "";
                    string SecondaryOutcome = "";
                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {

                        if (PrimaryOutcome != ReportEntityLists[i].PrimaryOutcome)
                        {
                            SecondaryOutcome = string.Empty;
                            Row++;
                            IXLCell BodyCell = ws.Cell(Row, 1).SetValue("");
                            BodyCell = ws.Cell(Row, 2).SetValue(ReportEntityLists[i].PrimaryOutcome);
                            if (SecondaryOutcomeEnable)
                            {
                                BodyCell.Style.Font.Bold = true;
                            }
                            BodyCell = ws.Cell(Row, 5).SetValue(ReportEntityLists[i].PrimaryCount.ToString());
                            if (!SecondaryOutcomeEnable)
                            {
                                List<ReportCallsbyPrimaryReasonEntity> ReportEntityGroupedList2 = ReportEntityList.Where(x => x.PrimaryOutcome == ReportEntityLists[i].PrimaryOutcome && x.Board == ReportEntityLists[i].Board).GroupBy(x => new { x.Board, x.AgentName })
                               .Select(y => new ReportCallsbyPrimaryReasonEntity
                               {
                                   SecondaryCount = y.Sum(d => d.SecondaryCount),
                                   AgentName = y.First().AgentName,

                               }).ToList();
                                foreach (ReportCallsbyPrimaryReasonEntity agententity in ReportEntityGroupedList2)
                                {
                                    Row++;
                                    BodyCell = ws.Cell(Row, 1).SetValue("");
                                    BodyCell = ws.Cell(Row, 3).SetValue(agententity.AgentName);
                                    BodyCell = ws.Cell(Row, 4).SetValue(agententity.SecondaryCount.ToString());
                                }
                            }
                        }

                        if (SecondaryOutcomeEnable)
                        {
                            if (SecondaryOutcome != ReportEntityLists[i].SecondaryOutcome)
                            {
                                SecondaryOutcome = ReportEntityLists[i].SecondaryOutcome;
                                List<ReportCallsbyPrimaryReasonEntity> ReportEntityGroupedList2 = ReportEntityList.Where(x => x.PrimaryOutcome == ReportEntityLists[i].PrimaryOutcome && x.SecondaryOutcome == ReportEntityLists[i].SecondaryOutcome && x.Board == ReportEntityLists[i].Board).GroupBy(x => new { x.Board, x.SecondaryOutcome })
                               .Select(y => new ReportCallsbyPrimaryReasonEntity
                               {
                                   SecondaryCount = y.Sum(d => d.SecondaryCount),
                                   SecondaryOutcome = y.First().SecondaryOutcome,

                               }).ToList();
                                if (!string.IsNullOrEmpty(ReportEntityLists[i].SecondaryOutcome))
                                {
                                    Row++;
                                    IXLCell BodyCell = ws.Cell(Row, 1).SetValue("");
                                    BodyCell = ws.Cell(Row, 3).SetValue(ReportEntityLists[i].SecondaryOutcome + " (" + ReportEntityGroupedList2[0].SecondaryCount + ")");
                                    // BodyCell = ws.Cell(Row, 3).SetValue("");

                                    Row++;
                                    BodyCell = ws.Cell(Row, 1).SetValue("");
                                    BodyCell = ws.Cell(Row, 3).SetValue(ReportEntityLists[i].AgentName);
                                    BodyCell = ws.Cell(Row, 4).SetValue(ReportEntityLists[i].SecondaryCount.ToString());

                                }
                            }
                            else
                            {
                                Row++;
                                IXLCell BodyCell = ws.Cell(Row, 1).SetValue("");
                                BodyCell = ws.Cell(Row, 3).SetValue(ReportEntityLists[i].AgentName);
                                BodyCell = ws.Cell(Row, 4).SetValue(ReportEntityLists[i].SecondaryCount.ToString());
                            }
                        }
                        //else
                        //{
                        //    Datatable.AddCell(ReportsCommonMethods.RowLeftCell("N/A"));
                        //    Datatable.AddCell(ReportsCommonMethods.RowCell(ReportEntityLists[i].SecondaryCount.ToString()));
                        //}

                        PrimaryOutcome = ReportEntityLists[i].PrimaryOutcome;

                    }

                    //for (int i = 0; i < ReportEntityLists.Count; i++)
                    //{
                    //    Row++;
                    //    ReportCallsbyPrimaryReasonEntity obj = ReportEntityLists[i];

                    //    IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.TimeKey + "-" + ReportsCommonMethods.GetNextTime(obj.TimeKey, TimeInterval));
                    //    BodyCell = ws.Cell(Row, 2).SetValue(obj.TotalCalls.ToString());
                    //    BodyCell = ws.Cell(Row, 3).SetValue(obj.TotalAnsweredCalls.ToString());
                    //    BodyCell = ws.Cell(Row, 4).SetValue(obj.TotalAbandonedCalls.ToString());
                    //    BodyCell = ws.Cell(Row, 5).SetValue(Math.Round(float.Parse(obj.AbandonedCallsPercentage.ToString())).ToString());
                    //    BodyCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj.LongestWaitingTime));
                    //    if (i == ReportEntityLists.Count - 1)
                    //    {
                    //        Row++;
                    //        ReportCallsbyPrimaryReasonEntity obj1 = TempReportEntityGroupedList.Find(x => x.BoardTitle == obj.BoardTitle && x.Date == obj.Date);

                    //        IXLCell FooterCell = ws.Cell(Row, 1).SetValue("Total");
                    //        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    //        FooterCell = ws.Cell(Row, 2).SetValue(obj1.TotalCalls.ToString());
                    //        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    //        FooterCell = ws.Cell(Row, 3).SetValue(obj1.TotalAnsweredCalls.ToString());
                    //        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    //        FooterCell = ws.Cell(Row, 4).SetValue(obj1.TotalAbandonedCalls.ToString());
                    //        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    //        //FooterCell = ws.Cell(Row, 5).SetValue(Math.Round(obj1.AbandonedCallsPercentage).ToString());
                    //        double AbandonedCallsPercentage = ((double)obj1.TotalAbandonedCalls / (double)obj1.TotalCalls * 100);
                    //        FooterCell = ws.Cell(Row, 5).SetValue(Math.Round(AbandonedCallsPercentage, 2).ToString());
                    //        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    //        FooterCell = ws.Cell(Row, 6).SetValue(ReportsCommonMethods.GetTimeFromSeconds(obj1.LongestWaitingTime));
                    //        FooterCell.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                    //        Row++;
                    //    }
                    //}
                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }


        public static string GenerateCallsbyPrimaryReasonReportExcel(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallsbyPrimaryReasonEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Queue:", "Reason For Call", "Total" };
                output.AppendLine(string.Join(separator, headings));

                string PrimaryOutcome = "";

                foreach (var col in ReportEntityList.OrderBy(x => x.Board))
                {

                    if (PrimaryOutcome != col.PrimaryOutcome)
                    {
                        String[] newLine = { col.Board, col.PrimaryOutcome, col.PrimaryCount.ToString() };
                        output.AppendLine(string.Join(separator, newLine));

                    }

                    if (SecondaryOutcomeEnable)
                    {

                        if (!string.IsNullOrEmpty(col.SecondaryOutcome))
                        {
                            String[] newLine = { col.Board, col.SecondaryOutcome, col.SecondaryCount.ToString() };
                            output.AppendLine(string.Join(separator, newLine));

                        }
                    }
                    PrimaryOutcome = col.PrimaryOutcome;


                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;




            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string Generate_DEKRA_CallBreakdownbyPrimaryReasonReportCSV(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo,List<csPrimaryOutcomeData> ListPrimaryOutComes)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {
                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row++;

                bool isHeaderCreated = false;
                if (ReportEntityList.Count > 0)
                {

                    List<List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentExtension }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportBoardEntityList in ReportEntityGroupedList)
                    {
                        isHeaderCreated = false;
                        int _TotalInstances = 0;
                        int _TotalPrimaryDuration = 0;

                        List<List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA>> ReportPrimaryOutcomeGroupedList = ReportBoardEntityList.GroupBy(x => new { x.PrimaryOutcome }).Select(y => y.ToList()).ToList();

                        for (int i = 0; i < ReportPrimaryOutcomeGroupedList.Count; i++)// List <ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportPrimaryOutcomeEntityList in ReportPrimaryOutcomeGroupedList)
                        {
                            List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportPrimaryOutcomeEntityList = ReportPrimaryOutcomeGroupedList[i];
                            if (!isHeaderCreated)
                            {
                                Row++;
                                Row++;
                                isHeaderCreated = true;
                                Headercell = ws.Cell(Row, 1).SetValue(ReportBoardEntityList[0].AgentExtension + "  " + ReportBoardEntityList[0].AgentName);
                                Headercell.Style.Font.Bold = true;
                                Headercell.Style.Font.FontSize = 13;

                                Headercell = ws.Cell(Row, 2).SetValue("Code");
                                Headercell.Style.Font.Bold = true;
                                Headercell = ws.Cell(Row, 3).SetValue("Instances");
                                Headercell.Style.Font.Bold = true;
                                Headercell = ws.Cell(Row, 4).SetValue("Total Duration");
                                Headercell.Style.Font.Bold = true;
                                Headercell = ws.Cell(Row, 5).SetValue("AVG. Duration");
                                Headercell.Style.Font.Bold = true;                              
                            }
                            Row++;
                            string primaryoutcome = ReportPrimaryOutcomeEntityList[0].PrimaryOutcome;
                            csPrimaryOutcomeData objData = null;
                            List<csPrimaryOutcomeData> listPrimaryOutcomeData = ListPrimaryOutComes.Where(x => x.Title == primaryoutcome).ToList();
                            if (listPrimaryOutcomeData != null && listPrimaryOutcomeData.Count > 0)
                                objData = listPrimaryOutcomeData[0];

                            _TotalInstances += ReportPrimaryOutcomeEntityList[0].PrimaryCount;
                            _TotalPrimaryDuration += ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration;

                            IXLCell BodyCell = ws.Cell(Row, 1).SetValue(ReportPrimaryOutcomeEntityList[0].PrimaryOutcome);
                            BodyCell.Style.Font.Bold = true;
                            BodyCell = ws.Cell(Row, 2).SetValue(objData == null ? "N/A" : objData.Code);
                            BodyCell = ws.Cell(Row, 3).SetValue(ReportPrimaryOutcomeEntityList[0].PrimaryCount + "");
                            BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration));

                            if (ReportPrimaryOutcomeEntityList[0].PrimaryCount > 0)
                            {
                                BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration / ReportPrimaryOutcomeEntityList[0].PrimaryCount));
                            }
                            else
                            {
                                BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(0));
                            }
                           

                            if (SecondaryOutcomeEnable)
                            { 
                                List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportSecondaryOutcomeGroupedList = ReportEntityList.Where(x => x.PrimaryOutcome == ReportPrimaryOutcomeEntityList[0].PrimaryOutcome && x.AgentExtension == ReportBoardEntityList[0].AgentExtension).ToList();
                              
                                foreach (ReportCallBreakdownbyPrimaryReasonEntity_DEKRA ReportSecondaryOutcomeEntityList in ReportSecondaryOutcomeGroupedList)
                                {
                                    Row++;
                                    csSecondaryOutcomeData objDataSecondary = null;
                                    string secondaryoutcome = ReportSecondaryOutcomeEntityList.SecondaryOutcome;
                                    if (objData != null)
                                    {
                                        List<csSecondaryOutcomeData> listSecondaryOutcomeData = objData.SecondaryOutComes.Where(x => x.Title == secondaryoutcome).ToList();
                                        if (listSecondaryOutcomeData != null && listSecondaryOutcomeData.Count > 0)
                                            objDataSecondary = listSecondaryOutcomeData[0];
                                    }
                                    BodyCell = ws.Cell(Row, 1).SetValue(ReportSecondaryOutcomeEntityList.SecondaryOutcome);
                                    BodyCell.Style.Font.FontColor = XLColor.FromHtml("#777777");
                                    // BodyCell.Style.Font.Bold = true;
                                    BodyCell = ws.Cell(Row, 2).SetValue(objDataSecondary == null ? "N/A" : objDataSecondary.Code);
                                    BodyCell.Style.Font.FontColor = XLColor.FromHtml("#777777");
                                    BodyCell = ws.Cell(Row, 3).SetValue(ReportSecondaryOutcomeEntityList.SecondaryCount + "");
                                    BodyCell.Style.Font.FontColor = XLColor.FromHtml("#777777");
                                    BodyCell = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(ReportSecondaryOutcomeEntityList.SecondaryCallDuration));
                                    BodyCell.Style.Font.FontColor = XLColor.FromHtml("#777777");

                                    if (ReportSecondaryOutcomeEntityList.SecondaryCount > 0)
                                    {
                                        BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(ReportSecondaryOutcomeEntityList.SecondaryCallDuration / ReportSecondaryOutcomeEntityList.SecondaryCount));
                                        BodyCell.Style.Font.FontColor = XLColor.FromHtml("#777777");
                                    }
                                    else
                                    {
                                        BodyCell = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(0));
                                        BodyCell.Style.Font.FontColor = XLColor.FromHtml("#777777");
                                    }
                                    
                                }
                                if (ReportSecondaryOutcomeGroupedList.Count > 0 && i != (ReportPrimaryOutcomeGroupedList.Count - 1))
                                {
                                    Row++;
                                }
                            }
                        }
                        Row++;
                        IXLCell BodyCell2 = ws.Cell(Row, 1).SetValue("Total");
                        BodyCell2.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        BodyCell2 = ws.Cell(Row, 2).SetValue("");
                        BodyCell2.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        BodyCell2 = ws.Cell(Row, 3).SetValue(_TotalInstances + "");
                        BodyCell2.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        BodyCell2 = ws.Cell(Row, 4).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalPrimaryDuration));
                        BodyCell2.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        if (_TotalInstances > 0)
                        {
                            BodyCell2 = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(_TotalPrimaryDuration / _TotalInstances));
                            BodyCell2.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        }
                        else
                        {
                            BodyCell2 = ws.Cell(Row, 5).SetValue(ReportsCommonMethods.GetTimeFromSeconds(0));
                            BodyCell2.Style.Fill.BackgroundColor = XLColor.FromHtml("#c0c0c0");
                        }                       
                    }
                }


                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string Generate_DEKRA_CallBreakdownbyPrimaryReasonReportExcel(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, List<csPrimaryOutcomeData> ListPrimaryOutComes)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();

                String[] headings = { "Agent","Reason", "Code", "Instances", "Total Duration", "AVG. Duration" };
                output.AppendLine(string.Join(separator, headings));
                bool isHeaderCreated = false;
                if (ReportEntityList.Count > 0)
                {

                    List<List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.AgentExtension }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportBoardEntityList in ReportEntityGroupedList)
                    {
                        isHeaderCreated = false;
                        int _TotalInstances = 0;
                        int _TotalPrimaryDuration = 0;

                        List<List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA>> ReportPrimaryOutcomeGroupedList = ReportBoardEntityList.GroupBy(x => new { x.PrimaryOutcome }).Select(y => y.ToList()).ToList();

                        for (int i = 0; i < ReportPrimaryOutcomeGroupedList.Count; i++)// List <ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportPrimaryOutcomeEntityList in ReportPrimaryOutcomeGroupedList)
                        {
                            List<ReportCallBreakdownbyPrimaryReasonEntity_DEKRA> ReportPrimaryOutcomeEntityList = ReportPrimaryOutcomeGroupedList[i];


                            string primaryoutcome = ReportPrimaryOutcomeEntityList[0].PrimaryOutcome;
                            csPrimaryOutcomeData objData = null;
                            List<csPrimaryOutcomeData> listPrimaryOutcomeData = ListPrimaryOutComes.Where(x => x.Title == primaryoutcome).ToList();
                            if (listPrimaryOutcomeData != null && listPrimaryOutcomeData.Count > 0)
                                objData = listPrimaryOutcomeData[0];
                            string code = objData == null ? "N/A" : objData.Code;
                            string avgduration = ReportPrimaryOutcomeEntityList[0].PrimaryCount == 0 ? "00:00:00" : (ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration / ReportPrimaryOutcomeEntityList[0].PrimaryCount));
                            String[] newLine =
                                {
                                ReportBoardEntityList[0].AgentExtension + "  " + ReportBoardEntityList[0].AgentName,
                                primaryoutcome,
                                code,
                                ReportPrimaryOutcomeEntityList[0].PrimaryCount+"",
                                ReportsCommonMethods.GetTimeFromSeconds(ReportPrimaryOutcomeEntityList[0].PrimaryCallDuration),
                                avgduration };
                            output.AppendLine(string.Join(separator, newLine));




                        }
                    }

                }
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateSLAReportCSV(string ReportName, List<ReportSLAPerformance> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {

                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {

                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }


                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row += 2;
                List<List<ReportSLAPerformance>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.StartDate }).Select(y => y.ToList()).ToList();


                foreach (List<ReportSLAPerformance> ReportEntityLists in ReportEntityGroupedList)
                {

                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Date: " + ReportEntityLists[0].StartDate + " ");
                    Headercell.RichText.Substring(0, 4).Bold = true;
                    Headercell.Style.Font.FontSize = 13;
                    Row++;
                    Headercell = ws.Cell(Row, 1).SetValue("Queue Name");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 2).SetValue("Calls Answered");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 3).SetValue("Calls Answered WithIn SLA");
                    Headercell.Style.Font.Bold = true;
                    Headercell = ws.Cell(Row, 4).SetValue("Calls Answered Outside SLA.");
                    Headercell.Style.Font.Bold = true;


                    for (int i = 0; i < ReportEntityLists.Count; i++)
                    {
                        Row++;

                        string TotalCalls = "";
                        string Callwithin = "0";
                        string Calloutside = "0";


                        ReportSLAPerformance obj = ReportEntityLists[i];


                        if (obj.TotalCalls != "")
                        {
                            TotalCalls = obj.TotalCalls;
                        }
                        if (obj.SLAWithIn != "")
                        {
                            Callwithin = obj.SLAWithIn;
                        }
                        if (obj.SLAOutside != "")
                        {
                            Calloutside = obj.SLAOutside;
                        }



                        IXLCell BodyCell = ws.Cell(Row, 1).SetValue(obj.Title.ToString());
                        BodyCell = ws.Cell(Row, 2).SetValue(TotalCalls);
                        BodyCell = ws.Cell(Row, 3).SetValue(Callwithin);
                        BodyCell = ws.Cell(Row, 4).SetValue(Calloutside);
                    }

                }
                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateCallBreakdownbyPrimaryReasonReportCSV(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallBreakdownbyPrimaryReasonEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo, List<csPrimaryOutcomeData> ListPrimaryOutComes)
        {
            try
            {
                int Row = 1;
                XLWorkbook wb = new XLWorkbook();
                IXLWorksheet ws = wb.Worksheets.Add(ReportName.Length >= 31 ? ReportName.Substring(0, 30) : ReportName);//(ReportName);
                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".xlsx";
                string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                string ImageLocation = HttpContext.Current.Server.MapPath("~/" + ReportsDALObj.GetCompanyLogo());
                if (File.Exists(ImageLocation))
                {
                    var image = ws.AddPicture(ImageLocation);

                    image.MoveTo(ws.Cell(Row, 1).Address);
                    image.Scale(0.50);
                    // optional: resize picture
                    Row += 3;
                    ws.Range("A1:D3").Merge();
                }

                IXLCell Headercell = ws.Cell(Row, 1).SetValue(ReportName);
                Headercell.Style.Font.Bold = true;
                Headercell.Style.Font.FontSize = 18;
                Row++;
                CultureInfo info = new CultureInfo(System.Globalization.CultureInfo.CurrentUICulture.Name);
                info.DateTimeFormat.DateSeparator = "-";
                info.DateTimeFormat.TimeSeparator = ":";
                Headercell = ws.Cell(Row, 1).SetValue("Date From: " + FromDate.ToString(info.DateTimeFormat.ShortDatePattern) + "  To: " + ToDate.ToString(info.DateTimeFormat.ShortDatePattern));
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Time Between: " + timeFrom + "  and: " + timeTo);
                Headercell.Style.Font.Bold = true;
                Row++;
                Headercell = ws.Cell(Row, 1).SetValue("Printed on: " + DateTime.Today.ToString(info.DateTimeFormat.ShortDatePattern) + "  at " + DateTime.Now.ToString("HH:mm:ss") + "");
                Headercell.Style.Font.Bold = true;
                Row++;
                if (ReportEntityList.Count > 0)
                {

                    List<List<ReportCallBreakdownbyPrimaryReasonEntity>> ReportEntityGroupedList = ReportEntityList.GroupBy(x => new { x.Board }).Select(y => y.ToList()).ToList();

                    foreach (List<ReportCallBreakdownbyPrimaryReasonEntity> ReportBoardEntityList in ReportEntityGroupedList)
                    {
                        Row++;
                        Row++;
                        Headercell = ws.Cell(Row, 1).SetValue(ReportBoardEntityList[0].Board);
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 2).SetValue("Code");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 3).SetValue("Instances");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 4).SetValue("Date/Time");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 5).SetValue("Caller Number");
                        Headercell.Style.Font.Bold = true;
                        Headercell = ws.Cell(Row, 6).SetValue("Agent");
                        Headercell.Style.Font.Bold = true;


                        List<List<ReportCallBreakdownbyPrimaryReasonEntity>> ReportPrimaryOutcomeGroupedList = ReportBoardEntityList.GroupBy(x => new { x.PrimaryOutcome }).Select(y => y.ToList()).ToList();

                        for (int i = 0; i < ReportPrimaryOutcomeGroupedList.Count; i++)//foreach (List<ReportCallBreakdownbyPrimaryReasonEntity> ReportPrimaryOutcomeEntityList in ReportPrimaryOutcomeGroupedList)
                        {
                            List<ReportCallBreakdownbyPrimaryReasonEntity> ReportPrimaryOutcomeEntityList = ReportPrimaryOutcomeGroupedList[i];
                            string primaryoutcome = ReportPrimaryOutcomeEntityList[0].PrimaryOutcome;
                            csPrimaryOutcomeData objData = null;
                            List<csPrimaryOutcomeData> listPrimaryOutcomeData = ListPrimaryOutComes.Where(x => x.Title == primaryoutcome).ToList();
                            if (listPrimaryOutcomeData != null && listPrimaryOutcomeData.Count > 0)
                                objData = listPrimaryOutcomeData[0];
                            //int TotalDuration = (int)(ReportPrimaryOutcomeEntityList.Sum(x => x.Duration));
                            int TotalInstances = ReportPrimaryOutcomeEntityList.Count;
                            Row++;

                            IXLCell BodyCell = ws.Cell(Row, 1).SetValue(primaryoutcome);
                            BodyCell.Style.Font.Bold = true;
                            BodyCell = ws.Cell(Row, 2).SetValue(objData == null ? "N/A" : objData.Code);
                            BodyCell = ws.Cell(Row, 3).SetValue(TotalInstances+"");
                            BodyCell = ws.Cell(Row, 4).SetValue("");
                            BodyCell = ws.Cell(Row, 5).SetValue("");
                            BodyCell = ws.Cell(Row, 6).SetValue("");

                            if (SecondaryOutcomeEnable)
                            {
                                List<List<ReportCallBreakdownbyPrimaryReasonEntity>> ReportSecondaryOutcomeGroupedList = ReportPrimaryOutcomeEntityList.GroupBy(x => new { x.SecondaryOutcome }).Select(y => y.ToList()).ToList();

                                for (int j = 0; j < ReportSecondaryOutcomeGroupedList.Count; j++)// foreach (List<ReportCallBreakdownbyPrimaryReasonEntity> ReportSecondaryOutcomeEntityList in ReportSecondaryOutcomeGroupedList)
                                {
                                    List<ReportCallBreakdownbyPrimaryReasonEntity> ReportSecondaryOutcomeEntityList = ReportSecondaryOutcomeGroupedList[j];
                                    // TotalDuration = (int)(ReportSecondaryOutcomeEntityList.Sum(x => x.Duration));
                                    TotalInstances = ReportSecondaryOutcomeEntityList.Count;
                                    csSecondaryOutcomeData objDataSecondary = null;
                                    string secondaryoutcome = ReportSecondaryOutcomeEntityList[0].SecondaryOutcome;
                                    if (objData != null)
                                    {
                                        List<csSecondaryOutcomeData> listSecondaryOutcomeData = objData.SecondaryOutComes.Where(x => x.Title == secondaryoutcome).ToList();
                                        if (listSecondaryOutcomeData != null && listSecondaryOutcomeData.Count > 0)
                                            objDataSecondary = listSecondaryOutcomeData[0];
                                    }
                                    for (int jj = 0; jj < ReportSecondaryOutcomeEntityList.Count; jj++)//  ReportCallBreakdownbyPrimaryReasonEntity obj in ReportSecondaryOutcomeEntityList)
                                    {
                                        ReportCallBreakdownbyPrimaryReasonEntity obj = ReportSecondaryOutcomeEntityList[jj];
                                        if (jj == 0)
                                        {
                                            Row++;
                                            BodyCell = ws.Cell(Row, 1).SetValue(secondaryoutcome);
                                            BodyCell = ws.Cell(Row, 2).SetValue(objDataSecondary == null ? "N/A" : objDataSecondary.Code);
                                            BodyCell = ws.Cell(Row, 3).SetValue(TotalInstances + "");
                                            BodyCell = ws.Cell(Row, 4).SetValue(obj.StartTime);
                                            BodyCell = ws.Cell(Row, 5).SetValue(obj.CLI);
                                            BodyCell = ws.Cell(Row, 6).SetValue(obj.Name);
                                        }
                                        else
                                        {
                                            Row++;
                                            BodyCell = ws.Cell(Row, 1).SetValue("");
                                            BodyCell = ws.Cell(Row, 2).SetValue("");
                                            BodyCell = ws.Cell(Row, 3).SetValue("");
                                            BodyCell = ws.Cell(Row, 4).SetValue(obj.StartTime);
                                            BodyCell = ws.Cell(Row, 5).SetValue(obj.CLI);
                                            BodyCell = ws.Cell(Row, 6).SetValue(obj.Name);
                                        }
                                    }
                                }

                            }
                            else
                            {
                                for (int jj = 0; jj < ReportPrimaryOutcomeEntityList.Count; jj++)
                                {
                                    ReportCallBreakdownbyPrimaryReasonEntity obj = ReportPrimaryOutcomeEntityList[jj];
                                    Row++;
                                    BodyCell = ws.Cell(Row, 1).SetValue("");
                                    BodyCell = ws.Cell(Row, 2).SetValue("");
                                    BodyCell = ws.Cell(Row, 3).SetValue("");
                                    BodyCell = ws.Cell(Row, 4).SetValue(obj.StartTime);
                                    BodyCell = ws.Cell(Row, 5).SetValue(obj.CLI);
                                    BodyCell = ws.Cell(Row, 6).SetValue(obj.Name);
                                }
                            }
                        }
                    }

                }

                wb.SaveAs(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName));
                return FileName;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }
        public static string GenerateCallBreakdownbyPrimaryReasonReportExcel(bool SecondaryOutcomeEnable, string ReportName, List<ReportCallBreakdownbyPrimaryReasonEntity> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();






                String[] headings = { "Queue", "Date & Time", "Callers Number", "Called Number", "Duration", "Agent" };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.Board))
                {


                    if (SecondaryOutcomeEnable)
                    {

                        if (col.Board == "Walk-In")
                        {
                            String[] newLine = { col.Board, col.StartTime.ToString(), col.CLI, col.DDI, "", col.Name };
                            output.AppendLine(string.Join(separator, newLine));
                        }
                        else
                        {
                            String[] newLine = { col.Board, col.StartTime.ToString(), col.CLI, col.DDI, ReportsCommonMethods.GetTimeFromSeconds(col.Duration), col.Name };
                            output.AppendLine(string.Join(separator, newLine));
                        }

                    }
                    else
                    {
                        if (col.Board == "Walk-In")
                        {
                            String[] newLine = { col.Board, col.StartTime.ToString(), col.CLI, col.DDI, "", col.Name };
                            output.AppendLine(string.Join(separator, newLine));
                        }
                        else
                        {
                            String[] newLine = { col.Board, col.StartTime.ToString(), col.CLI, col.DDI, ReportsCommonMethods.GetTimeFromSeconds(col.Duration), col.Name };
                            output.AppendLine(string.Join(separator, newLine));
                        }
                    }



                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

        public static string GenerateSLAReportExcel(string ReportName, List<ReportSLAPerformance> ReportEntityList, DateTime FromDate, DateTime ToDate, string timeFrom, string timeTo)
        {
            try
            {
                String separator = ",";
                StringBuilder output = new StringBuilder();



                String[] headings = { "Date", "Queue Name", "Calls Answered", "Calls Answered WithIn SLA", "Calls Answered Outside SLA." };
                output.AppendLine(string.Join(separator, headings));

                foreach (var col in ReportEntityList.OrderBy(x => x.StartDate))
                {
                    String[] newLine = { col.StartDate, col.Title, col.TotalCalls, col.SLAWithIn, col.SLAOutside };
                    output.AppendLine(string.Join(separator, newLine));
                }

                string FileName = ReportName.Replace(" ", "_") + DateTime.UtcNow.Ticks + ".csv";

                File.AppendAllText(HttpContext.Current.Server.MapPath("Reports\\" + HttpContext.Current.Session["vSupervisorDB"].ToString().Split('_')[1] + "\\" + FileName), output.ToString());




                return FileName;

            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return null;
            }
            finally
            {

            }

        }

    }
}