using LogApp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Script.Services;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.WebControls;
using vSuperMTClient.DALs;
using vSuperMTClient.Entities;

namespace vSuperMTClient
{
    public partial class ReportsCommonMethods : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
        [WebMethod]
        [ScriptMethod]
        public static List<ReportsEntity> GetReports(string ReportType ,string DBType)
        {
            if (HttpContext.Current.Session["User"] != null && HttpContext.Current.Session["vSupervisorDB"] != null && HttpContext.Current.Session["vBoardDB"] != null && HttpContext.Current.Session["vRecordDB"] != null)
            {
                try
                {
                    string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                    if (DBType == "vBoard")
                    {
                        ClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                    }
                    else if (DBType == "vRecord")
                    {
                        ClientDB = HttpContext.Current.Session["vRecordDB"].ToString();
                    }
                    ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                    List<ReportsEntity> ReportsEntityList;
                    ReportsEntityList = ReportsDALObj.GetReportsByType(ReportType);
                    return ReportsEntityList;
                }
                catch (Exception ex)
                {
                    LogApp.Log4Net.WriteException(ex);
                    return null;
                }
            }
            else
            {
                HttpContext.Current.Response.Redirect("Login.aspx");
                return null;
            }
            
        }

        //Recorder User to Filter Report on User Id 
        [WebMethod]
        [ScriptMethod]
        public static List<UsersEntity> GetUsers()
        {
            if (HttpContext.Current.Session["User"] != null && HttpContext.Current.Session["vSupervisorDB"] != null  && HttpContext.Current.Session["vRecordDB"] != null)
            {
                try
                {
                    string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                    string vRecordClientDB = HttpContext.Current.Session["vRecordDB"].ToString();
                    UserDAL UsersDALObj = new UserDAL(vRecordClientDB);

                    List<UsersEntity> UsersEntityList = new List<UsersEntity>();
                    UsersEntityList = UsersDALObj.GetRecorderUsers();
                    return UsersEntityList;

                }
                catch (Exception ex)
                {
                    LogApp.Log4Net.WriteException(ex);
                    return null;
                }
            }
            else
            {
                HttpContext.Current.Response.Redirect("Login.aspx");
                return null;
            }
        }

        [WebMethod]
        [ScriptMethod]
        public static List<BoardsEntity> GetBoards()
        {
            if (HttpContext.Current.Session["User"] != null && HttpContext.Current.Session["vSupervisorDB"] != null && HttpContext.Current.Session["vBoardDB"] != null)
            {
                try
                {
                    string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                    string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                    BoardsDAL BoardsDALObj = new BoardsDAL(vBoardClientDB);

                    List<BoardsEntity> BoardsEntityList = new List<BoardsEntity>();
                    BoardsEntityList = BoardsDALObj.GetAllHuntGroups();
                    return BoardsEntityList;

                }
                catch (Exception ex)
                {
                    LogApp.Log4Net.WriteException(ex);
                    return null;
                }
            }
            else
            {
                HttpContext.Current.Response.Redirect("Login.aspx");
                return null;
            }
        }

        
        [WebMethod]
        [ScriptMethod]
        public static List<AgentStatsEntity> GetAgents()
        {
            if (HttpContext.Current.Session["User"] != null && HttpContext.Current.Session["vSupervisorDB"] != null && HttpContext.Current.Session["vBoardDB"] != null)
            {
                try
                {
                    string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                    string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                    AgentStatsDAL AgentStatsDALObj = new AgentStatsDAL(vBoardClientDB);
                    List<AgentStatsEntity> AgentStatsEntityList = new List<AgentStatsEntity>();
                    AgentStatsEntityList = AgentStatsDALObj.GetDistinctAgentsNames();
                    return AgentStatsEntityList;

                }
                catch (Exception ex)
                {
                    LogApp.Log4Net.WriteException(ex);
                    return null;
                }
            }
            else
            {
                HttpContext.Current.Response.Redirect("Login.aspx");
                return null;
            }
        }

        [WebMethod]
        [ScriptMethod]
        public static List<ExtensionsEntity> GetExtensions()
        {
            if (HttpContext.Current.Session["User"] != null && HttpContext.Current.Session["vSupervisorDB"] != null && HttpContext.Current.Session["vBoardDB"] != null)
            {
                try
                {
                    string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                    string vBoardClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                    ExtensionsDAL ExtensionsDALObj = new ExtensionsDAL(vBoardClientDB);
                    List<ExtensionsEntity> ExtensionsEntityList = new List<ExtensionsEntity>();
                    ExtensionsEntityList = ExtensionsDALObj.GetExtensions();
                    return ExtensionsEntityList;

                }
                catch (Exception ex)
                {
                    LogApp.Log4Net.WriteException(ex);
                    return null;
                }
            }
            else
            {
                HttpContext.Current.Response.Redirect("Login.aspx");
                return null;
            }
        }
        [WebMethod]
        [ScriptMethod]
        public static List<SectionsEntity> GetSectionsOnReportId(string ReportId, string DBType)
        {
            if (HttpContext.Current.Session["User"] != null && HttpContext.Current.Session["vSupervisorDB"] != null && HttpContext.Current.Session["vBoardDB"] != null && HttpContext.Current.Session["vRecordDB"] != null)
            {
                try
                {
                    string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                    if (DBType == "vBoard")
                    {
                        ClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                    }
                    else if (DBType == "vRecord")
                    {
                        ClientDB = HttpContext.Current.Session["vRecordDB"].ToString();
                    }
                    ReportSectionsDAL ReportSectionsDALObj = new ReportSectionsDAL(ClientDB);
                    List<SectionsEntity> SectionsEntityList = new List<SectionsEntity>();
                    SectionsEntityList = ReportSectionsDALObj.GetSectionsOnReportID(Convert.ToInt32(ReportId));
                    return SectionsEntityList;
                }
                catch (Exception ex)
                {
                    LogApp.Log4Net.WriteException(ex);
                    return null;
                }
            }
            else
            {
                HttpContext.Current.Response.Redirect("Login.aspx");
                return null;
            }
        }

        public static DateTime GetFromDate(int DateRangeOption)
        {
            DateTime FromDate = DateTime.Now;
            try
            {

                if (DateRangeOption == 1)
                {
                    FromDate = DateTime.Today;
                }
                else if (DateRangeOption == 2)
                {
                    FromDate = DateTime.Today.AddDays(-1).Date;
                }
                else if (DateRangeOption == 3)
                {

                    FromDate = DateTime.Today.AddDays((int)DayOfWeek.Monday - (int)DateTime.Today.DayOfWeek);
                    //FromDate = DateTime.Now.AddDays(-7).Date;
                }
                else if (DateRangeOption == 4)
                {
                    FromDate = DateTime.Today.AddDays((int)DayOfWeek.Monday - (int)DateTime.Today.DayOfWeek - 7);

                }
                else if (DateRangeOption == 5)
                {
                    FromDate = DateTime.Today.AddDays(1 - DateTime.Now.Day);
                }
                else if (DateRangeOption == 6)
                {
                    FromDate = DateTime.Today.AddDays(1 - DateTime.Now.Day).AddMonths(-1);
                }
                return FromDate;
            }
            catch (Exception ex)
            {
                Log4Net.WriteException(ex);
                return FromDate;
            }
        }

        [WebMethod]
        [ScriptMethod]
        public static string GetReport(string ReportType,int ReportId, int DateRangeOption, string dateFrom, string dateTo, string timeFrom, string timeTo, bool IsSchedule, string Extensions, string Groups, string Agents,string Users, string WeekDays,int TimeInterval, string DBType)
        {
            if (HttpContext.Current.Session["vSupervisorDB"] != null)
            {
                try
                {
                    string ClientDB = HttpContext.Current.Session["vSupervisorDB"].ToString();
                    SettingsDAL SettingsDALObj = new SettingsDAL(ClientDB);
                    SettingsEntity SettingsEntityObj = SettingsDALObj.GetSettings();
                    int InternalLength = SettingsEntityObj.InternalLength;
                    int RingTimeThreshold = SettingsEntityObj.RingTimeThreshold;
                    string Currency = SettingsEntityObj.Currency;
                    if (Currency == "Euro")
                    {
                        Currency = "€";
                    }
                    else if (Currency == "Dollar")
                    {
                        Currency = "$";
                    }
                    else if (Currency == "Pound")
                    {
                        Currency = "£";
                    }
                    float DiskCostPerMin = SettingsEntityObj.DiskCostPerMin;
                    float DurationCostPerMin = SettingsEntityObj.DurationCostPerMin;

                    DateTime FromDate = Convert.ToDateTime(dateFrom);
                    DateTime ToDate = Convert.ToDateTime(dateTo);

                    if (Convert.ToInt32(DateRangeOption) > 0 && Convert.ToInt32(DateRangeOption) < 7 && IsSchedule == false)
                    {
                        FromDate = GetFromDate(Convert.ToInt32(DateRangeOption));
                        ToDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                        if (DateRangeOption == 2)
                            ToDate = DateTime.Today.AddSeconds(-1);
                        if (DateRangeOption == 4)
                            ToDate = DateTime.Today.AddDays((int)DayOfWeek.Monday - (int)DateTime.Today.DayOfWeek).AddSeconds(-1);
                        if (DateRangeOption == 6)
                            ToDate = DateTime.Today.AddDays(1 - DateTime.Now.Day).AddSeconds(-1);

                    }
                    else if (Convert.ToInt32(DateRangeOption) == 7)
                    {
                        timeFrom = FromDate.TimeOfDay.ToString();
                        timeTo = ToDate.TimeOfDay.ToString();
                    }

                    if (DBType == "vBoard")
                    {
                        ClientDB = HttpContext.Current.Session["vBoardDB"].ToString();
                        ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                        string ReportName = ReportsDALObj.GetReportNameOnReportId(ReportId);

                        if (ReportId == 1)
                        {
                            return ACDReports.GetCallsSummaryReport2(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 2)
                        {
                            return ACDReports.GetAllCallsReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 3)
                        {
                            return ACDReports.GetAbandonedCallsReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 4)
                        {
                            return ACDReports.GetCallBreakdownByHourReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays, TimeInterval);
                        }
                        else if (ReportId == 5)
                        {
                            return ACDReports.GetAgentAvailabilityReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 6)
                        {
                            return ACDReports.GetCallVolumeByAgentReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 7)
                        {
                            return ACDReports.GetAgentPresenceReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 8)
                        {
                            return ACDReports.GetTalkTimebyAgentReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 9)
                        {
                            return ACDReports.GetItemisedCallsByAgentReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 10)
                        {
                            ///this is not currently in use
                            return ACDReports.GetAgentSummaryByGroupReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 11)
                        {
                            return ACDReports.GetAgentConsolidatedReport(ReportType, ReportName, FromDate.Date, ToDate.Date.AddSeconds(86399), timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        else if (ReportId == 12)
                        {
                            return ACDReports.GetGroupConsolidatedReport(ReportType, ReportName, FromDate.Date, ToDate.Date.AddSeconds(86399), timeFrom, timeTo, Groups, WeekDays);
                        }
                        else if (ReportId == 13)
                        {
                            return ACDReports.GetYBVCallsReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, WeekDays);
                        }
                        else if (ReportId == 32)
                        {
                            return ACDReports.GetYBVCallsByIntervalReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, WeekDays, TimeInterval);
                        }
                        else if (ReportId == 14)
                        {
                            return ACDReports.GetConsolidatedAgentBoardReport(ReportType, ReportName, FromDate.Date, ToDate.Date.AddSeconds(86399), timeFrom, timeTo, Groups, Agents, WeekDays);
                        }
                        if (ReportId == 15)
                        {
                            return LoggingReports.GetCostSummaryByRegionReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 16)
                        {
                            return LoggingReports.GetCostSummaryByExtensionReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 17)
                        {
                            return LoggingReports.GetCostSummaryByPhoneReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 18)
                        {
                            return LoggingReports.GetCostSummaryByHourReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 19)
                        {
                            return LoggingReports.GetCostSummaryByDayReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 20)
                        {
                            return LoggingReports.GetCostSummaryByExtensionItemisedReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 21)
                        {
                            return LoggingReports.GetResponseSummaryByHourReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 22)
                        {
                            return LoggingReports.GetResponseSummaryByDayReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 23)
                        {
                            return LoggingReports.GetResponseSummaryByExtensionReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 24)
                        {
                            return LoggingReports.GetResponseSummaryByPhoneReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 25)
                        {
                            return LoggingReports.GetResponseSummaryByExtensionItemisedReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 26)
                        {
                            return LoggingReports.GetTrafficSummaryByHourReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 27)
                        {
                            return LoggingReports.GetTrafficSummaryByDayReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 28)
                        {
                            return LoggingReports.GetTrafficSummaryByExtensionReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 29)
                        {
                            return LoggingReports.GetTrafficSummaryByPhoneReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 30)
                        {
                            return LoggingReports.GetTrafficSummaryByExtensionItemisedReport(ReportType, Currency, InternalLength, RingTimeThreshold, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        if (ReportId == 31)
                        {
                            return LoggingReports.GetCallTrailReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Extensions, WeekDays);
                        }
                        else if (ReportId == 33)
                        {
                            return ACDReports.GetAHTCallsReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, WeekDays);
                        }
                        else if (ReportId == 34)
                        {
                            return ACDReports.GetAHTCallsByIntervalReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, WeekDays, TimeInterval);
                        }
                    }
                    else if (DBType == "vRecord")
                    {
                        ClientDB = HttpContext.Current.Session["vRecordDB"].ToString();

                        ReportsDAL ReportsDALObj = new ReportsDAL(ClientDB);
                        string ReportName = ReportsDALObj.GetReportNameOnReportId(ReportId);
                        if (ReportId == 1)
                        {
                            return RecorderReports.GetActivityLogReport(ReportType, ReportName, FromDate, ToDate, timeFrom, timeTo, Users, WeekDays);
                        }
                        else if (ReportId == 2)
                        {
                            string vCloudDB = System.Configuration.ConfigurationManager.AppSettings["vCloudDB"];
                            string FTPRepoisory = "FTPRepository";
                            string AccountID = ClientDB.Split('_')[1];
                            string RecordingPath = SettingsDALObj.GetRecordigPath(vCloudDB) + @"\" + AccountID + @"\" + FTPRepoisory; ;

                            return RecorderReports.GetDiskUsageCostReport(ReportType, Currency, ReportName, FromDate, ToDate, timeFrom, timeTo, RecordingPath, DiskCostPerMin, WeekDays);
                        }
                        else if (ReportId == 3)
                        {
                            return RecorderReports.GetDurationCostReport(ReportType, Currency, ReportName, FromDate, ToDate, timeFrom, timeTo, DurationCostPerMin, WeekDays);
                        }
                    }
                    return null;
                }
                catch (Exception ex)
                {
                    LogApp.Log4Net.WriteException(ex);
                    return null;

                }
            }
            else
            {
                HttpContext.Current.Response.Redirect("Login.aspx");
                return "";
            }

        }
    }
}